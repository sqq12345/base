/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 80013
Source Host           : 192.168.33.10:3306
Source Database       : base

Target Server Type    : MYSQL
Target Server Version : 80013
File Encoding         : 65001

Date: 2019-03-11 16:49:24
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for y_admin_group_access
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_group_access`;
CREATE TABLE `y_admin_group_access` (
  `uid` mediumint(8) unsigned NOT NULL,
  `group_id` mediumint(8) unsigned NOT NULL,
  UNIQUE KEY `uid_group_id` (`uid`,`group_id`),
  KEY `uid` (`uid`),
  KEY `group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='角色用户关联表';

-- ----------------------------
-- Records of y_admin_group_access
-- ----------------------------
INSERT INTO `y_admin_group_access` VALUES ('1', '1');
INSERT INTO `y_admin_group_access` VALUES ('2', '1');

-- ----------------------------
-- Table structure for y_admin_groups
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_groups`;
CREATE TABLE `y_admin_groups` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '角色名称',
  `description` varchar(200) DEFAULT '' COMMENT '角色描述',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '默认为1启用，2冻结',
  `rules` varchar(2000) NOT NULL DEFAULT '' COMMENT '权限id集合',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='角色表';

-- ----------------------------
-- Records of y_admin_groups
-- ----------------------------
INSERT INTO `y_admin_groups` VALUES ('1', '管理员', '管理员角色', '1', '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,26,27,28,29,30,31,32,33,34,21,22,23,25,24,35,36,44,37,38,39,40,41,43,42,45,46,47,48,49,50,51,52,53,54');

-- ----------------------------
-- Table structure for y_admin_log_datas
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_log_datas`;
CREATE TABLE `y_admin_log_datas` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `log_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '日志id',
  `data` longtext NOT NULL COMMENT '日志内容',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态，保留字段',
  `create_time` int(10) unsigned NOT NULL DEFAULT '0',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0',
  `delete_time` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=464 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='后台用户操作日志数据表';

-- ----------------------------
-- Records of y_admin_log_datas
-- ----------------------------
INSERT INTO `y_admin_log_datas` VALUES ('1', '1', 'e77b120azqfpNtbYDKiqxuESfe9P3rnqEeg+0ZIRHnm+R/Ua8GujXjG2EgmKTi8p1EZldmSvRoU841ngmZ5zcFniyrhlLIPJcl3500ystuaURGOOZUQZnqZjCqzU7zkWRg8Z+KdEyo8fyfFrhzIJq1rYR6qpSKkBgmi46VaeLE7Dja63ESwpiA4C/jMIqyLgRuujVT35VY6kpaR4P8A1eNrvoYa7UN5ldRYTGWC3ZvZKwdvCMafUHMuUeF3sQUdoWP1M8tmYKt7F+cT9+Sakwo1fwHhG2KGgcw3s8zREwdLvq/cP1FAmjRFyKvu13LAebnztx5lfrA06YYlDpw5Uq960ahIfWH4BKK0B1ag6ry60jBisgHKtadXS7WZoHRVB+W09QTT8zyAYRwYu71O9kUcMo67Mb8xG8aro2COlpOV22eA6xUc6Zcm1GHhyYcCFtouoeRxYuPWL', '1', '1547108503', '1547108503', null);
INSERT INTO `y_admin_log_datas` VALUES ('2', '2', '46e663f8N67gqgaKg+scv1Y1RJ3WesR2NY9CUrk8w5lKaWuDzKmPpHzA/z5AjpEStKV5BzKxHs9lqWp5hQ3NFFa8/2mvFZFeKX2KLrfUisn3fcpU2+umb3HasdGXv833/CxvSJqj9g3sUomazUJoymdHqAD53+e/3yh6Ia7+J1Pi8fwZCET8i9aH7HZ7uccMF20hTJyX7w8q3KCMPJhLX/bY+5An4fUMINzLyYaaesIs1tQXFNatzOvFJ9uJUB20gjzedVPs8kbhSxcc8i83MuAyYJemPl/NdxtbNL14QB5zd+0yLcad83yIgFdkmBoR0m0trIKC7ODf8gTP0V5+5Hb8g6xfU1JwP2AnlEuDjFKGnknEzBPWEc6/xUltybGOcdTpJfb0jDhE', '1', '1547109433', '1547109433', null);
INSERT INTO `y_admin_log_datas` VALUES ('3', '3', 'cee8383fW/p1KhEEy06KyHFDSAHHW6EwCC40FIhdzd9dDr8N0gwGXHuwwn4PXN0lBxE4N6Vds6xmCrOawZOwsblvpr4p1ZmHkCQQ7QK7AVJ19cw1hFVugPQGaDpaviKUqfmNnjRHK8y0qeydNL68TR2pM9dOSHzk8PNCRCf3mrttHf8AEaZDM6q6x9UpTO506sL7nI3C08Z3jV/lQsc8kMxLgjYfEFIjCgOeXq7mc5ZvGXaftbN0Ly1KYorxciHki5QqA8IKpzfJBmPMAGkbzEz41n1Ua/f/hBeqPD7uu870XKk3KPoXyyP/vCwtNyUvYlXF+9qsSSYVY7VhFOhIuai6zIqUme9CE9qUxxulU3CgfirhOrknlfu8Xh2/NNdlcXo2yv8dRw', '1', '1547109441', '1547109441', null);
INSERT INTO `y_admin_log_datas` VALUES ('4', '4', 'e995556a2rpF1S2dPVTmzUYUUZdPzqtYwmZZbmek2lq4sx4/LOw7b1Ycp0f195tpEi2u5RidziSeUS3YpfYEPnRMt52v/LDqoZEL4M9ZFV+Rai2W17I6gWLAyCX2sf4OJi4VrY2w9V90BPFtqcFNZlmSnQG1BEPltPr0fnH8Lc3csXeBIJtDFd5QIJW+c9TsioSAKlIcxZqL1zjQVn8HephrNxfVyMoL/YK31J/ENzSIrYYJHnph+Ry1mWEAIa6Ei6e0uFDMmSYnTm23ZO/3OqRyPmrCYeAZtuPp5Qh8DyQwH/wbfIMHIO4Rxq8GtZzMytBnhQY39o43d1+gcnjbz6TH/cw+edZLNBmGixtN3sxRe08RVpqCKj7QLpk1z8e7nvgxlQUkjw', '1', '1547109449', '1547109449', null);
INSERT INTO `y_admin_log_datas` VALUES ('5', '5', '8c7e4c44W05ORzrFZqFbaPOTRtfMI+PS8W1HyjtoRvGvouE8XiC+4mt9THM+6/j/LQmQnQnrkq/V0EYsf+fSppkCtzpuunYOfeIVh550NGDAt+hQKJyqteCfT6fMIsJ0zHREY21HoW+K8QmNH6YZrwjFwP/0xxbgOMD+MaUHRIJC8g5Yr1T8f2/G3Jxg3UbD7lr9jFE3ZWt/9GT2lsOLBSMK5TNCYHb6TtBiY8c4e0rxL1CWj0xZaadVQKmXsqqQ+MZuUX3dES8kr/2LRPp4gKxm4o+DIlXcQvFiNaCXmFb3SgHw1kKned3LfgSKV0q0+MIw6mkXojzdIBWkkBOMTzBz8ZLmL3c4sEp6sw1NI8yOYzMu5oT2tDcTN2IoCMEyQR6pvmO6STT7K/ye10NrJOTwneBXPYuMpMN3ksGmjnjIXn6ATOC68rn3hEYZA3vB89lqtmbjx0JD', '1', '1548647539', '1548647539', null);
INSERT INTO `y_admin_log_datas` VALUES ('6', '6', 'a9090085IhXylJ+M1bC6G7dreZKhNHe1S5+kVu94gEI98e0H/oHD7wuHCMYQ9n56qYnlxK5aWbK0clIxuKtUlvWMaXL+JEC7muo7vdjoGhBfV+CcHfYHJVfpCp3FdMJhCCGs5Gqw3g1gTUG5ejHwov4PF6wmu3/GI0suu1AeeOd5Fou12/w0GSzk25PQJzQ+ed7dkzVwwqXCrEpuOWqr+W98FvIgK/j3gsvVhoFKIvorV86xYigaAuRSNTD78ZiimU5W4m/a3tdzhU7M9ZF9GdPy77ehMhICkH2tGYzsmM+oZhCr5Z/cRMCp3jTtqTZ33syl8o8peZRRprlU7MDmDXikpML/dSL3yxUV4kb97G7VKxtCja7qWRa0YrMahdc', '1', '1548647583', '1548647583', null);
INSERT INTO `y_admin_log_datas` VALUES ('7', '7', '193ebbb8lwyIC6M9XvtxoU3h2e/buWnGXZON3tq1wFNDEEOZsVYyWu8SEKzO/pLjRw+O/WNai3o4AFCfRI66bpZQNd2kgd1Pq27Kou1NYWgE5yz00Cl4n+jTeaQb7jWvM1OhIRlTISU1+/ds0TyAliqy52ewdeZsqn3NeskCx1mKlECNO843WFnj8xlYZBo7XJNezE3lbaMJ2lC0/6c8/5bWIlsfTgjUh0NeA6fD8EWfNhRcMsPS06esIVrrFa7Mg0mIFEG4ABpTajuqHjfgY6nRJmHuh+5KWgsukZZ1mVe0E2kJA6CZZDJQVER/qE8p97+Z+NosSWTmVeLio9jfl2JzJlVCvtUb/V7IIgQqgEUfc97y8G7eKvSOTSMjvlOQGIGLwwFyVwPjzS6yPuM7Z2u5XnH9', '1', '1548647641', '1548647641', null);
INSERT INTO `y_admin_log_datas` VALUES ('8', '8', '6e0a941bz/AdzzYsCFWtfHgkeW6xtpv8t8kZO3tuv1J89mcciIo1EXgrYIuRrR/oiB2rj6NTYTq1RSP2lnasJoc9T16cnJWTWgbTe4MPA7o8ei2oBiQm2oTxEje8wVz0qnz5vBRno9FBXfgkKfqwC95Ak/nu9pDKM46yUrg+9LEHd/Df2ALY476tI47Oq9bmFVeXpQv+r0nnsFp7BPxbvsF7QNboJFIIS2DRCpi/ImpQUaG7j3+ULsW2/uabk9/N/YA2iEsLN7geR99fv3675bDx2WOv71nBjtv9ml2APKErYqiVSmTXHHtogLhLZlx6XXnVUaJXjoEyOHqnplmtf4M4326Ab1sf3YPFFDY6+oIWJNGoTtaqmGL7rbKHgdGgNj1Z50LLm4/CII6Pn6IOmvSa/Fi2QiLIWqrD63der83/OPiHdT1iY4eMcadM0mBJfUCG0CZ0va4w', '1', '1550544655', '1550544655', null);
INSERT INTO `y_admin_log_datas` VALUES ('9', '9', '54589cabablUyjaJ9RmrUcAe9LepSYx93t4LBNZYhHSj2bgOLXHTBewhWjhw19CVM/6u2jUNREfyO5G/FVdOxoAGbDGls0fg+g2DKHSw1C9P64Z2MJ7C3zLS0vgHkfbK03qS9lXS1F0I8QGXOk6NmBUpGJ49lfY40UkSewTWMPEaKU8o2KyOstaoJQb7kR67KF1X8WAW4Uu9RoC3lw15APQPdEZo49gsBUL/wJU1vAdlStP0tN6HJSmqOa9z1o48OBkDcPfVR7cjLqDgyf4HnJ7rAGnFln4vDkosbz0A5H7I16PBJq83iVrH1v+WaZ8JMtWctvqwrz7hwMwBMHqx3jyEnv/bSnH2bXWaSWi29sfQ99BmgElQO1AIEFGTppk7XWiq+pVZeqd7M5snUIE', '1', '1550556849', '1550556849', null);
INSERT INTO `y_admin_log_datas` VALUES ('10', '10', '0afe568dV4kF39yrrTdKH4Ys/bY3ASSrHxWMW/7RUifo8SZQ7mp1R9A8MYXJencnSNpJ1G6LwqO3fjgPgS+KL8aLFw2oEdkK9+l5NRcztOFJKJkz3F/mdm2GQtbsLrezcMnD/qVT5NoGQSjtKOE7NItIcmcQXOAYazlCSuv9AqpDxA+lYcI5eMrKoSevD6SGz2oTHuLf0TH2NKTDCVBo1PJFcH4mKTzyjdUN0o4Sw+AMxymDmJQEsaH8MY3gyk4n50SWWyDx6nZmTf51ch+slwYtgDziEOuEL4/HqWtvqhEn8zctgab5cPRGXtxld5DzES8iTvQcohvLnr1BATguxjvWIc3t/CWGaRILoozCkkO6+k0M8c8j0XahRz5AWiVdNUievX9bDmDhCF2L4aIYOrbxk+AQYN3DHuYTMn2PP4AJQJ3lKtE', '1', '1550556974', '1550556974', null);
INSERT INTO `y_admin_log_datas` VALUES ('11', '11', '9347ca5bJBl8sUwa/BojaosJRRaHXqUYBsX2nM50Lu0Zv0BaT+VjqE3aoxGcRsOy+iBbfrOQ/KFqVLW3IWu4Yj0Ao9BUWolqIPeFFf0TS4aWOJAskiDPdpxwJ/uzoEc1Ezh+Uhq9xeLzP6nHfVUVlLv9u63SZIllFNOFRPPyZuW4D2puTf1q0dCcJXmqH35QA9/xoy93PI45fkTh4jZ2RVWxgWDqvLI5vvzAqrLTLH9v1MKijPv1MoRicDHfCZ/M0vThueLcq98RR12Zhoso5YT6cXgbsNBd/hgG1rIz72guvhrhpUNQe0NaqLCqv2IfIOVGWNWL0ZqgqAtLsncVqAO9bT468/kZIgVhXgauZZybndlSi8X3P8KGVGvW4HBxE1FZuI5tW7aEAPaPCU3dBOwSZNffECVJ3KDQc8SdOwAlrAlRtycb', '1', '1550557044', '1550557044', null);
INSERT INTO `y_admin_log_datas` VALUES ('12', '12', '9051a83eXeRMaT9gNkV2MNj4T0vTkYd6+zWcRxfquPyXEDIgTpr4PyByZ9Oa85MF6YEZTLDPVc90S1fZccZbApvF5VJnsY541zIyfcUDBESXrWte5M57iNscl5I+HZ4V7g6R1/RAmukrNZ0VqbxoKZYd/ru63nzyyNh/UhIcnj2WzZamvByJQrEFQp7/L66j2lGAruNajKmRHgM+mXqwUpJt1t3gde8Xav2fRyPkLg1RyPWzLJ3uzsfxh97+oZKl4aVvOPccqY2llXpuP1W/dhc3Zt4bq9J+KBxthol0hKhG4h6fb4Lx8F55whHbjgavTTPp46xJIDk3H9dPCZBIfGloFkCCvy/lDiJvuzP47/SB75RbLhjp+ap/7p3mN5beQbBs0qZwU+1QZChJvBi9uabeUTG6wxWQNWAU6i5XQu5INQ2JKwI8rJghMKnFkVtFsuQn', '1', '1550558174', '1550558174', null);
INSERT INTO `y_admin_log_datas` VALUES ('13', '13', '830c4760XGzkc4jIsH9NQ55y7y8QpYRjsicNcvS2a/bSjRJ+bquVBrkYB46KZ6+KqSDo+KIUFZOm+enCaOBYp3qhR2Q1NhBFuROW44by0X3n/W4rbS1RrxS3wzttNMWFy4MWLXV/GQkmftrrJ7vuud0PC41uSDuKw+RU8GS+JGgHHTGRUttS5IMUjMHZK0OmhOAK1ifvmzi4HpWX48ZnpmRmd3RQRzqbsPFlI6T6EO2jMMO815ZJPum5MjGE768+su+ULZHA/AfVWiGdd2hWgFLhKc9nML6o8iOdg+PYsGgUjl5I27OXhH/B0fnHVlgaaY8bzX+WJ3k0C4V+Zzfgf/HbKInegAAaxA/MyRO0i/ot5K9AEyq6fetLoqZ3Pwbzi9UP25v7kNnUxegVPKSxEFuvOiJG01AnU8bV7XLKnTVgLPq7b3Q', '1', '1550560717', '1550560717', null);
INSERT INTO `y_admin_log_datas` VALUES ('14', '14', 'd9c3a6d0EpKbh9Fj2Ymqw0QejHPuf8eJuahpUvFFRQR/H39hFvCzS/qmITWCJjRDjUKam5Xv+6robqTgIgSMIkYwAkDW84h9Urfkpm3H3vX/dmnfxjDyi9kcqRUvyrXFyjlX0+kVQ2IThVsSQo4Gt+V59zYCMksZgJ81WGSibksRcOuycIkCNZOHOCmCM9ZIEG4nzwpY6Rcd9BdvPyATYx6Pbs6748P3PfJR5w1/nJOdLVg6+CiukQf4AH36Dd9ZLFFiFO9/CmTpMcnp0SxHXhmE0YyTiMxiI2F0TqQkyUUHhfbbasg4YksxdjgZzyDDAAnRJXzw9Oxln5wPPCiutaorT/i1Wpcyp79ySEfR2F9mtLfYxI5MQ4ZkY5enA2Cjo9t9rQBw6BMhj+zMnprYFEkpeQI60aHMq1QXIi5HC/xA5A2+', '1', '1550562176', '1550562176', null);
INSERT INTO `y_admin_log_datas` VALUES ('15', '15', 'c2510c6bekW6MOblKo5D2365GW0c3dNlNo5x3UG49Rvcvyta/PR6apI2qp5RuRqKqpJqN9P5vjik/V6nwL3HDGG/T4ubkAHj0KsSIFuAWMDRcr074je6Mc3PeRajlG4XkUoV6NAktCcCXwI71tQ+6IaOjBgvgTdFfCVqcUV1yFNy8E+C1uL82oB77dTlCe6u+isqB7utkhyXw2gllnZvK4bK1EqLgeskqy/fZ6PweKSOc11G0tUqX6w5P4vk+LrKAR10rxsHwK6JILPHs8n1/D8uOsyF84yRh+Kw7xkcVqH6+fc+JUHqHRiNhJv3rNsoh/ma6ogvE1nV+R969tBmEeS9gHTLmAkDcktmarMqg6FYN1dOYJLdQp0C7HmXItkW4zeCi7Ku274mqHRO0AyT+Helvwu9klxEJQHrz7dNUBotI0xexA', '1', '1550562209', '1550562209', null);
INSERT INTO `y_admin_log_datas` VALUES ('16', '16', '127b6a036ik6fyVZP+B2AlqRHckm8Ax0XEEGkgtmdigOnAaOgMIETa3tMoF3IdqZqPwz33REjo2DsYd9mnSnTcexe6/8dowYA7WrP76KK75TqN9iafGUFuCLiV2LWhAhKVQBI68nIFdqgweRokeyTMTOr+0arMAxX6bS9n6mv0K0LSQxTnAH8IdQMi24Gbn2LoRHJczql50sEuSiPoNOhPbs3Agky8OjRrY37420tawt+76S9vj7T3jBuVR1P8w5pZEoSRy8nK8RB6rEe/gPFC4Q9f1NetUachYsYX2fULIwClV5RT8fmN5qoDa8SKaqJU+iyDejKK/A6zPguiCEWohuCRwvyliX0daUO4ANtNlAar9pbfUzxsIhiN0VLdoWkd8d0c7SMmeF9cjk/A1djpy6l6jstqBgMm6KJUn+QPDOVhv8vtdTDtv0mxZJ61X2SgBcA3kl91g', '1', '1550562229', '1550562229', null);
INSERT INTO `y_admin_log_datas` VALUES ('17', '17', '7638cb45jFoUxwGbdx6uM42OudsfT9bqQoJRRuVRD97+p6Us+dNAW0Unu+xbWsgLyFXM/CMXGU8Ar0M3jUd7rgtanLICc/asStueP1VhkPuz6smm2E6eOm0mjhBMF5GplPo+QLuIFT8uIbPEMkOEB7hM2spLAsHfaOUVzNEkvBRtCjiYb2W2spaR5Ph2kWW8jOIoAdhXjHS1cWfKevOC2KHB8FuqTc3p5fQD2llLwMqijAhuy7zr9W7FgvGNfZsaFvV99E54nGLYCc+4hThvqdeEiCQ8qJ+2EY9GEHlLS2kaEyDQ/Z63KN5I1xffW2geBBSuOWeWtgpoVAC8GxjO2jrGMHXXmfWn/Y/AJMFTFJkb6TOWQxsN279WIIIL9nXq7I0UKdGJoYZABPwAc1Zpv9t52j7w8MSzVIluHeY81PahCt2Gu65ELSid+d9YkZlYPcj3IyYqUg', '1', '1550562241', '1550562241', null);
INSERT INTO `y_admin_log_datas` VALUES ('18', '18', 'faa4542b0vBDgYYLGUjLneX6V08Of+f0thX/rnR1BjUyE6O8rAWT1mxjsC7WYLd8c2Hb5+JrZR6Dmgpk+msnrM9zvOH07DtCS0+PuwpQ/9rnRC8d2TdM5ffZ6JoGTTfJeMaAoD6rto6vIJ9mQ3vt8O7kdRhBtEsHtFO/YSSUrLHUzmUV/YmXzrt4KGkfAra5ygzl/keg+6L7ToXvg5Ns348r2n5e6YLVb0kN/stN60vA9sDp4Vi7y/25i5JMfloihcTwTbXe0bbVuTiUeR901jyLMBrIM89yeFZ5xpVWPCesQUQnJHrnYvYYHjqIyzDDa1eC08dJtDIePCG73+rk6t1UUZ8+gctsc8Llr/e7k7fBtRI5EMF/U0AKIEWFoSWvU+WncOL0HbtVf4qKCN+alUqFA7S3XSqQn3dKXEyZKziSWJcm1DMT', '1', '1550562292', '1550562292', null);
INSERT INTO `y_admin_log_datas` VALUES ('19', '19', '00d8d267KPn8mK+1/4JavMxdOa7P0KMaK61UMoz0s5ExrIFF0pQrV+Mmbvdo4Xmd7af0RGg8rdDnkkWlDMUegwsBOs8bXLnSK0vBkSy44edYAWuQjicHmPY5L/Ri8T78Ow3FDPILd2fFPRJ/Y8Yyvz8xAt02ddLZ7T9yZCQZuOPiBDHJkXFi/e9N/qT3OXJRuDtsmd7OwxJSird+B9Us+CVm6xzFbebi4nLOKdotq3zed3aQCl3/P/GnjO38DQAOOvLiIHCVkO4f2N6wNZ0XxT7M4HcZaYov+3oMAhJbShZuGCzb3DJLoqg3H1iE7O/Adc8qlN+kNJ5q9zp5aki2syxnym0j07T/guZ5g7YFrfDh13ISKobqYhKOMIpHFvnyX62frFAfOSZ944dUl0V8YFaOZjDV57s8Vt6crYsSWsmNQA8T2MR6ik7IA1G66dlikXvEoPM0cA', '1', '1550562308', '1550562308', null);
INSERT INTO `y_admin_log_datas` VALUES ('20', '20', '292ebfe6QqQ4XGYZldI9Vwfwu/aAJJJ6HVUrauplP2mfjKA3lHMdEugu4e0Lc1GYy2zH0xzKrW9kfuS5UQmKW0UYbdF37t3oC73ziku4YF4FnryWKfpolOr/91QKAVFFFh7/HS8q8kQlVkvMBkIozzNhHwOJ+qLmBmrwdsEm/mj10BF3Vkunhe7k8RtGGUVNLL/ulr+1hIv8ZrPDyFFv9sU/dNf78ACPyyaqC/YRdaE8j9qZBPfi8Uz9muGoU2BaWQAbQvRVMMrcyDQ//dz17D0DF9k4hVSQy9ryARvaJVnMmq/K/SSWRAqx4xqeaa4LgAqmMnBnHYtOerRJ0ZBJc7sJ7jamkgqPE+suTYIUgrbfkOpeYyhwu58Fq0t9+UGiLKJcGhxXrfcnox1/xuxlvnceuyG7mu1d6xk74NuhhCValg', '1', '1550564589', '1550564589', null);
INSERT INTO `y_admin_log_datas` VALUES ('21', '21', '8202678aUiHfxpfkaKYJeD4RTo652n/VSH24TeppcW18FKgTJorWi/dZb3IYMuDo+kNS7GC89m5c6K7oXJYgojjgbyxxUDYQAtcwphNlboCSloAJ1hWCyousmnIQOe1lUpnfqP86WuDVa3tL61IALABcpfTp0uiUVL+YtB7BFyXpgx+3G5KczJ+166/Jt8eAAHfkUV9YWOwOKgdpYKiNpZNRGSwRmw3xfk0dyL9TkTJ0aBVD+P4pm6f4w/onoGGG5rAfOGOD0ccKtIHBTnFYP5mwL4oEF7BMNmJouG18SYNKjUFnedFaxi8O4453XFo8mh+YUhn1Y3ZH/4M0sGc1+MLaAmp3ysQ6BKU3AYXLX670xiZdDNqSo3NJfHOhC5E3+1LC7KmFXmALl+j6Tm5BvX11IRYqPHjW2EnhY8QtsMFirvcW/1fbiTTmHrWrR6X56Lpf5+SzAXdc', '1', '1550626674', '1550626674', null);
INSERT INTO `y_admin_log_datas` VALUES ('22', '22', '95fe8c7afJ4DcEtZw40yFvJvZu9/ujZUl7NAY/Soy0qRqiVT6vdmzdZDqqJyke1FZrwoGjG/L4lHQxew2SqiJux4c3+gAtxH1igLcRURLRPuADMNEa06iXyEuPWQFYPn7zOvzCSwIfdZgOODFlrccecGhcQSSLona2dRHW9vX2HCswrydEArRDvyWvDlQrMNuDJrUDTlBnb4ZU/TOQytQ+Ob4TkT31pHD4VhN70hLGPL5B6L1Yqhy1d8ATr1KrZwJ0prtR2b7nYkJZRZYVLyzWFYVBGzYUdl2s7GrCowGnpo3yB5rBAHYf+MuRstCtz6Z5YBqasmWaX+tWFZQ/s', '1', '1550626999', '1550626999', null);
INSERT INTO `y_admin_log_datas` VALUES ('23', '23', '16e67570JPfudt84SO8OPdJ8Yhr9pJE0bANxrvT8gTnJSk9KqPJ4C947VbTgSp4j2+HJJF28sZuGyWf/YLLgDOy+cp8ddNmzjc0bAcr0volwz1rzMAheAG/TVB7wpPtqAnYrJGpo2ti1SXKkVcEaHLUCHug+MuU+1yMcp/papa1IA6dYLUx2i+I4ApUftxGtKwOHhmYlOErDJV/cy7dgOg7XkNaaqKmENl73vkMXNCHraEW3FareCVCityijAebLL6Ke5fl9Y0RhN0X78lkzDYOLVHh1FZR+asN40uTWX+qe7G/WqYjOjyhhIJXl4tYplfZXUZ3dBp4YB90Xz1w', '1', '1550626999', '1550626999', null);
INSERT INTO `y_admin_log_datas` VALUES ('24', '24', 'b6d332f8ZVpgRpIaE89NGJSNLWzb8H7+WZF7TuOVF537nXWlVJzGFIGPHKfOMoEI3l3mfGlh0iW9FQ5ITFzPcd1yeUa5enDz0Wd1I7XG6bgqlwLZe+s1C+8SgPFekykiFKweUeXqA2xkhtl/mQUoR9qQ3mqQVuT0Qc3fOazzjsf3e8rV7NSiFNFL7vuiGIWRE+/iXAMNuzK+/IpAoAtBY2JXpYJ6ljs57VVdRDRmohazejoImxJX/SzXW76av/bMMi04p4NEq92Eu6v1+mvHvuXfhmsSbpSIyvkMuWvPApsC/zcZPWPaYjn4n55k4GLdahLRf7m/kKQ6sXc7XY9xlIIX6mpQbXcrXUzqjNKanr7d', '1', '1550627065', '1550627065', null);
INSERT INTO `y_admin_log_datas` VALUES ('25', '25', '031d7f40YICGeAkitgV0r3f+ez8y2Lh3+RgK+Wiqz0QbA5ehp9K0nVAFYuz6jigLh7V2i424NFhTH1L1xmnArBSKo7DC54Qg81rESQqQ2m7lDo2Qmfh72FymbPFbkEKJaL7NuFDr8yMTK0Jp5lxQYqjUecpqOI5WFz3WelKlVHQYL3l/y5F7jGfabAeqq9HYX60eUFrnCjwhVDd1djClQA/1kFfut5x6Ivuw3jcSWAkxskoJ9tIxwUM977HUkehv83U2HIBekOOpoME8pjVmFm/a+wXISS6jzbW+2JAvq3Ar5HV0Bc/KctcTbG4NiJVa5QijSqfOzUjfAL7ojbG7rjJ6bayC3taIaQt4YJZ8duhZ', '1', '1550627065', '1550627065', null);
INSERT INTO `y_admin_log_datas` VALUES ('26', '26', '9c9cc36aTfDGcKJvQTNOHsJa+dSvZ+/mD+0reN53JJclFb9g2Nn+/RuFG8MIUPnuba13b2QYBerdhnPMxMAU7TTUGiENQ1qOqKCG/GZhEFsIjsUb+w8oN+s7EAEbY86WXNomZBcjs2sDSSnEBE7lxU8xIulU6ZqjApCltDFryAhXsUcSJzRMrfAheSuPPe1QsCSNSlPcbpQf/EWXXU08BOXh15YFKaP5rHsBT+euLS3sXV/1D2Z8DlC0uHXDN4D5ia9TrRY5obAUYAoTa6P4ZrodqU0XBWq5eEm2dfe8wcNwU5frk9hgGc6IUV1EyDwK9faUSFcus1sHskM+df6kfVyfqqPacgtI3qnHpg', '1', '1550631950', '1550631950', null);
INSERT INTO `y_admin_log_datas` VALUES ('27', '27', 'c3d6d39bLQ4g4xGzOUZ160ar4PRcTCbQPAMpkpYDCKbZQzGfL60bS56+0VqeP4Y4wz4jIGYkOS+p0oAwvNRwiYtnlsI0IHBDD2tyfqZO8dhPzHIUaw3qzHULRhSwqEBAVQSMEi3etrc9b7tTi6ku/fxPwbphM5GH3/qBcit2EhVaRUmC8yWc5Z84FDQOo71V9dq+SaiuFDbwcq1k1WQGbbOipvbnUN/4FTX/OceHpZqEqYZ45rqdzm4ehezPDzjcQwce+pl5qZfrDlA34/ktELhlRgbJx6g0F5p6iXYl39VU4aKZaWBL1GwBSGJdRaSuJTbPOO6gsJRuS0OvxeqL8gDdfYC7dr9LMtm6rg', '1', '1550631950', '1550631950', null);
INSERT INTO `y_admin_log_datas` VALUES ('28', '28', 'ea4b5408QU/iXRhbGkGQxlMIJFhSfmulEarTsW5vrXweQYnniVncLeVc1ulIsGRIa3nWd0Qew31UcpuX3BE+zKniZchnX8KD3rzxxwO6ngUihQXxsppvM0o/TcDwBH9O8Ktd/gw8SXIHc/oefQmFTTTlGeyO13H+Pd5Y9aKQltyLc2H6gRtNEysdhLzEO2ePfvNLOTE6TPvIhDCZyM/lLMpKjCWoRzsM6HvNjoChwn6SU/IvKPGag65/tsxnjJvX95QpTAS1KAlJdkSigRgmsPCZoV8iGVyM/scqcCETXsj3LdzfyD6j7BmFi5svFhbb2vdJ2xpXFVBUd/c', '1', '1550632021', '1550632021', null);
INSERT INTO `y_admin_log_datas` VALUES ('29', '29', '4fb9e901RsO4GfJDsyje6wvzertWvC8Y35pWMadYGkFc01LqTpPXmQC1rikjfMMu7SpJsqlG6U8O7r6snX4KMXXuL8ARK10Y5T2Q5ZZPFFtMPmxXnhSU2U2VdR2QkpEFEFcge6FWAtOXtFCkM8XJ+9IGLrlgAmtgYomq30EGGHv6oh6tjKkulPtkbcX/b5sLM/dEy8oSdQumo+yc1kBimMSo05lkQLBt9onvGZQ6WXSzYfZrdC9UXXAW8NivY1aSB8wa/lTPb4QI2WMmyqVBPjHn5FHFX7tAqmRYZr6ww58t5EM7zZeNyFBCPfqZHXRVdijTvcVBBeAo4og', '1', '1550632021', '1550632021', null);
INSERT INTO `y_admin_log_datas` VALUES ('30', '30', 'bf6645a9/21FL+5Q5t3yV3Sr5eeVnExpuXAASLkbjz5yuPzyszeAaUuMmlAZMEGWzdeD1GkaqzquT4bFAOTcXLUiyTVC2vSf+Jztm2fqzwrq8PuvQtyNZBHHD/rLrFBrpkXyAZtGN+urLDLG//Cp2gWHTOy6WWzovX71/T8XeqOCmrWsalfVQUk7F5RVgJv6Ym/I4wRyIhvoiR1WWIM6ExXcX3OT0eLE+ejmnrRrbZiKoZbOysVWh0xTRbnow7nl9gKpdc2EgIhBoCRAfFTnYaf5ZHUjyE/PIw7q06iJJTTZ9FxOkcgQOnz2frOBDIRqjKjNgjmsIVp00gYiDF5iQh7DvadcApiKMNclzmoBvQ', '1', '1550632684', '1550632684', null);
INSERT INTO `y_admin_log_datas` VALUES ('31', '31', '9ddd95d6f/0lmZIrmooMSw4g7RaS17QAQ6eOb01UDfUz/VqJ2Jdzu+s7C2PnXmAJLWFuUjsqXwH9Wp0NIjXn+0GxlNsVmGHJ1jwRKitJO+nBgSxt4ELGTXK6UBQgdYe/sltdiaIorDiiRWNBGrmepefSPqln0BjBtj4Qko6M3t3zD8L7/dc1EryZclbt7zwBn0Y+YrxCA1l8USpavWeGHvozmJA6sYrdRrAbFzmwBaLd9f16LvbfrqIX1aJL0USqjHr21gbzXTROyPS1nynb+XukyYmdUDCrEyU7OiChRsALmZ4CFxOX4Q9cuXv7AVn/+kvvuA0bm/FwxDuCbn/RsiauRzbGsQpt4B8zwM5q3g', '1', '1550632684', '1550632684', null);
INSERT INTO `y_admin_log_datas` VALUES ('32', '32', 'f6393807Bvd0O+jisF/2grezBcrRpxx/pDIAspzK1fPE8mBDrKnQiXKuUL7pll7QOohGZINZ4Fa15D/XQ9YEWt1eUDpi9wubDfWfoez9BzMgNxmOn5CZ1rC0pNpzuCIVMbNClPK/qbfoCtyL9JJ9KwdSOZgEoZ0dYn1GuhjgPTWecrojosHBNm2vWcxOC5rn23HQ6K2PAoD7DQJzHl/3PsoFIQ1cxkyUMxdBSDDFnqWtBD1+BXkzJ7Jo9glIwKfEUbR8z2pmp3lI7rlf169qj5e9SOfl12DMyDsRa6X43Qw56xSxfMrdc70fMa+v4wnDBCyy4hcfZkV7qwWo34x8D3BoRgV0RTD2s1g3ABrKFA', '1', '1550632715', '1550632715', null);
INSERT INTO `y_admin_log_datas` VALUES ('33', '33', 'df137be7+bb0WpjCmdN8ogGlDdhtm3OGMwMZqoQLk+3njzsZEPhcGe26NdHDesyU6031CvE3Ov8okF9QyDytk3IjbLi7jmzNzd5jexUai5dDvmoyS5UPW2TmsS61n9ssHVO1Fubd0hlqmROnhZ/YdsVTHr2jikzo+n+DWuD5p0HtmnqxEJ+2ixZDPg6lZMR89DJxJHFP4h4BF5h6hexVF8o35yfUgycVCaFxtRXPcWqqA2fIUnHYBH+ApOWUy32SdAUqRSZHGv3+OrJO58eVZ6fk/6vPIfO5LMepQcsbSfpoIa8NEuLSS9u3J+WF43YkyPBDh2kDymgtWf0FcvlKFIxrSpnrjN+8tN9oLc18Bw', '1', '1550632715', '1550632715', null);
INSERT INTO `y_admin_log_datas` VALUES ('34', '34', '799021c662C3oBVYFwQzNTSVp0nzPjBd6u6+pRP3pc9ZBy7X5koMh9ADp+MtCMScejCqp7wFF5IXtG7d6mvPTFiPfy4PVN0C/9JYS5mzIecXh3kBAR9PQ8emn4daTIErI8W7Ld1oZTLvUGE4UZt0mfmh+kNIeo4DZ1zbFUW51mUpY4nS1I2Kp5Kq2/0Ei6HacuHeNtueWOam0rFbA8Cq8HRn02G1DVAACGo4vi+JVy1TSltfKQU++GQUOV5boEIXu3l1ubIkEiLjk2n6v6Fz5s8S6m2s0k+Ga3NPbwk5epc8PAfmUvx5BVxwX5HZU+7H8WZgG6JHH/3X5+H19BKweyo/AZY', '1', '1550632778', '1550632778', null);
INSERT INTO `y_admin_log_datas` VALUES ('35', '35', 'd8d142f6c1NitoxMNCxKR20xEgUeZBFrXXDobvTWhrsahLRYDX1lbH25qPp25IZJXkf/VOG00hiwDke2EiIgzLCMpgiH2LbNmoaLaHR7xqYeGPZtfzqmGVDB6i2xFOZdRYbpGLtcEUmaEVhKj65FGVrflipf9PkpYUoi3qpAajEzdkGVX6vyeYBGYKxbAOZI6JcZ/t2u775T9r9u6z4HGT7jIhnVBMrNVLAks6Ys1b0MFXREcvNoHGnq45y7wXq+jm7wN1nal37N6rLtmH07dcxE34tERtbS4mFtKa1LQGCUtc2b9EoXH06MxHM8LBrG0VrBcng04oKaj66UCgApmdjRg9Q', '1', '1550632778', '1550632778', null);
INSERT INTO `y_admin_log_datas` VALUES ('36', '36', '112b4b05DPsk/hQkHBmeye05cKYrM+aicYu1ddlqzmx06Kdn1xSz5JU3QklNcPjZLwDnCl0H5VfeA4ndAmKbt2v9yXo4FCeCFt9L3XTLKn7fzWi6W9dLUDBdQGSk2xpxPsq+mV40YYuaiunIBZOEOTn7M30n9yrPQ7OAPK18f0T6kHnHqYq8JgCltA/ki/xL+Nj4YCW4GSScIu1GzUC4pUxzdkdWGmjA0LRuFT9ExB6JEaRpMfgNI1VbrRmQrLd3K69akFKorOr0wECy9kTbvTzRh6YWMDZd0j3mU0lKLjnocpVnOkPMEpBHLDGIN6ijatbPbdYbZUSsBYlcl50Ij9cbgl6kCg', '1', '1550632797', '1550632797', null);
INSERT INTO `y_admin_log_datas` VALUES ('37', '37', '60b6f69f9Lxx6MQBi/zgmNRmT0kfkyHbvJ+PzP1b4HuvrE7FUFCIO7JotgN2ZfA0gg6hfuD/A4RaEROG8nKRHpzJVvvGpH/qorQ8FFt4h8NOE6mwHmBhQmj2QtBDLSMUTzumCVjJen/RXISMsMqUiSNc7D4C1CvLx8bVjpZyepPywpWHzIxvwplQlFFMH750FOiSJ951PRDQVfvF80cFi0a5hkMdDclWNbYl2k8z1K6klHnMttJuoHqfzUctxRrCaX5REj9xs5NLss0b4n9eG8hEd1Uo3zOk2o5qcMELdIDfbVYvBOgmynH91k0w5laeNGptqjgPDCuzAp2vX/6DdW9ia6THsA', '1', '1550632797', '1550632797', null);
INSERT INTO `y_admin_log_datas` VALUES ('38', '38', '4165b4c1m1GL53mrw1bl/wCMPN6OYpnNnOQ8YjVPAETPJ75wjKWsXxtyJUJNt5hK4WpS+aoKzIvFUNxiWNk2/gGgFW2CEOFUFFXLoUSAqoCjw0Lp5vOjFQBtNQH2bSWJ4DsL2IJwlIbJTiHvkI0TR8ku8xMNb8cXRaE8fo4PTs1Y3Iu/BEr6ISt1K9hMukfFgmvrrP/IF762UhTib5kCpzqLyvj8dYkyR9crUfIqVpyWtH4Y+GvXcHrjIQLi3FQoBgOM9BP2AWpwj60FCwWmnAo84taAqsr5ucZMAK/WlH50ufIqePbMD4xUSppSycZqrX4dGKPr90qbH0ArdjHzMfQfJ+xfNyMT6IH0nWl6HsB2luxXHs3HI52uUYoDOb3Pcz5N', '1', '1550632811', '1550632811', null);
INSERT INTO `y_admin_log_datas` VALUES ('39', '39', '1f81eb7dVcBDOV4a6iHLPCsxCkPYE31UIHUvd1l1uWOghy+wyXvn0A0o+iaHyjeMgGo8JFFn/liFlBTOLmV+C4OCjPiRfEq/HCaNpOgp+T1HE3CGJ813rcra05ldwvp1zpz9i6/s4/OXVlW80MEnglYG0BfiipN0YVslZtXR0MpzFwp9yQJuVrzY4JRSxQT7tobIrK/eMv+O2eq3gY0UH1EcpGZhomwD4CwvE+isart0wQ0eoF02sfKheK2AETvXlt+VJTWAfmEMzb7AbWIrvgDg3CdiA2aa8XTeLn8rKxxvtEMfFZmDHzq02/A0l1zUG6TT60M+4Gxl2R9M9kxqV8xkDKxVYoi1i++EvZtUxfSzCxEwoPalJf43/H9DvacVw8kW', '1', '1550632811', '1550632811', null);
INSERT INTO `y_admin_log_datas` VALUES ('40', '40', 'c3c4a7124kihMjPmhcib5/5hSIOFPpfaV7mwJFuh/sPfgcU3pTeiEQzfk1xny3cNOJPOAbUQdAmnTqlZxhFUuqSctM1eRguuacVm2yCHLnaXkv2hG39jIypP0xgeFNgTFH0i+Fp4iG/e26Ls1TyqiUO5irhNZ1HOMOHhZObg4LqRdRN8gHpu94GFcGG167XHDzSiNzIAUILxkYPbwHDnzk47RyH8qXn+CIAme+k/H1rXg4aKoV6x8Fm0FtRGCpvxC6DZM7bdc3yF4JNwrbEYW9ZKoSohxEFsu8y1BoV4SB78gFfHB4DVhH+3zD00IVEb37fWaZwXxp3PxBNvATGjlRGtHankjDVdO0CvM55ydSG2rLRbCg', '1', '1550633053', '1550633053', null);
INSERT INTO `y_admin_log_datas` VALUES ('41', '41', 'a98e029cKE3wE4w7MLBb2a6EEURuN7Litag69oPALmbcnj0hU0MOxxkstxzUu0YuYyibCKNf2eFGx7/qBvYWvXBSKWQaOMHHm4TWjUvLachCrrroYmn/IhYg+IIhB3A6ERfL7WKn2kBCsJNyfxMZ6OUUojdpAFGGBWgjqK7ORculIOjNXBKKUtKLFM1qUku0MuMK++pknO4UuMh9AkWgaqhpUbHJ7KC1yh8QlEYUdL012RfQswR7+E1XJK0+JG5iz80gi28eTmoiXP9qeAyBVovmGJMTSVE1F8rBJoMD51XrwbxIl4j/QRjBuSvRf7E72h75TiIwIUs5IJdwd4iqRa1b9fHVTV4geJEiURvLS2VRommTbA', '1', '1550633053', '1550633053', null);
INSERT INTO `y_admin_log_datas` VALUES ('42', '42', '94376761RW7OjsEM3XbDrU4lpZpOKw0hIs8t+3BhQ2/oq+wDA7QbleaQFXuGg7kO3sFScPFqhKMbNt45AzVAqf4sO1fi8nfu+Iv0WwQ6FYyBFm+KMxbtlsdaRQcQ4u4h8+2FFQzLeQMtTwtWLKEXO1tH9RXKVMo1xxODZSieETes1GBHqaSuOCFr/6TOvcaVlNZ6Mg0PCnaoJqRNXgRccmkFUD3mrRpFjd3hBJBX7L9JRGh/VFysSr+SoDiKTv1QdHeSbS8CxsoImJMb0ENKseYmuOu3x2Dc3MsoGJ4vxPMxqESeQ+MdLfn1la1ZNMcejVUk0AgZc3wmXudXX9OYDF5kBYa95uLZ2g41j3VHWyWezZfiGS3hvTbj86ImGNhE3lcwW4HMnY0sOr9bGoeEgLRloaUDmj2qgE+nKfx1IwWvxeelsyT9Q3oCRjV7ELuDA64U8D3J1Zcg', '1', '1550633065', '1550633065', null);
INSERT INTO `y_admin_log_datas` VALUES ('43', '43', 'abe02312fYETe+bKFFczM8aPbhhnQU9CI/67DeWbuu8lPobv6clehLn+53cS952Iakmg4x+cEw', '1', '1550633105', '1550633105', null);
INSERT INTO `y_admin_log_datas` VALUES ('44', '44', 'c384ffb1dYINFwdUfiVCcuGpHjA6d6OWNw5oFzuV2r2VliauDx0RFB9cWlVMMNaUos2EjQiRZwShZFxhIPLzvVOSNRFaLil4kr+ljebgOzSHdNepdjiMh6by+G5hf6wkKiPro0mVCooEEpCNhP4MCPJ0ceCSX6eWCI+a0O5JpBFz/8pagVV3HukuP3GuvKhq/cCTamgeG5cy/FYFQ1FWLUkPGKDtWybdtGWNV80OxHzrcAD4ofYhIuTvH0wL5D7052CgFcigt5kVL8YEr98qtCwh5oo0Y3sa+2KYOCa6RnGIghLPag+Fb3Sb9fVAg+Le7kLVXoFZW+N7UhyseJYl5yhwup6KDBMzpCqflI4VxNyAeSrfCo9cHQ', '1', '1550633255', '1550633255', null);
INSERT INTO `y_admin_log_datas` VALUES ('45', '45', '55f3e00eo7px5d6PvkYIbYMaKeqtgN5sPcHDzINTWXdLySEhc7fug+CSRmy+gPK1jXzm/pnIMmd7Z7/gWLf4J2UE+1tn3/GWlom8DhYlQwoEa/+Ax4D4OVkmx/Cyt2BFwTycLsNuPetVj5vuDSb9JC2YLLnQy4KYowInYeWHUAfD2RDLziyMrWCqm/V1Sl5ov0F7zjH+1lHJyZJBCfYSjfwjbB5YPQIPRqRG0WyJ7uOSvGkhziECEb686ZsWBShk4dHZDfmq98YR5gYvIwcO/X67iH5IQRhR3V7D5HPN/agxmgR2oIqbLtV2zh2Y8dU8hbnRNs15uur5t48WFMUHnt2Sny2yFsDsTKg2C0MNV+6nm+fj4LbEYQ', '1', '1550633255', '1550633255', null);
INSERT INTO `y_admin_log_datas` VALUES ('46', '46', '8a111c8epblnGkAonlte1BKXFdbYrEb1xvbBXS8W5FwHeOMakZoM5odjVC95XDmLfHuBphaiYfrPq+4h3j0DaRbsryNLcVRglEbtIgKlfcpFCaNp6YDdlsDuEPUlVRPPiG35c3TCZTP3eG+2LASS6hN6OZ5qqF35102RB4j8c+krDhzNUCojNHqNFkgK7mEI2qHOOE62aR2MMiABG4mvNcNUp2vFk7VKEB1lKFm4S3NAHe7DgEPASD8c0r+P9ZUD9tXsUvfTb03Ps0IF0RZ5JYyjzVeCjI4CO0ZE3TKFNbWCevTaaH2mDMFDtPqigNZPRjInyZtLqt8kmoOjMsNvRv8nA3UQzmFdm/c3sy7vadrV9vX3ItjYb7Y7Rj0RXOUNXHgTrUtGIPL77orhejH/3VlyR39pt8LHDANlCyh4XqfFXcNu9LJQ4HLZ0wMm3onni2/wW1GGajbE', '1', '1550633300', '1550633300', null);
INSERT INTO `y_admin_log_datas` VALUES ('47', '47', 'bbed441csodBx4kR3aFPto1ZbVNqn5hilfnchE1/gxNvyJGrH0Bs1ePSJoaxgtFlekXskSG2/NPFpRVFAfKlbzuf8zMrXEqKjWfBqox6Xkqj9U2VEwCPS4zyg2COS/oh8whuWo1LU39Q4j9K+QK0dEcBYuTQ/lGP3F3DcqJucud4S5qyUQN7pnVLg9EMIOME/7Nfhw5yybpAkKHBNcxpHvjadUpfe+Zbv8iGyELqIHbeTW6aFhmkARY/GGKycYdZHw9uRcSUM1jYnpKaanw8F7S7TxKmx7oMojTrWe28vYpSIJ2RaEYiv2K47ZUbwQMyDykPkdzIezTNuw', '1', '1550633420', '1550633420', null);
INSERT INTO `y_admin_log_datas` VALUES ('48', '48', 'a464362bgQ0ndP5pnAVGC6qKNw+4yEChyJ13GKJCZGp9VLOuUT3QIDiV5Y123S8T74gKHgiFXqX/xXCA3ezzImtybGQWeNzTUvO6u8W+9HimeAM7/P4hf6IpL9gASsA/nPiianLtSxK6lm/iJNW1reBXIrFXmM73SNZACujoNKdMqB9oWEl/QFfhK75MJU95RFjFVvKu/uwx42ysgOTzO+aIN1Bpoco28jNe0yMvfxdDk8eA9pqWJFk/sbfWRLuAZYI6yxe2tlRFsKXIeUmuKL+/E717cO/pSCXVFYYd1uRa7hJI5zAJWbt6WmNfiMVtCAIKyiEoUqfWFA', '1', '1550633420', '1550633420', null);
INSERT INTO `y_admin_log_datas` VALUES ('49', '49', 'ac188a25YZ6eubg8VzsI1lwRuJ/4TDXpLQ64lXNdBcgfmO2XWMyvUH17JIBMKOdkQwKiJ76t/RtxXoHfLZH9EhRlHiFoYb3+RqHj2pgc9I0j81VhrcBKLrDGaLq4NIkvD0HuCdq8eCJHLI1N6+Fa8qVhNwtg1pItVPthpNI0Jhkw0jNCRX75AptlzlQJCA4y+78DAFj3BzB8TMd5J0cD2d2GEQ3hB3Jk2W6C5ThgS1zzouPVQYL9ckNL1GfZbGrxw24mywzrxFJM222rzGTDXIn3yllBHZVAv1nx+14YzrOh5k9R7umbsTLp3an3cPqml+suY5BtKNaCyA', '1', '1550633500', '1550633500', null);
INSERT INTO `y_admin_log_datas` VALUES ('50', '50', '84f26eeckxpUZmaxJLmyDfTBmVymJfSqRbNMcglz46SPYJlfPl8rB6bdb8I3SrMn++k1Zvl7kchFmEnrVaJVUJTGa+LSXcVUatXzr9RfI8JOSWqgN0hDY+AiFZtCfkCKi6McsOPfP+rY81I3uGlwxHrN79FYCfg0lAmcz8eYGhu8xSf6wavlJKK4j+zaG2ET7E2Fx1l2RhdnEfuWBC3vIa6nZkkNbA+HE47d6u45szppgAVtSGrrCTuy161BNxS6rkSoben5i717XKpJLUyKlcze5WnQpDhCtxNpW6MyeL/5buOHmf/o9zkkzYm+NFGvd2zr9WUme+jX/Q', '1', '1550633500', '1550633500', null);
INSERT INTO `y_admin_log_datas` VALUES ('51', '51', '96948953X3+Acbsv8EQos0JClhmzRnD5o7D2F1s8Jp90lGphs8Q/XDIrFVw8qnDs3SJqfp3sRJZ1I5V+2COTASVP4CwcBrMfSNbYtyugpV5QRoemFubP2I0T8zQsHMw438ALAHYWoRtrMrJcaw21jiHkfdKO+9JlZyJdbLjaE8eLjyoe5JrggYGu1Xh9bf51KnEblhPj8nm1/+NfZF0X8iH7UUjVmhCrDtHWaB7aQskL5+D9f07lZcjl9/06iOmA0MdXO+oG7pGpP3se8Zrq4tNL1ZNb3OqJGIEFHGewxNCNsAabm0tqF4Bh6l5TWGTH8dBskIcFgQZEDkoofwK5W++yaXs', '1', '1550633811', '1550633811', null);
INSERT INTO `y_admin_log_datas` VALUES ('52', '52', '73c36f87wf7qlYRFcW2hK2yz0VF0sLaHKXj+AgaKHHnHjornF6/b9OJlUg+DtPFDMG8yaWHdEOcVxy8YQB39rNxG/CbZ9sG2GjW2Bxlx/ASDkeAzVpLdk39v1jojfKeIFf49MR2Q9ssVucisYEMl2L+FD9TMFag7/dTyHW46WY1+5bVwu14VpEFVCu/nMz3XAC3aTnLbvDfFr7TNKGX5lkb1MWZx/oICtOj6X+cxOfG6BR5ScBowToE+oOtlp4C4jE6riPJ89Yk0SxjsfwnU+WDwtlJKr+t+VclLa1bL7S+jUUA0eLtGGuKmmuWQfB7NgWXD3NmVed50lBd8GofRNYakfwY', '1', '1550633811', '1550633811', null);
INSERT INTO `y_admin_log_datas` VALUES ('53', '53', '0c9c4c13u5+ChbIq/9pVH7/K3hNEQ/TV1YdWmUvNmSvs50tGGJ/FSApPrP0Ev8IY5Y2AEZw2DgvZkiihiSgF2apaCMppU3WVxn4sGzsebqUYVLDvMO+09J832aqMTVOsOkVomlPdOhcFn5fZT8Ptb20iZhbve6whZVkAiMtbkwaPNl2R0aPaZAcauan1Oes1AefiPHnoWKzY0R2XB2+MjqjIMhvdunbWwya5oMmI0B9yRI+bh1UfflVyQTDaS8QMseSO57Gk4YaIfAGnjuB5Grs5C9LTZw/+5kw9ka0lDhMQZLSRZQpWbiSIlmGOgOJ6ymkzZW0LUEIKPjFQCw', '1', '1550633923', '1550633923', null);
INSERT INTO `y_admin_log_datas` VALUES ('54', '54', 'c3c08a62nBKFcexquMkkriIJiNoNSuXF/4lrpXVPsnpgzVGzcqdsZ0x7sqb1Hn/Kdty+xbZXVRLJU1VlBmM8xyrn3qOvEwCOMVwpim6uRba2l89hUcVE2YRLm4dSUdrD7LGwjsCkIffc5BwBi1BFYIliwqa3dYmOO1BdSX75M83gLqsA4L9F2fuXW/8lPmWXNHxSLm8pc/f79UN7kJCcUiUt0I/BM2vAm8ENQwbLj/DlY8TBg2ll79Rk7dcw8+doV+15dN1zNhrSnkgMuMcDvBIaKJkKiWmkIUfHwksQT1bTvghxZevNMpRs+KiWs0Pj4AsQuwBMjxu35mwoLw', '1', '1550633924', '1550633924', null);
INSERT INTO `y_admin_log_datas` VALUES ('55', '55', '7cf0c2660wCynLKzCW2Wj9pNTvPKxCcXBcxPruTkqKhdibVNTQWBRCbdi4j6q7ZfC+8uf19XY4M', '1', '1550642964', '1550642964', null);
INSERT INTO `y_admin_log_datas` VALUES ('56', '56', '37812288WHiPaNS1lu/dWyHmafupo4RKCAu/G+6JBspjeI5XVmVy5ie5SeR0G3rEecHR9ZVkrlQ', '1', '1550642970', '1550642970', null);
INSERT INTO `y_admin_log_datas` VALUES ('57', '57', '6252bc41iGYZpGx4dgbLYo0zP9LwzSzaLvP79m53PbjIMmIe5sLq30GfyphhEX1Wd9gjyD6rQW4', '1', '1550642974', '1550642974', null);
INSERT INTO `y_admin_log_datas` VALUES ('58', '58', 'c0797a08f/GSjNA3FbjM8+6W6leXwfnrrW+MqNzB4j3n/84GAZxpVtpYYOYX2LOOBenyUQc7fiw', '1', '1550642979', '1550642979', null);
INSERT INTO `y_admin_log_datas` VALUES ('59', '59', '3b23dd78a7nLS4BImMpF3hQUE8yBkp8ceOmhziqhd6M0nZIorst6YXAgM2PNmHNK1PtF9D0eFA', '1', '1550642984', '1550642984', null);
INSERT INTO `y_admin_log_datas` VALUES ('60', '60', '62e50afewkoMemv98KzYGDXa+n6DMrDVBqZZyA4WUh9d/Rce43cWs7V9KD7938KDwnJ6E1PGtA', '1', '1550642988', '1550642988', null);
INSERT INTO `y_admin_log_datas` VALUES ('61', '61', 'd725d667c1bjRV33tRNL5X5MT9XPudxmIx8P+QtSd4QIc8p4+BMgM2Ltm2FdcAlD900lq2l2aA', '1', '1550642992', '1550642992', null);
INSERT INTO `y_admin_log_datas` VALUES ('62', '62', '0b01ecbblUAaqeQdWD/8toaHOe0WwCy15y9w+CCHFfTT6RCRTr7gFLmGcVJugj9AY9Vvs0pz3B0dLSxB9i3bQOWzvOpRddeKM02HdZJwdn8+avhM2cqSHqv3T+FsKV3y997i6qebg0KlFJH3BgKmD0fphr4FwuoKw9dhk3kgxN7ZokxgFrK5Vqxj0GghNhTLhF+PTpUERoQ1liZloDWOifDjrvNNslq1CTgWlleyOMgiKpQ1em1AAg5AulXTt+Wu7M0iHCb2T9/hvb0TuVXJp9xPvsz5MYPmeIegPSidUorMc0sjMgwk13GSXCDukFRguvLaB3zgIe9zOBOIa/pxMdELmO85NLV4n6Bsuj42NPtyxkg', '1', '1550647927', '1550647927', null);
INSERT INTO `y_admin_log_datas` VALUES ('63', '63', '430cb4b0b0nkjuynFpM8OIlJZKdOO8Z7pQZlOqjz3lH/G5fRc96fo+OmY+dE8XPGZcxsYEj/efNsDn8Nh2aSNbknROTdpC4AwTdsCBo1GAdQ/YsshfwfF6Hl88B5Yaf8w45kEqDlEgF7aPgsMPYjvN5xAWpSGMbZpzkkY62bsg3f/L5PC6MzdKLIpNWSwcQNlqimPx6QSWWVl8WKiiwgeyt9c9+FjC+gHmCnL2Ew2mPvxDYEF32O5g5eeY3ssT3iSxGfKMdmA1cro+ZVLEi/Z79DXjKTCQ1Syv9hBXb47A0VWoDCoSrjXolNvl05b3Sai35UbV4hVriRGouUU5bPtsNuPRDnOljhbPDFP6L83iDRGBw', '1', '1550647927', '1550647927', null);
INSERT INTO `y_admin_log_datas` VALUES ('64', '64', 'a6471183IT6Pp1lbnfivUtsDoP2fKUoub6ihl7lP1V4DEvRURCNOvMyLBliDzopIkL2w3sEzb0D00HFlV9L8fW+ShSGKU5mKzmAyABbKZ0w4m7oQXo7Hrr/OD/a0iSpKl4VHdCeoZFCXW/KuaMyxEGMMYIKlHcZlihXgrftIVqv4/V+YlaXJPzXsUyavZJOuBRmPQRfSVTeLxeJLONa4nF8y3c5oTBp4RLTvLFoWghCWyn55GyqHtabRrr1cAxds9/LYPGh2Wgv1nwDbtOIwCJaIz9Q4Tfi5cTf3iKIQOe1dFgaSs0nj8nTkJvmOSjKuypq06w/lz007R6z1MYzPjdTFObp7AZS9AZ3CJDzXtXPc7hs', '1', '1550647950', '1550647950', null);
INSERT INTO `y_admin_log_datas` VALUES ('65', '65', 'cc5b8417ae62JLH5PWAKevfvAqdk/pQaBJGuxLcXe5qAMQFE2SfOOd5E7ijvMUFosEydKT9zVTfwwz5hu3Ad7HgD5lUrPlldsIeY2AKrePhbAKYpVx7kM34PHIypMpQjDYnuv0m9nKbc/gR5fjZgBjZVslha9PHlf7LHykwxkeWXy69T8huv+yPWQkOgvPBnl6ad6cvPLg3WRih3GIAt8MQg61dGLnId8IrdrRixhxWJHi9Xu0l41Rx/q74NuuMQd+6JlLX0FcP3QmMRx6nkuYzMd82z98aQ1/urvW4GJ2eg1ZTSQslrW37Q0GaKLhQ8WpBry57DRQ3ha9e+3F7kjpoX6DZm/DzpsrMo00YnlC4MMFw', '1', '1550647950', '1550647950', null);
INSERT INTO `y_admin_log_datas` VALUES ('66', '66', '40e64e34BTDKncvL0zfBinqeaBajhX32kvi3pUsC72fCKOBo7hOPKJ4BT/RKoBd00VTYmF4MYjxhbywxK/HixI9zQR7VvnlREJm3Q5Cw6mCBGnUmg2g7bJfJWEOOQNJihqoc4azDRLeajLtEmMGFWsKo+9gF6vY3rth2m5m4A+NlVVMuUPBU4z0Nwir/LB5DP9oPXOVUxGsjLMS1s2PMR+VovBb6bkuj9Cn34LlFhfUPEupk4Td7nGV0HmoX5QADZbtjrmRdmXJPlNJkY3cEc4/U0m04zCoNFaGRd5AbpekViyCtgoenj1jWvTnt7pc6r3xSdsQ4AqFXWwF8J5H1hVO0/5R5QncAU7JfnBpccOJxLzGnX42ksWpADhHN', '1', '1550648035', '1550648035', null);
INSERT INTO `y_admin_log_datas` VALUES ('67', '67', '5f83925bIAQpHy7Cz5dmQqQ6uFSDjGsfl8kKwRafdbrTWk5x7GSREezZNL6Gd2TTenKPFxWqZidponUAqoWzHohZoOshIg6hEVcRJVoln0Thsi44djqtbP8RHUAqO6Z3+QQhphDD9IyCOv5sp1Qp4B1llzwuULr+SboTnM/bskGNMAXIIXDUlH1mlREXbpxkjzx4ICGU/pkh7J1pCFk2rd3qaCiYI07t36yFqCn3ADVhCjNDLEMe5zKw64Gzb7pKlhvXRMhajoX3AOMi8+2oRAKN5PWKvCLrMAj/oA6bYtd8hECYWWbpjNbcjEMsQ/TG/hD6dVMP+wTsWuwhPbzLUB9RgdrnZqWD4S+7VRCaeuk8dFcJ1Ii+Etp3ujyK', '1', '1550648035', '1550648035', null);
INSERT INTO `y_admin_log_datas` VALUES ('68', '68', '5eb0cf94IDU5gWtMLDbB5suBPhXn+reEMeDI7KsLOlikV04crGwKIuEvC/fQUeLWecUDqqOif8x2ZAaYc85RcS7b/sgD22RLb+VBbiGEskbxNR0xU/7WzKIbD+o4GlkD9QF4VKrgKDyz9A/uNc2A9S/EyUkBUgSriQ3Z1dyez0d5hUz+OKr6xTGBxLwsmLdxxzqf+rR4S+vfwYn5qHEayLJglfKJ3k5Tlc7jAnQ7EGSXJqrOYi5YxojIW0s47aNgE2jXPRTxzRzDoduZs1qcD48jv5dqyvzrMEBij97wJSM3aF0ijkbvaNcLF2Gl5SKmfbUhWzdEdNTuFEpo0h4LpVX3srzBr8uBGMTN2OCX1xjM', '1', '1550648044', '1550648044', null);
INSERT INTO `y_admin_log_datas` VALUES ('69', '69', '93c24797lNjlP/eh2wnJOdweW1tGAFDOTFL3UWH+crCeZGsDUcQlaIbcYepgBfaOxP5PINDxXnEhNGAmXjKFP+mkL/9fp1jFB6OCPaP92+WTop/yHQFOT0i9kVAocg16pgYxfN5OHOibOf5c/sWYbfwbEw4dIW7McolO6PB67VvJHxoDj1TDwBtU/3qBPeB7NBEV3yMzSChJ+o6chxdEHuyiZs9iBf7gEfYrfpdQRUfT1YvOPZe+jE/DzL/vzB4Cs4YgIzhK3HaVXBhonPU4MH3gazow+oVenGPny9bNVc5Gv7RUuISRpsLwj5ve7iKAxVQo33przcbMJWyEJfDkxv5AlrlsMkQS9LrVZJpd6fRh', '1', '1550648044', '1550648044', null);
INSERT INTO `y_admin_log_datas` VALUES ('70', '70', '03a8705aJyKRJuYkQZ0GnkvV+nv9hioADXRIhnqAO4hB8uhkfvLW4lOBSd1/qm6CP7FnBkoXS3FoycIBmWOfOyPOqJrVUshiDPSdujrCFagvgXUWVvM9ocTNAPxuk7TexgEir+47lchZE2yOICkxU6MhKWx5TE9nwfHzulQKFNNjT+9JDCsf1DjAggQ7LBa69pqUodeCZEuTQMy9r07cTzazRkNlXPsevW5/lOyXlSwK8aeqHmGRWPv1UaA155t9wZK3aHeKvZC1s5NHD5MamqdCSV1HhO653YEM7xoCPDDb8LGHh7tiVe6CBYzW2jvtMAmhhZIWEzP4jhR4oKAF8ZSzcfDmJ/OCuozuSOznmTQs', '1', '1550648050', '1550648050', null);
INSERT INTO `y_admin_log_datas` VALUES ('71', '71', '45266928LHmAvgQ3S9rprheLJOjAMTabvYj6eyEEK5ya1fc2W5kJk28A/XR1hphlC1X3Fp7DzdIrPeEYLW+/IMMTJZOnpwrpNhVcTE+NwbenoCladufx9OJTHN2nAQ3ecGSlx8o9VHsiGdvbRxvbRklK5CC3kTQPhcrlfaxHY4bi0yMbY949+66n9o+WZnPfNEh2Cduff6mOF4ti2fZTzKBaedydFECwhEbXvo9MzuF8E+61PIRK6Gto9w6NIPyJWQ3Nmyc3u+Lv8trbzdOrzWTCsaFjNSMisIq2+SyBuNfFUjbu+i2lppWzBuJJDzBuEQnhkO1u8Dk7MHnavwd6A2sDZTMK20kqjtKOh+Sclfc6', '1', '1550648050', '1550648050', null);
INSERT INTO `y_admin_log_datas` VALUES ('72', '72', '875ed04f8XynJK9qY3dam/iLXkL/aZ2jxpaY5b9UoddWxjuYUZY48wXIRfyG+MK67FakUGoQUln5Z3P8dfOscs26w5pwcrgCXu2e3riAlAOxtWROchK8kPc8t4UI4JJA9pVVHYBcyr3AFlultdMEWOWKdTGoGPe3oFU/WhmU7g7lfcxTrebh7g+h8/03A9PwjSqi+0yYFCJXEDRmRPNaLpe5cjJgDypSIdc2qvb1rqo0hvU3lAEEIjbEw9y3ggAKFrVkPAMFDZdLVi84pqAWxmdTCGGu7DJjLXCcO7e3HTSHicVhrrlVTjMET15qih+dTeyzuzPGMC20MgT0vAei6NSQE0dkJbeFFYL1ABAjQ9yblE6SH9gAEOz5dXTPo5OZAqHcx53xsuw', '1', '1550648055', '1550648055', null);
INSERT INTO `y_admin_log_datas` VALUES ('73', '73', '86209929FM4SbP+vCO8Xsu5lBSu0LcOl0t5OZNE1uNI03sPSEXxvxjTFaA4AXE4ppICiCb/9ignq2njRFFNdyG8PjqXvzW0WvFvwY9dkOCSCP/bNAmyTsNqmFOoxhroi0wspndGg++81ceeNIWDmQi30Lrh6lkZcdfWUvwtPM6X5b4yT1GcUVe4AcC3s2OyOnuiI0zZmppBrBd1d0FOLtg+7qRQXPMqPbmRLchl39woNIKuzbs4Zp03LKojuX1e56MiqR9O1Flp/NBQCg4OXM/DNR+pKm8Vh/7/+lWzmGgYwiJ7FoBhnVs9Lln5AdXJD5c/e+xwqQXCsX6P0wAZ5iwToPPC4QUTsAZS/8Cs8CQbfvDwM42F1UxRF+M9n82+9aCecMNCPas4', '1', '1550648055', '1550648055', null);
INSERT INTO `y_admin_log_datas` VALUES ('74', '74', '4bfc67f2F1vVECC6f7nvM1NiKSKYM9rjeTXBVnG0yEn+ozZAp0+F8O1esG83wq3lkPTjcFh4y+XMN2mbCWYoaBP6bHuso4k5cJgNP6sdOVT4YzjeYjD3RRlJmZSOxGZ1AzOjC5573oNMh4wGgTbwabVPsDOoaILqsGOLPDfaVjA6/gim4gjFPwzbbe/EW0Qvl1a9jvxp7iMHn/R3Dor90aH2Y2dmudeYosxTRrKrRFbZdnMetKyqaqUjj/5A/Gxu2RzD0slHhTdYpYWgPM6G0OEygiLRhnOzl8IiEg7O45lTlJ8yrpzbvdk5avVgG1PTycSwnfQg3oS2jDhgEmIRvvY0K9Z2Z6da11e2PrbNABbqZyo', '1', '1550648059', '1550648059', null);
INSERT INTO `y_admin_log_datas` VALUES ('75', '75', 'd5b8104bEReXMqhMrrEqh99Zhl0e7yOXILr5MjOBkWwNk4dH4Bnj5v0qmo9H5dEWLj7wEBOF+fyrBxxWOU8xjiqwQzLuglW+tNtjbtxIkioWjc69LXPh4iLA10qhy8Rj8DRHBTlt9jpkiyjvsU6HSwwERSGB1dz+b701clvK+agDBZtosmTHeKyB1/tsdRS8p0NhqikbWlf/6to2MxVwatI7HxSNKXpoYkayBm8jjTRhfGHYOdAl/lQe/LdJ5od+uBlk3bG91qQPIQP+zTEeSID7S1iYwUe8VIj8MbNBPM79Ti1CukECOr7rr4dKXwDeObh1gJM5Vy1vNxVD9ZWFGRv6S0P3ZoExozXLB9JpuY/lfAA', '1', '1550648059', '1550648059', null);
INSERT INTO `y_admin_log_datas` VALUES ('76', '76', '9ad3c360LKh8Z9hUvTTbL2VNcJU8NeBAGIBKKzt3XrDZoh6cNwqXvRTnM9InxFcgF8N4JEZWverceaBHUD4apbWyLy/11Pa3UHGkr2gHGbLd5YX+BhWByGZHgg', '1', '1550648146', '1550648146', null);
INSERT INTO `y_admin_log_datas` VALUES ('77', '77', 'f33a8c1eZlT/6TSBlEqDMl33ivYgi6L65mN2njhyM67G2O9l0N68rrLNupcPwYSBGF5D2onIHQ6JWPfbd4zxKRdd+7l1LR38hGDEO8Vnqw', '1', '1550648159', '1550648159', null);
INSERT INTO `y_admin_log_datas` VALUES ('78', '78', '88922693MT2hcUFLABIoH+YZsQ5xAu6sZ+al6pg3cfT9H4gEaHmcsWU7iDhMzAT3ZoK/Tqv+i2huftLqXpSL3QF6', '1', '1550648170', '1550648170', null);
INSERT INTO `y_admin_log_datas` VALUES ('79', '79', '66230951L+zIDoHU9QCCw6Gij2um5HnWZBRWwig/TV6XW6C2e/n/9l32tuj67PgI/6Ad8B5uHBs18e2SYx7+5InO80O3ddnjeBkMGeian+AvpjjPr4KrU5i9YKgFCr+9U2o4VMYVu/x1TrEgL1L7x+PXT1nfIIBHi0SVLU2yKcQmddiHEpJrjvpD0uZIrbCjUqifObu7nc9Aw58fAcTe7F21sfWxMqLOeY31inFveEG02GZI0DAxvz/WmnH0wTXhYK4DxXieT+ruAu5eo43OIFFdCWzsbcRJiAYP9OH1bdvHVc41mzehWr0RA5G+IQQ65OG4QQvYyRuZrnZwSBB1gtkNKA9dIojCDMGROm5I3fi1kkivXKGQ2HdxhFnp', '1', '1550651231', '1550651231', null);
INSERT INTO `y_admin_log_datas` VALUES ('80', '80', '1fe40c7b/R6lyQpsg1/31Q4//ndbmqtwpjN5z/Eyg1dFhrZkWl4+QC4rqp84AsxZFf7UU7BZXP17pK0cyB0/rFFNm22DnPlOh+jgpTQIbfyCm+uYeb2YqK2hgqrzV2xQMR+IShPAxNDxLtEXZd9GYWpO0x/VZjKdJ6nu85yFu4gtkNIpybhu0sibtKRV4v/wgH3wv9D8at515P5bLdQGg5e7aVZ+O5Z+xnqtmRZG+XfA2sUevAJV+I+RDEE+FPavOoS3gAgWvHqbYaiQ1bgJfk9rIy+aWFPckUyixVrDb0/0ygSVGONcXvLSVZErDfwDsudSnELDexi7G0wFskJ6/PthhrSGaoO8g726I8iXZhTmUT3n27eLe/AOj9lN', '1', '1550651231', '1550651231', null);
INSERT INTO `y_admin_log_datas` VALUES ('81', '81', 'c165bb339vvGzPC8Ev4M2UpBQKBCX/V+Id2FRIUM5SJTUL8U9M1i67DtPJLqgMm5drBdptXmBMhBDKA/D7WT+bSom7ElUKDWE88ntA5kHOebQZvWtdbklewnE7afQiB8TB7TI0gzpG3OAB3defxBlonhGrZRF2pyrPk9cK8ogx6sgXwjy6i4r6UHKB5WmjZxlLKZyTqgUxFol/qXxzRa40cJAupGg8QIXleq9ucd5ByE5RIn99kbkBovE9bF2lUPtdaDZef41rbIqle7c4Fq5zyFzdKkWRb0X7P6xFzk23SM8ELiqq8zSWI1rynWYvIRB8ni64LTPb11N9WEQWO5CoeLfcQKOX3hJHto3HFfPNUDIBR4K2soF7VvOzWR', '1', '1550654515', '1550654515', null);
INSERT INTO `y_admin_log_datas` VALUES ('82', '82', '97bd36b5In4LKaQpD3LVTyHdXTSSLMjNcuXV3sujH6QSmefbbm4H1FTg3EB34et5FRbz/m/EBFTEu3V7BTfArTdJNP1xD1zhzkjl8uXULFLXaU5Wz8NfNPVYjIMGb7ay7Sb69fPDKrNxxHPN6fPlaJxqrVnOFVJUsj1l68E8zPqAlWy1L/vLoS6NdTDED9NhkoQxT39PvEs7JLuvuOfP/Sqyl46i6DNMmOdChH0gAZJ2Afj05PdcjqUpoODZymeKYeQo1bAOGg9D57j6tF0M/it8rewFhL+njbB+u9ebLCkCzbJokcZc6YpZRqPD+U7XUYrBy0Pedkom6yW53qSfYINOwt7qvHx5sNIuDPUoPw8z58nMZ8+9Nlifluba', '1', '1550654516', '1550654516', null);
INSERT INTO `y_admin_log_datas` VALUES ('83', '83', '41226bd4faGnnkh/vmLvZ7ep64gmXmIwJr5N24ybifRpDMyU/i36/3OzMN7lqHfUFSIXdDgVYCvHrlIROdajAbid+WnLb44O3NkyV5A06WI9cIEdETug27o+/kByXTl48Iohn/yt8yjVggWiWU3WwByB04gMwlS54Q3stYIF10ZOA0BvcrDUar2Tkyco5mSGjY/qpZBOE8lWBOKPgTlzjjI2uMMfP/DhFc7+cyMgL8bp2kD4ehsTB50+TW5cmAgFb2M079qa323NFUY5DdBkMYRib0k9QOJbxaQqsG1nfVV4Y7vnA1Nvuyb2ofBg1uEpJg9YBRBKnXQA5SRk5vsfELhaCL5AUVGTttGlR2pTzdY2FpyuJKdbSYKTOZ1hLd+bX2fm0R1BnE37Qbav4L3DrxPDqVb+Ho2/b8NS5RKeWXmeciMxbyk9RuQ1UWLd9/HbiofqT2fOw4UQ', '1', '1550712349', '1550712349', null);
INSERT INTO `y_admin_log_datas` VALUES ('84', '84', '54568704YFchBft7L/PQfA22NUeSn/15lIrDLhGE/jz0UEwvM8BXeOidYQ9vVw2KiHP6uEyXTk8FZOJZ3mD/tZNChenbOuk+nt4qgcF0XwHaviYNdN23pRcpp6sk+EOBXLkeYgP9Q3s/UU0NHtt2zp/GBO4M4FTM6ipVlsMz5s/DgR4ddiLvUVeEiAhJL/4ib9NV5UkmyNdPCkPc+VOyP5Ka002ZVvYLl3+LgpRFqMRtpn7equSj4G4GlqM1SvFXQtshJyvf9gc7BsQnMcEg4VbWatSqQivHbSHd2aV8NRuw0n/SB3hMuk4zDi8968y9FEFvWfjLWwOBk1ISh3frec/ZLqQloenSBGYDSrbF1aSWtUhLVLg9gxHnecElVqX7r8bN6Yiyc9mCUY4k148XV3n+YEuqJmyIcDaRO1td30khuku24M3+3MEnpMzpL//LfwVVZi6/Bw1J', '1', '1550730833', '1550730833', null);
INSERT INTO `y_admin_log_datas` VALUES ('85', '85', '73d42809wYIAZq34XcYQqKTIqcK0d6yILSZaRv9rK9jHiEsgnCNn1smDLWCb347Rr42Zr59dKSrSkH7NrYT+n5QZ40HMg6aQVJTHMwL4mpAdVbStQrVZ12JgK9tHF/ypSN+MSAEHPrsaSy1Q+Q3mZvuiR+SMG35nIynYikiNdshwfVE2ND70PYgFNKptXf0SS7BD8oQlipg7KmK3b691s4pp05O591YDQKskf6YR/+tUlVexAlSRuavxxWRae4PH9FAR0XiMirGBQXgLWF+tDaanEhGNRsUAeq7BqjvDoo7HmK7TbJE1/AVULjc1D/4jQBey7Xh+1IeXAxflFnF++5gihRd1Azpibv4O+DUORYvJRCUPu6mAp2PFYEoeGE5uma5Z98svuEvH1OIpMfdr1Cgp3RbwC6h/WEF/Ceoj/eLhTEYm1C33ZJILNCFRoFHlSSKPnwXoFWlk', '1', '1550735512', '1550735512', null);
INSERT INTO `y_admin_log_datas` VALUES ('86', '86', '992b409bIiMJO2z4uV1pI67/9oBTvdHzSZ9GG3MAwEqSqgT3efUFsy31zi9/jCrKS7kq/VxAiloJh4NLwGubIBQpQPIblIe0kcH5TNf0fYrNtsCcS2NzPQR0SpUEa7V90bB8nylaWdjeGEDzdD7nBmbExTR/ZAULW27hlUBSltjSDh0mmuQKvvaEE71roNFCZdr3wt5UvTmzk8B65FYkjp5ErKLUAl9rjUDGVASpX8IH1uvO3nTFTBWUHYhf/ZMKZ0lnwg4AWo2c88UMW4/UpSxkNs8D1fxsdwj5iDDSklcGODlrKtiiXAObvp6+U1y5i/dVBp1ydSRMi8A21DJVHUq/pIbfHxn+G8lLBsmmu55NJwi/q4EHqBdcje/UK5+6B5nR7Z64mm13cMxyhuCQagpe6J/bodBIGr3oO+55h26HFerE7unHQx7ba/ju5WfLSPckYNbavFrY', '1', '1550799092', '1550799092', null);
INSERT INTO `y_admin_log_datas` VALUES ('87', '87', '2cafb355GbIr5F7nppAwu5zedbTEZHg4+tDAgwpsAi4xEzs5GS2qVD4NBw69oh6SfR+cstEBAB8nerRkwJXFqqfWDhl4hIe/T3Dpnp1tiiSGea7NoQlVyKQsG9ghA8hkEyJM/xNAEXK372iG0BRVUPwlIjICJYOLKHcRmHhZ8CB/Yym4m8bkDxzHrC8SQMk834wmCR42WO+OQjx7XAcyMO5KOnTUl+wL6qGv8zHGat+OM5ZNBDJ8L9dxMI1+dsT6fE5UK0peeV6B+fbhYD1DO+FENZzlfhPWhU4QnZextzodxBQtqJq+EruSPlYJwvqPw/QAX7HJtIr6uTA9StTcjxOUujtLJGQsv8qD/davaBEtZ5HNO3cdFFk3lUXXEK7U5Ry5T5EgPDpgyx2pcHH+CNBA/J+AIxj46AxLIxpILuAR7MP2mrbTPMsn3nN3R9Eec/VWcmaWpwJZqA', '1', '1550803914', '1550803914', null);
INSERT INTO `y_admin_log_datas` VALUES ('88', '88', 'a72e6c8epqKtJuAqgyIjvVSpus9OYb/r7Id/TmjcvqzN2Y+RrOYA+H/FKopRTe6Nk8bzMfsgKKF/p4lgNhXF+LP6uiTRytizq5uBIhl3QjYzjRrRLK0AtTk/Kw1YHnf5zhaEFlHQkpYSSOixcjDT3p9OxkhzwIG0wURkrzW/AAUqhUbQ8/b2kBWgSnZCpQWGm2W3NPU9RLVWLhLsDVypFJrI++ltu3HMl+1bCdqqwwViEQ6aB/8fbFzTWr14WIc/DhRWW9Bu0RnbJ240QkDWNGEAYlfOMRUjBN9nyhEB0HwtaqN7sa8SOIPh4zmxhvjdo4P0O3rQwgM9UZ+P5rHJkSpqn3oyQcfIhwkj5igogx0dc1TMUIXZ80CL2cI1x3tdn425vdM2iItWWewlMYMbKEMqy0Qf8lZFgO6BOC2i0IE+jDpcgPej5H4o4WpZk3iEMu+18vGWsWpc', '1', '1550803960', '1550803960', null);
INSERT INTO `y_admin_log_datas` VALUES ('89', '89', '17d598d2O8xZ/oVeXqItKHUbheWIvCB2PbqV0woZWaHbt99QcUG5B2BAUrgScOKEkBGs93Mjm4nruDnMFFQHMkrqUAVn866sf8AvSRK8jCyHimQyqNBfx9i1nJ5VvAgbYW3b2l2guZzRIsO7e4VvtpWfp6g0H92cqA5zb+WUukXZRw4sw2iogSpjXkYqvU5FM4bCnJfsRNXKGInvKEYL9rar9BuKrpDhgersNYrq0YetFSiIPcC9IqwvVV3Ro0LFH6Bbh/JAtbDJuFoCtlLucldpEq6iQ7Pxn8qxM/hdXUz0wgwRQaOFwIpHE6BF8d253opsywpBWBWHVYIOR9+CxPiFXbTSLCf9DIRyQ6f9d/GO/74C9imGbPx4uNEHL+qAZSla7FQnV2LuaHffGwmXhVqocUz14syTlyNS/JP2e3DB1NgQhQC58t+1EQFkzG9mGeEWHAoVug', '1', '1550803998', '1550803998', null);
INSERT INTO `y_admin_log_datas` VALUES ('90', '90', '732b2c6akf7B6LvaUe5E15rv4rt4kLxZA0tY54A1F7rlaosAvCBDwkzoBS492GtRPWEICs2/Mamlul+2zF5dn12b0uvHMCAO//tvAUnlj4bxEykbW5HIvWLNXhyzUBqu6d9qn7+dpBxYUQIRC3r6uNeqp0YLrWvnGDnfOX8bqUg0aF1B2ss3TABkjpLX+nbJty0Asljc6HUIw5WkyqBclu1KiMkEOLpnGGm6HfQZqj63gsg7WhgTbzJk92qHq99PeCUmSUl5yOmBXjWb5EL67Z2CTJnmwmr8MIspDbsnCafS7iLCTqk0RAdSWU62S1Ya3gb8V1qVyKk8JkfBE/K6kIHfO4OVBiVgSgoK6wCba011H4KXLV/qyElgnJBHsA0VuBgkyIqjA/cgma5vEu8QFnBOqSc9cjETumEevBFvP/I8VlYqMas7wgwqq2PiSHSCdIWe48irB14', '1', '1550804009', '1550804009', null);
INSERT INTO `y_admin_log_datas` VALUES ('91', '91', '7b4141045Q9qyJl5jJ6uC8hmET0GEjmsy3L5VBA2VV/O+m6AfPc/vtrIEh/SlSUH9AVMqzY9qh2J0aM7M7oI4gDBcuRXon2ggB+mUG+IqT8mXm8gv4+YnGCpjPWT9YEPr3l/9MDGPH61N4vncPdB6heooGs4scJ1iZT1cQJWsdQHz2zCvOCo+/UQEROxYvtsDs8Mc47/BrRH9J2IiNvj7FLdxbN36Z4adwhEs81dpmZEScT5vO/VVbRnUw4E9e3qpSX+jTmDpk0WE9t7nuplIyLejbyDYHVaDRfWcbpAWQRggsVXGceSOMcJF6xuMb8aiZO1q5ZI2niu1iyyOF6o0IBYjKLULf6pWy+DM2xzJACPQ8U5xfrRh9MYUd/OGR4w9omrqt82bXXYjpVXPKbys3xtRFhXSoQwY6yHvl+flsfKU/8/plrRdBPJwQHT8WFvBC73Xj2uoA', '1', '1550804021', '1550804021', null);
INSERT INTO `y_admin_log_datas` VALUES ('92', '92', '3a604fbdvYKC+7EBR+Lco4WUS2DfBb4VKxjwz1J9j1po8WrWAbicFgqqzCMpLMKiWgifg8zLtnYDuMt2NwEf8oAx6d1y7gkYkY/M6XG2gWgsNkcplhwoV7k3f3ig4xBhvrwoICGWz47rNfTeVRA0b3pmo4Jo8WmBVH+xJsTUrZEw7q4Fdzfb2tXcrBIhtG4nrozgPwUxyfGPPfGX8txQF4iwK96b8yE7Lgx/5BRm/6Xu64fz2QkUNDsqF/i//joi+TQmBojHcdnl+NsTzX7yyh+9ovBg/RJkW+uO3ssxVG8JpA3rZ5IIc3KtlQACFdpB/IwOTjUCyPPMc1UO76mKBRbNflqg2SQj3enOT/u8YLyQ5YY8EfrE69eXWLlzOY/DrWEjI+JWf2OGI2PR8oMWFWlKEo9CHzhTTApDgTiohbtjxWZ6KiYMrMGS3JMDDNwYkBp/yE4', '1', '1550804037', '1550804037', null);
INSERT INTO `y_admin_log_datas` VALUES ('93', '93', '3c7b1092sGBf59nUdy7VrYreJ6y4FCNDfCP2KkpNpuW6jllRo2ptJd07jMAIdiqeAqIeZFGkdo9FWC7b6YnBrx+xaryjdPxgnT0DCuK1LmmpRCjYEgRF9rIKoHYr0M/rKb+g6JdeV0DVzjhFxfymgmgZkEp7+LwkMdYVCfe5Yc7rgV+PxZCbCYIBEDFTyz7eXkjhNE9fBlOUbyrL3ylQZR2uhQb/gGLy/76OtXgABAdVwFY9YH/TlL6y55Ps1rVG5U7NF8AJvvu81fnWJks4OEUtYtjp6oMZc1W5j/jksNOcvWFdHimfC9ick7Cw7BzbZNv6+BfPOBg9XncDSToSD5KsLYrtS9twVUK02h3XfaUqsQkkl0F77zEJanh4lUEhXQAQFlSc9SDuLHKNkwf6+bb0QW7q/jhVr1NwvW5Mfd5XvuyjTfBgGyfd1yH2OOvTZ0X7v7qtYqKW', '1', '1550814966', '1550814966', null);
INSERT INTO `y_admin_log_datas` VALUES ('94', '94', '811e38e8StJGIJmOXLkYJN3n0+RnXshLKBKGRETOGbcSi8f6wlqcZLvnueHKQKYnPWmpqWWZ9W9L55Mdx+WzLjk6N9tcdo96hoQmRL42fDnO6/u8CPSumHgRpQpdwfM3wUomjrwBID7x4teEmBJdR4ojGPQEVLF5DcAmBhQRmeovtUr/2M28QuFhkhydH/HzSTbQVVX7V6buwlhlnO18OsH9QEgc6mq9lk+u2w2PJP8brA/RQZ74s0e0tKSaCHBBV8SCHC5tG6HiTTmn3/b8F1fTvSm/YNGYfE3NOHysb9ulS+dQXNzrjq1XKcCsRE4v40m3VUOWRA4C3BQQm+SvTQRVJt2CHA23iU2R8k/eSKHVyHm2hrd1q1c8ZWPv06RubgdOXEorSoh7thxjc/h1m9kIiWjij9xBx/eKU7uLypFOV0wMpAuakeB+dApLgBUbFaMq/5vUO+BK', '1', '1551058341', '1551058341', null);
INSERT INTO `y_admin_log_datas` VALUES ('95', '95', '65ce88b9DY9hNlAS3g8UfnYN7bRyyKZVtifcbEqZj9pazSxibzSYQOIg8NinkuePI+Vg3761DMiqpawuAbWTLEoqWAjp7NNzpBUJuu/EtBEPbBtSh927ZJBIaYzf6IIsoGo/jMuA1Jt7MqFOn0+c5zRXzbBaMLDY/LXBXJO/lety2GCSa4nH+BYe3z37yYK3T4HkSPcA2Ua9fnhxtqUz3zx58EmEqz8J3nQMyyo8KQPkOrv19VuSnLuoZnqY8sgssbgBFd+QkBB7mM3im7EpC0qA9UAWrGy6H00AyNIuujRK+8cZinvtcC3Yz7fBsE6Pe+45ppplE4PaCzW1vTda/57a4IDK3h6bmiEcFljlMTN8FxcyM5o/v2fTAfQpTajrWKTfau9tRZAundQ23stu27Ii3IGvpepKyUb6FYlHJe2saLUgbe4KsyoljaqW0qXkmrACtMAUIYbB', '1', '1551423921', '1551423921', null);
INSERT INTO `y_admin_log_datas` VALUES ('96', '96', '58d31769PM8I6faC6Ev/nTLfSjryFpfFsNFXksz1Mq4L5jP9vDJrrPpjC+NNzgemCW31ZVjv3H9ZlW7ZXPdv3Sv7gG4NTIcy0p5JAXYHunUszYmGwbqTopcN4QkljZF0Q7Qv607kKVWl0mN1TtpugNvpWTLzrD8HABGB/cyWZeWsIVKtG+oV6FTPQaSnt3z8XBrNpBe/zao5R9juNE9kVnnrS9sEjV3BlJpzadl9KAsxGkTPFNOxx2py36dJsier4ZIlY8Wy8Sxe9OmM/hVh81+aEKawOfBy0+kM8O2XSQPeIEcVbpFe1BTTKJ+//bcutU1cmp/kEdwaA+r/yKzT9uHPvTSyS46MX1gSSaqCaJyBcQ9OvKGQlvR8cWoDKwYmNLugUOBhs1b9kdkxArHmavlCqnjW+8OuAaHrhcVqcy7ZdiicgeCIk0jaJmaWI+4VXKs1100vfGy9', '1', '1551662812', '1551662812', null);
INSERT INTO `y_admin_log_datas` VALUES ('97', '97', '6074b70bF+2GnAW8xL+gDO862qkuK1OCFHDTPPi2FgE77eNkV+1AZavGQHB2Kzi1s62yre+USVLJC2jt60wg/bmQGJ2YxYUAwPZq2T6MvjofBxc9IGFN4Yo51uiQI9GeAh8Pj5nkV2TyCwyStYNTBz0lFIkM6CxYaFx4xl1WlfsgWzD9yca3uyOamfAzIV6ZfoQ5uZX6/P211FSTEAjXd78jQoGtuNw9dPTJW4bTPHxwc7mAGppTJuK44HCKgZyrkV0ptrZsQEfW+h3LW2a3FwXNcg5IgbHCkjjCE7N/CpekTpDz+0V0WzsmShDnzT9P0Wrje/AF69Jy1IPwCdj6nepRMQT8Kh1mR5Npz1/T5PUL0FJo3Ie9aM2aZQXR1aa7VFa8aq00cqsookBNBYu9QJGFlumjmkJaiZWwd1b/tAI+FX/hlg', '1', '1551662896', '1551662896', null);
INSERT INTO `y_admin_log_datas` VALUES ('98', '98', 'd55bc818Nr+1TEUy7N1z5zvY/4OeRLubZbKine3uzblx1Qyy+/SY0IMOK4U1PBDPfiSULowlF98Trtu87+f2bhV/Hqee9WzPv8XgkNHUAJnwLQ9RrZHQ7pjVbHj+GjqP7dgQGoiGObwWTAwuJj8afKFDo50TPReg9kVnKaQa9TUOnQOQ0Uf1fYCbHhyNwSuinMbPY0orX3E6+mPueFY4dSeI+N29ncbe6Y1vueZkn+spBf0rZJmvGSL9oaKJ/N1EGnpS6oAswFIwH5flw+gmnEgbtMMYEQ6KC1fn3j/5GWiU9TCCcO/xNTQBJhHK9nWjIyZCjNBPxkBvVrLcUa/EERGgWnKAu4TH2o1P5e14QHCwN+Dozw3HxEuXGVtLXsfJWfiZYGkwD8qr4s6yXpWJkrkRtwLQxQrIsbvVuJPVwRkqevruKZc6', '1', '1551662953', '1551662953', null);
INSERT INTO `y_admin_log_datas` VALUES ('99', '99', 'f1d759e39sCKbjJhocp2c2Q5InObMpuEEsaOlpqvRmzzu0WthhA0aZ1zjlVVzSQQt4jwyIB4E1bK8mVsZEp4TklFzTNp484eU+DacIyYIEqwwRhxBF8WrRYB+fwPGF1gG/ncyyfqAKC/ArvM4Vd+cdDRaXp8mtOycLMC+i4LVjrgiZOkF/ZcoO9mKMxbto6BVONNvpBun++mHgXMGOtSI1x92H9drXu4XZZcoP1F9xc4OdQaqWxfesgoIoaCJmRp6pIsqpfOFNNASv141dPg+esEqgPCzLJ7Iol80sVCoz1QNdi/tBKOBOSZSLPCeTJ5W+mP/zdOSmoDXwRCUFr5hNU4HxfrWqY8GN14LoUCM737D0YZsKZaW+4y1/ckEhtoC+3Wq8KbOTsBKBQvZ1HjqF3Gmz0AGqG4X6qk+kS4LU24jF9f', '1', '1551662992', '1551662992', null);
INSERT INTO `y_admin_log_datas` VALUES ('100', '100', '04fcc5e6CyIGQejqwVdMUrkIS9ov614nV27+GOkhYbaKJmBZarQ/wwZ7jnAAWeFhn/+P6McbCja31qTLCZPoGL4fObaOxzjMEE63pHXGL0VopZx4st0szJKacGRfpMBZ+VO2lP/zL8PBTLs35K3/0BnALD60bh6cDFyCtPPe4xWguEdaBqE35Dv51gT/tbl2IKJb98+jg1ho35LBE8fF43OvDOy3HKPgNY1pN84y/+Hz+Bbes4EF89BNCEX6tx5iA/rqnQfm2e8NdlX7guk8GgHiOQ3stP508ro5PJ9gN6n2MvqzHcg1ZEboXHbwrZQto8scA0r8FUkatQXYnZkCGXxa4s4HqaX7ab0lqPcXXkezUA+jyU+AwMJG0slGJvsVVVIfXin4txxL/geadj1de2QZq2lamHgsXDVleV27d7M2XKi9zuqCOClj78rmgC7DS5Dy', '1', '1551663063', '1551663063', null);
INSERT INTO `y_admin_log_datas` VALUES ('101', '101', 'e59fc6b3CJ+kFak/UMXfA0IdBJhjGNZ6xyzlCjZrZ4Tqi8Yr8BIq9EVw/H+SvDNsdVqR2DRsoMYY55ugN2hMvz87JBw/bAa1qQGXcLrYTVsy9k2doQLRyarHyvzZT23oThu7kCxMRrMiSo/tw1LNVklD/yO2OkfRhF47l5G0IEP0W5TTFCEtyfqGIMg8Vf4SrE0EUofj4WmCN26c0/xnQqSmJQAsfdU9kFS7ijRMuvAC8upezO9KO3WDQ6gVuKtwgsvU8+GrGmwALMUJsNS9HeyUmC5WTHzwftQ026ZtCyRVmpGKQ97n9O9miVLKG3TJ6ZmCl/txkf8z0GmfQ0zwiDnr9+IbfcmfdfSqDSaA11E7LZ3m2gQzMUUf2k+rF6+bCCSqzOY8DV2QXWxHNMcmPanuG7+Ueo2dHUpfJI5lirhClzCuKU9FG1+n4mBooyAS', '1', '1551663071', '1551663071', null);
INSERT INTO `y_admin_log_datas` VALUES ('102', '102', 'c2e52e1cJbrgv+hhV3QTiQkKQKHsESBfl4VOIDtVj7qqvSzjeB54U0P2lnONS3ysCYMc923g7NrgiibTtna/2RWJyZt6JUYFeOSjEHBDA1ZtMr/xUcUswbNAsdLdjwgZYRvx33KgKMoUwosaqyGZovBeQrzO8ZVVVRB9Y/aw5C0siL9HE08jesltjN8l59MgqD7FV6A20xLWcE3X45iIjlMBKnx2QMOCeQ1EHjw8v4LuiWrjSq7NDwTptXM0QEl+0WVDzz1szG5S9KivBFt7CM7IcHzZIcWlXoez0qXGLlHfvbpJ3ldlEQ1VbJb3ig+Q64KAKGSKVux2psIUJIrNacfBBaSqgUTzDbnW08V5yMfaRiG9nxN9L2aJCY+wpxNH4eTNzbkYfkENRgiA2nRdY/Imay5X+D8rTDxhbBW/Kacs', '1', '1551663109', '1551663109', null);
INSERT INTO `y_admin_log_datas` VALUES ('103', '103', '17eaf70b1KlS2gHwVKOdsltKqDkXLtib8HTHWjZ9FK8cgo0uOfztdTfav/ZOtcNfB2JkX3NRxRNkF6ZeIdxwWQuBu/jdpMzIVOS0HGfaijSxRmroFr5Fm2GrzvuHlPEF2z7CHXaR8k2sxev3UHNPhWyjYnqnes6venFGBIKQNVRCAwdb71h1TabEj9yBEIA/EKVKh6tBpjqwpCEOfV21HhQc5fFCTTu4nTDz0fvrwLGdKeUAb7CWFmGsbhQXgyp/OuUQDayadD/Rmyo4pt0V/d8IEL30GDLOx2sTK+U+I7F91EJA6mLWEUyZy16DJTYHybCZYQMJNVNOOduq9mocsQ2CDhUIU17wk9BoweDpWep+wejROCbVZzTIHMp/28oLWtu91SjaHBvOmKC/NbOIX9kSINcTWZJ34gtjptK3E3Fn', '1', '1551663197', '1551663197', null);
INSERT INTO `y_admin_log_datas` VALUES ('104', '104', '2061ea7asJ2eY4nSMUJuml3Ca+Gs0lPmsassLw6fWlmpaYtgEb5Tr22w4mDW6WsHg+ZbOKlDrSpHgux3+z6az+NG1hw/LWuHeidsD5rmA+6g7v6w+OaUHxzm6qsgpvxruifMsBDlYck/p44o6kG/XRGZj+yQ9sQ8a/Eco5r4tRADuXgiM3peylth0UbsCJwGnO9w/GJjwpKQ3QkS2h9XausNWGz2Bb9SrUNjYoB3syJ/STXy5Get4MoFtPAr6Q4xXcANXb8FG3rgtsT7GfJC17lqHIc4QFVTP0u4fZ6u4Axo8bOCzvdTA0KqfLbSjxU5DbFQ1Mr0xWZHooQjKzfwGCAisNxEgmAqq1NI5rNkkkDxzzt2e7nkvEKeXli4bhsQeukdAxlQ18AXdW+06Qi0FR88OdV0qXfGVULVTFLtfg', '1', '1551663233', '1551663233', null);
INSERT INTO `y_admin_log_datas` VALUES ('105', '105', '62c7c040KPyAtSwtEkZVCUSCCz/o/qidMxawWTNq4xp+GO2l3Wo', '1', '1551663261', '1551663261', null);
INSERT INTO `y_admin_log_datas` VALUES ('106', '106', '4644f641mfplcXnGPzq3mpYvdLePUuCw0vMiKCjXCxJ54YPFGpo', '1', '1551663278', '1551663278', null);
INSERT INTO `y_admin_log_datas` VALUES ('107', '107', '13eeb73c/zHUV7P7x7f5jxvQ/yZuhrQcJG6S86Dlijpq7WPIIVea+riUY9gfKEErfFj3F5FtR7Wn3g/lYiZ3', '1', '1551663398', '1551663398', null);
INSERT INTO `y_admin_log_datas` VALUES ('108', '108', '563dd1db7flz14c7IrDO8judWlUMUpCGBQlWPTtixidO/RriqL/PbZCLEhpUUTMFY7GC9Y7eMF+1dqHm024I', '1', '1551663983', '1551663983', null);
INSERT INTO `y_admin_log_datas` VALUES ('109', '109', 'e5c44c442VR/6PYYY3tR+SUuq7m1I53a8MvZAhcAKGzuVR/nG9s8nCrnelfF4HkKkGmAO8hWNGXSthJDBpYG', '1', '1551664030', '1551664030', null);
INSERT INTO `y_admin_log_datas` VALUES ('110', '110', 'b661f4caKRvCb2ppS65/Cpzl9UKHE6mZbtGAQif0x6sguBZX3ydtfaUofnJXqKeyAdyevFOxkyRCP8DT5cCm', '1', '1551664038', '1551664038', null);
INSERT INTO `y_admin_log_datas` VALUES ('111', '111', '6c171e30i5hlOrgD9ZL3hgNOnWdguXgeJEfuqQLjhLeQy0DB09rKlX63792Sh3ryciZpL+fLjFs5eb2LqjXa', '1', '1551664093', '1551664093', null);
INSERT INTO `y_admin_log_datas` VALUES ('112', '112', 'dc853134cPekCJ4LLcQDRF4MLBol4y6qFyDIYPtKf877Xl2t/BY', '1', '1551664504', '1551664504', null);
INSERT INTO `y_admin_log_datas` VALUES ('113', '113', 'cf5f26a4B6bfgD0tLqXiydwwDmT4K4h1noSoupBrlhELFH6cjvE', '1', '1551665068', '1551665068', null);
INSERT INTO `y_admin_log_datas` VALUES ('114', '114', '90c83751WZBEsdjUXG5mA+FbJc6EoDX+e9B+iqT2tJNZ5O5FifU', '1', '1551665092', '1551665092', null);
INSERT INTO `y_admin_log_datas` VALUES ('115', '115', '3679f6echx2inG0HShOVenyEZHANC1BODWSOFjuRgX4kTsa/rPY', '1', '1551665992', '1551665992', null);
INSERT INTO `y_admin_log_datas` VALUES ('116', '116', '9e5de169BFSh++ZlgQhi4IKzge66iA0Trf/h9nsGBLnGCy95v44', '1', '1551666016', '1551666016', null);
INSERT INTO `y_admin_log_datas` VALUES ('117', '117', '7ef2f164kaEbYI4LxTd3XNWmryEPL59g2QvGuaxwfpl04aaSMQw', '1', '1551666081', '1551666081', null);
INSERT INTO `y_admin_log_datas` VALUES ('118', '118', 'dc369f3022xpuuThsoCHz8w01f62XJ6KWri+7JUTK0+2REio58Q', '1', '1551666632', '1551666632', null);
INSERT INTO `y_admin_log_datas` VALUES ('119', '119', '596653df0QcNLdbpyz9MKWhXIU00gR7aP+OIaWQogldnphRhPzA', '1', '1551668198', '1551668198', null);
INSERT INTO `y_admin_log_datas` VALUES ('120', '120', 'b1ebfe43GbQsA9ybJlP+Tz6a61G8KPOI9ntOANdJTS9CC4JWL8Q', '1', '1551669818', '1551669818', null);
INSERT INTO `y_admin_log_datas` VALUES ('121', '121', '4ba9c2dbqd88M7aO/E1VbOLs4cuDMg6RVQJW6ZYnHTxG2I/iShU', '1', '1551671017', '1551671017', null);
INSERT INTO `y_admin_log_datas` VALUES ('122', '122', '1b5721d8x6thPeW6p/sXBYYiPNNlAc4ohmWMFLcSuIpSbzM55qM', '1', '1551679553', '1551679553', null);
INSERT INTO `y_admin_log_datas` VALUES ('123', '123', 'b74a7f58vQgmSIjuRVCeiYaZtC3AUCKgpqNzUO6/vLc/feu0lOE', '1', '1551679604', '1551679604', null);
INSERT INTO `y_admin_log_datas` VALUES ('124', '124', '9c55179eq9ZuzSt6evzM9j0IiNGj3g6lrQVubIpgB7VQsQhIAtI', '1', '1551679683', '1551679683', null);
INSERT INTO `y_admin_log_datas` VALUES ('125', '125', '0cbc8cbdnqVWTeZnvPdAtILKkajye1Bg4Mq0m4U/gSI+OEx+OJQ', '1', '1551680577', '1551680577', null);
INSERT INTO `y_admin_log_datas` VALUES ('126', '126', '90a51dc6G4uOQDEXnPk4iquXSp9EVIu9f2cWMHgaVMnKC7Qzu3U', '1', '1551681975', '1551681975', null);
INSERT INTO `y_admin_log_datas` VALUES ('127', '127', 'f63e65f8HJJvatqjC2N7ZkLutZEf8Ia73MxcQBz5ns57ScopYGw', '1', '1551682029', '1551682029', null);
INSERT INTO `y_admin_log_datas` VALUES ('128', '128', 'f36bb036AouGcxVYLgl0+Uus5WAtqWbWVnEec5/QAdJXYTpLrLI', '1', '1551682076', '1551682076', null);
INSERT INTO `y_admin_log_datas` VALUES ('129', '129', '28ef2003IJSb/3PAUMqgaKHivUk8JIxGdh+nW5DSiPRNJfQk70s', '1', '1551682780', '1551682780', null);
INSERT INTO `y_admin_log_datas` VALUES ('130', '130', '5d33905cv69orqKT9f2CF5h8y2W3Lc7op+f9AoWcQi9dSHWfwqw', '1', '1551682873', '1551682873', null);
INSERT INTO `y_admin_log_datas` VALUES ('131', '131', '943151f4l8fYqQkIusuDmApYxSy+Ocifx/egwKg04b4oEzbEbFo', '1', '1551683049', '1551683049', null);
INSERT INTO `y_admin_log_datas` VALUES ('132', '132', '1e02089cEEx1I1QZzZUUVLZujWo4bVNac9WtPUIgOGu8w1D4KK8', '1', '1551683144', '1551683144', null);
INSERT INTO `y_admin_log_datas` VALUES ('133', '133', '763c07605uwEPiGynL2Ov8as0IRQATX7ibN0ZQecSnL0J7yoqV0', '1', '1551683388', '1551683388', null);
INSERT INTO `y_admin_log_datas` VALUES ('134', '134', '22d6fe35HmuKonjuK4WSeYBhbvtlJyiVYiJdvrprvPy07zKkSD0', '1', '1551683607', '1551683607', null);
INSERT INTO `y_admin_log_datas` VALUES ('135', '135', 'c86ed61dsueTE4BuK/Ya4Sub+IrG0861WPUsaQQs3hhmRJzXpvw', '1', '1551683609', '1551683609', null);
INSERT INTO `y_admin_log_datas` VALUES ('136', '136', 'b1449e22/GziVXVk8Em2e941U46D9F7gfeoGmqrR4S15ijamwvk', '1', '1551683614', '1551683614', null);
INSERT INTO `y_admin_log_datas` VALUES ('137', '137', '5190f373rpWpKY5J6UfSSGCEa78lKcnrKZrMNy+mX8qbcN53OEg', '1', '1551683627', '1551683627', null);
INSERT INTO `y_admin_log_datas` VALUES ('138', '138', '2b4e3c06cKEhZEYCebBv02Ff++e/e9KhC+MJ8NX5qCZMUhaGCW4', '1', '1551683630', '1551683630', null);
INSERT INTO `y_admin_log_datas` VALUES ('139', '139', '741de0b6+ag/ALlqtSW8OQYsbN9kK2weMxTBZlelY2KQpZ2lOmw', '1', '1551683661', '1551683661', null);
INSERT INTO `y_admin_log_datas` VALUES ('140', '140', 'aee9d10dnnki5zpGA2viWn+EGNVT8+Ug8cgaGiyGJsmyhQet3wc', '1', '1551683700', '1551683700', null);
INSERT INTO `y_admin_log_datas` VALUES ('141', '141', 'a4dd20abMUBdMvSevCdcAQ1YliC1CnVI9/ZztghIFvKSd614nmc', '1', '1551683715', '1551683715', null);
INSERT INTO `y_admin_log_datas` VALUES ('142', '142', '961d1cebLBlbtlSp43rfKjmFx7jCzcn8wlKiwPGcwnOzh6TGx9E', '1', '1551683806', '1551683806', null);
INSERT INTO `y_admin_log_datas` VALUES ('143', '143', '26cdb64brQSQVoeQOMTnn241WxPX9wAZlrTl9D1ADPMfqj57ixs', '1', '1551683817', '1551683817', null);
INSERT INTO `y_admin_log_datas` VALUES ('144', '144', '0621c275tMAk2zu7WK2JuagRUgtIaH/aJ58INWBQ+aaXlc46LgA', '1', '1551683875', '1551683875', null);
INSERT INTO `y_admin_log_datas` VALUES ('145', '145', '207584e2n/k7R762KheOr0Wty8/EcyQi+odnKUG1rJwL299WrQI', '1', '1551684297', '1551684297', null);
INSERT INTO `y_admin_log_datas` VALUES ('146', '146', '6504b9ecFTIJXAlKL/oeE80NAlyTpXsTfb3hWZQ82bfn9NnApfU', '1', '1551684317', '1551684317', null);
INSERT INTO `y_admin_log_datas` VALUES ('147', '147', '4c91ef62ApjQKK2CH8TlhBmc66/8rKaDyLJPv2/r+HnlTOR57Oo', '1', '1551684352', '1551684352', null);
INSERT INTO `y_admin_log_datas` VALUES ('148', '148', '79f0d208jsvmnM0D4nuUsH9KKPAr4g6w35neTJGzAzXOOs17dwc', '1', '1551684392', '1551684392', null);
INSERT INTO `y_admin_log_datas` VALUES ('149', '149', '86f71660In3Bq+QG6hUrTCl45YPov/iSBphuRvqmwI/txUMLJKU', '1', '1551684415', '1551684415', null);
INSERT INTO `y_admin_log_datas` VALUES ('150', '150', '99bbe403G8KE9gcPfGyiUsAvaEnA2IFihjVc2OKBac3dhGB+bj8', '1', '1551684448', '1551684448', null);
INSERT INTO `y_admin_log_datas` VALUES ('151', '151', '0f4e6fc0R9y1DuYOXJ8kxqhPcUXz4ZREAKaax+QJ1i1qmzJpLMk', '1', '1551685382', '1551685382', null);
INSERT INTO `y_admin_log_datas` VALUES ('152', '152', '3a4add28yjOBG36r0+A5PJvkwSo5Zy/Fg3CG1m0I+1tj0vTS+X0', '1', '1551687927', '1551687927', null);
INSERT INTO `y_admin_log_datas` VALUES ('153', '153', 'dc75bc6c5wCOpCjZzlb9vT00qL76Zrdu3ceuA2Kjgen1nsVXimg', '1', '1551688067', '1551688067', null);
INSERT INTO `y_admin_log_datas` VALUES ('154', '154', 'ae439a30yb4NfucV7HxNBGnLjNaS1Tcw77oyOXDnPdFkl5M5KS8', '1', '1551688213', '1551688213', null);
INSERT INTO `y_admin_log_datas` VALUES ('155', '155', 'd29f4881kmA/mh+h7yScW1qN78PvBy+8LhZgYgEYRO9gcFGtfiM', '1', '1551688331', '1551688331', null);
INSERT INTO `y_admin_log_datas` VALUES ('156', '156', '9dd0ce91GhYdUEMmDwMlRstX/uJPMgDnqw7Cl6zVmRNuscC0GsA', '1', '1551688766', '1551688766', null);
INSERT INTO `y_admin_log_datas` VALUES ('157', '157', 'dd49069dVQCsqQKa65WzsX9OKsPMZs7umj2i1vko90s1Z4AhBHY', '1', '1551689044', '1551689044', null);
INSERT INTO `y_admin_log_datas` VALUES ('158', '158', '8dbc3a01CCgDUz3HThANS/NO8w01pHycU4/1zJovFCzSmIC8mp0', '1', '1551689141', '1551689141', null);
INSERT INTO `y_admin_log_datas` VALUES ('159', '159', 'cf13a5d9usArnODr3bRRBC4NM4swNAN2GP7+RELr+Tq+sCNE6Bk', '1', '1551689141', '1551689141', null);
INSERT INTO `y_admin_log_datas` VALUES ('160', '160', '6d61affbYd3Vup+GwtljmdCM68CFfMsB9D/+fg1Qk3kVc71CKqI', '1', '1551689142', '1551689142', null);
INSERT INTO `y_admin_log_datas` VALUES ('161', '161', 'ef3676dbuM6693wbEl5crojVx4ZG+T6Gmu8165omPV6j6ZOHAGg', '1', '1551689177', '1551689177', null);
INSERT INTO `y_admin_log_datas` VALUES ('162', '162', '3c2d8de7/pm6CflM10UJcPslGhR9gp5CQRyP449albPD5Gj8TOA', '1', '1551689196', '1551689196', null);
INSERT INTO `y_admin_log_datas` VALUES ('163', '163', 'c2b30c96HLcWNebHsvgBtS3YSkdacHBw6koWu8HEBtVzrdpwNCA', '1', '1551689221', '1551689221', null);
INSERT INTO `y_admin_log_datas` VALUES ('164', '164', '63cd4360qpGhVX6qlx7fb9B26kk9mKD0P/PsgL/qDrH2yX4MDxs', '1', '1551689239', '1551689239', null);
INSERT INTO `y_admin_log_datas` VALUES ('165', '165', '3546d55dvsRvRnsV5bPo39WAsqy2QXD3/o7W3rKK32zEVD/YA8I', '1', '1551689304', '1551689304', null);
INSERT INTO `y_admin_log_datas` VALUES ('166', '166', 'ebec80d3SA+NSAgOqT2rUOt20HnHZzyNMGBL+gzEfnyDNIIZsgU', '1', '1551689325', '1551689325', null);
INSERT INTO `y_admin_log_datas` VALUES ('167', '167', '6005e668Omu1++U2n8aEhx3lXWjaWgrLbb02sWWqTb0oi1auJhU', '1', '1551690627', '1551690627', null);
INSERT INTO `y_admin_log_datas` VALUES ('168', '168', '6bec67d88Sp8Z+9F7EHgwUOrLZ8haPG0m3S/EPARuszNfK+vCDs', '1', '1551690813', '1551690813', null);
INSERT INTO `y_admin_log_datas` VALUES ('169', '169', '73d61b0ddgQjM4s6ymx/oXZ3gcdf54LXhkywDBwjBsdRbVCvIvU', '1', '1551690817', '1551690817', null);
INSERT INTO `y_admin_log_datas` VALUES ('170', '170', 'a099d9abVSQy0OJ4njGSKqYKo1G+75quoSKuCYziDJapd1RG2lg', '1', '1551691069', '1551691069', null);
INSERT INTO `y_admin_log_datas` VALUES ('171', '171', '3b078d3dYE0246x78pry3RkGMubsFAZ6RL/tCCtR7cxHKSZdMGQ', '1', '1551692245', '1551692245', null);
INSERT INTO `y_admin_log_datas` VALUES ('172', '172', '0b844364j73utwBzo5H4tiIu79cYBXa9Kzpsgg2ewDQ/X3z6rDQ', '1', '1551692340', '1551692340', null);
INSERT INTO `y_admin_log_datas` VALUES ('173', '173', 'd4f9e608Usz+4pX6kHa8g2cb7L0vz4EgGcdgQdx5wbqe+uQ4WcQ', '1', '1551692395', '1551692395', null);
INSERT INTO `y_admin_log_datas` VALUES ('174', '174', 'b84a5251bAXkxmuVeYXo+wT/WGQnKOfvTX20kPzrUezH+qPUaYA', '1', '1551692492', '1551692492', null);
INSERT INTO `y_admin_log_datas` VALUES ('175', '175', '6fc5d8ddiqLl7ZasDDMybTLW9Qjdou2gDSj/kKUIDrelBjTlMyI', '1', '1551692504', '1551692504', null);
INSERT INTO `y_admin_log_datas` VALUES ('176', '176', '1cc4daf2GYaOvM3+KbK7w+zvhdKDHKbdpoYXOI/BaTd3aYqIV0Q', '1', '1551692519', '1551692519', null);
INSERT INTO `y_admin_log_datas` VALUES ('177', '177', '9ee08b3d2vg0E3GRHly0Pyzn8ivC19USRj9Ze5zZUOXVwfAQ7eE', '1', '1551692523', '1551692523', null);
INSERT INTO `y_admin_log_datas` VALUES ('178', '178', '393e112a6lzffigtA4+pQ8H0a9OWuA+ou8RBl4Zg9pDlxzAb5KE', '1', '1551693134', '1551693134', null);
INSERT INTO `y_admin_log_datas` VALUES ('179', '179', '926860b907tAy8v2XwXKqKRkSONhc7XX6o7SZh28k+Iy71vH54g', '1', '1551693151', '1551693151', null);
INSERT INTO `y_admin_log_datas` VALUES ('180', '180', '63d38311o5/vjyImp0b0vVZsqPHvlVVjBmHiIvUKJWLPV1Agcsc', '1', '1551693489', '1551693489', null);
INSERT INTO `y_admin_log_datas` VALUES ('181', '181', 'cd5165fdOpZIkQQ5BKJoBN4vhLwBwTUw2KApSnHtYTdX7BFNRho', '1', '1551693688', '1551693688', null);
INSERT INTO `y_admin_log_datas` VALUES ('182', '182', '737513e6WSbSkrFoaMSrPLml+E7KPrh0t6MX/aMg1y+41wGJojA', '1', '1551693748', '1551693748', null);
INSERT INTO `y_admin_log_datas` VALUES ('183', '183', '9ed42bdcMLbF8fQLtgb8/0K67gEhI3FouTrTdbR6vJqqIaRuaMA', '1', '1551694066', '1551694066', null);
INSERT INTO `y_admin_log_datas` VALUES ('184', '184', 'bb30b4d57sEpLqTx5dpUnem5TpFpGq69+iJqquz8C7YIJmpHElI', '1', '1551695123', '1551695123', null);
INSERT INTO `y_admin_log_datas` VALUES ('185', '185', '3978e829uisQDVvUszWUlj2SHxg1uRpsAGwms1noyg61qxMSUHw', '1', '1551695137', '1551695137', null);
INSERT INTO `y_admin_log_datas` VALUES ('186', '186', '84f32cb7cELJwvGCkKh1E6vNaLF4pFRvz8MiCdrU3hzh+zVEiXk', '1', '1551695289', '1551695289', null);
INSERT INTO `y_admin_log_datas` VALUES ('187', '187', '96747cdezsnqboQ+PbC+lp68kUcwxd8H6BOXP828UnulNBJQ8ik', '1', '1551695328', '1551695328', null);
INSERT INTO `y_admin_log_datas` VALUES ('188', '188', '0d6daeabrNxwHElEO+Vsp5uzkrRwGWHWvC+ECWu7tDKbQOkfknY', '1', '1551695331', '1551695331', null);
INSERT INTO `y_admin_log_datas` VALUES ('189', '189', '7d2b8e45dy8lHCOEU3WrJcFb1ags376qotO/gpjncOFNug+FaXA', '1', '1551695359', '1551695359', null);
INSERT INTO `y_admin_log_datas` VALUES ('190', '190', '0083b0b0gPsJI9CivUCtQ+J7AL0iU3GrocIiqje3R8ORjHgtY67YYQRE1HQ3p7D/NsWSd0qt0DL3/8q1TaWjE2RCjNweZNyYtu0lQGfCVmRcG53PZl4DRmtnVcJj9STT1uqzoww/N2yGE5Frpad+YH3xTRd3oOXqpGek88Y0SCLJM+nuStQ2jWJguSCm/BkSG0Z62p1ApVE2BaxCFkxBN43d7BqLTdTCc7zJdgm0OHVKdAqcQsSdp70GyQSnK6FBSS4ETIndJF3FcnVFTqxJUlH3ngHRnypeaRSNu5izSU5mxKNEMwmws1V9B82O1+Fy00AOR8v+8f4E3KjPm8jgPiHVeUKg3trKM99BKFYcgBtXMXSN09xy5PGTMIQ3NvUURB7q+5Ta2WcLCERkx3GgEuTe5McaXb5gKCn/AEsB+aTjM4pXl9Umq3IBL97eUA5N8Wsb+8+3sO3R', '1', '1551750020', '1551750020', null);
INSERT INTO `y_admin_log_datas` VALUES ('191', '191', 'ab097031yvooySk/lEvSl3ju9Ac9yXq/an5xDDp3ypRLSTija1Q', '1', '1551750029', '1551750029', null);
INSERT INTO `y_admin_log_datas` VALUES ('192', '192', 'eff160973UQCZ826HsEBYK6/L9ox50fDav6zyP4RXNva1L/qKOs', '1', '1551750095', '1551750095', null);
INSERT INTO `y_admin_log_datas` VALUES ('193', '193', '3b6f961a/l5se9ZPlPcmppmhFu4fl6Gc0heiZlkmxZoZD2TN+XE', '1', '1551750123', '1551750123', null);
INSERT INTO `y_admin_log_datas` VALUES ('194', '194', 'cf225fe0Q4bvqqj207JJYTONcrY3BejzPwntxNim2Znsp7SajHI', '1', '1551750168', '1551750168', null);
INSERT INTO `y_admin_log_datas` VALUES ('195', '195', '815406c7D/5fLgYJD/bRKL7n2VfnE8VBEn4MK+MiAIMZkpD+ihM', '1', '1551750224', '1551750224', null);
INSERT INTO `y_admin_log_datas` VALUES ('196', '196', 'e22c7fadVP1ZPNesPIZC59albO8Pxqy8n1v0Umx7FVMCZKZZx/A', '1', '1551750235', '1551750235', null);
INSERT INTO `y_admin_log_datas` VALUES ('197', '197', 'd38b6b7cXfUe5/TOFTCgINfTrStSr1Y+VldP6YbY0k2ac/lXiv4', '1', '1551750263', '1551750263', null);
INSERT INTO `y_admin_log_datas` VALUES ('198', '198', '3ced7b97FQzdz7ij8O7t6wv0ONGXMRhlks+P/FRW7JDPSDJ3f9I', '1', '1551750301', '1551750301', null);
INSERT INTO `y_admin_log_datas` VALUES ('199', '199', 'f81021a8HSyselwIpxg/vNgXb9WtnArrdqsF01WzcVL+0RfzZTM', '1', '1551750325', '1551750325', null);
INSERT INTO `y_admin_log_datas` VALUES ('200', '200', '3b5a4e0cGp6yAdJFxztKpU1vSbdmKcqoJ3YkmGP+x7e5gjgGaY8', '1', '1551750340', '1551750340', null);
INSERT INTO `y_admin_log_datas` VALUES ('201', '201', '5ad57e17ITs6DCRYXAKiRhkM1jVmadXajHt2qf21o3YHlTRaCRM', '1', '1551750370', '1551750370', null);
INSERT INTO `y_admin_log_datas` VALUES ('202', '202', '0dc38451o+ic5K94qZiQqiTHwYw4F3RsA1iYQV4AXcJAfW5GgRA', '1', '1551750977', '1551750977', null);
INSERT INTO `y_admin_log_datas` VALUES ('203', '203', 'd8915ac8s3iDDwobSz2cYktecQ3dUlQ5BypGcBXg/nPEzjGrED4', '1', '1551751363', '1551751363', null);
INSERT INTO `y_admin_log_datas` VALUES ('204', '204', '2a43a2729LxvOncXQhlYRTqF4x3lNQ1gPuGKScTTytWZKDtJv1U', '1', '1551751881', '1551751881', null);
INSERT INTO `y_admin_log_datas` VALUES ('205', '205', '91a7bc9eOa+EA+I2FykmFhl+yi0ODGD1fRx7O1c9Ap/AmygqhgM', '1', '1551751954', '1551751954', null);
INSERT INTO `y_admin_log_datas` VALUES ('206', '206', '907acdde76C7dSEJbLkF6d5Gs8TZrCyx6AneOwtqI/0jPOpE/6Q', '1', '1551751962', '1551751962', null);
INSERT INTO `y_admin_log_datas` VALUES ('207', '207', '3ff05f90bvkUL9kUMyEQXHysMjabQGGmFkbUQ99bbt17gdko1gI', '1', '1551751985', '1551751985', null);
INSERT INTO `y_admin_log_datas` VALUES ('208', '208', '639cac888aMqHdx9jmqWsEfO1LRzoT2WbIjHdIpKNKlZN/BsuQg', '1', '1551752088', '1551752088', null);
INSERT INTO `y_admin_log_datas` VALUES ('209', '209', 'd03b68e5Who4sgdumVmX9ODGYxtxUTuXqN4foADWZ31JJPVfB8w', '1', '1551752414', '1551752414', null);
INSERT INTO `y_admin_log_datas` VALUES ('210', '210', 'd1dada66Wm0WmRhkFhCxIeSvzYgmebBVWxIVd41kb+xS0EATJkc', '1', '1551752419', '1551752419', null);
INSERT INTO `y_admin_log_datas` VALUES ('211', '211', 'e95f76aaflESHdTElKM2gt/usQnlxvddj0T4SvONExCIwon3UEM', '1', '1551752523', '1551752523', null);
INSERT INTO `y_admin_log_datas` VALUES ('212', '212', 'd22f900dlD66ja2F2D6RmCmrZCq7w53XGOoZtXTrJKG/NesYuaw', '1', '1551752528', '1551752528', null);
INSERT INTO `y_admin_log_datas` VALUES ('213', '213', '622c7b53RTm0B8fpWFb3BGDgXlni1AGAIZHwRvTsDexsm0YC6C8', '1', '1551752655', '1551752655', null);
INSERT INTO `y_admin_log_datas` VALUES ('214', '214', '71bebe321A43Kr10gCqmECY9o7krmngMsHnZ4q0JZR4WePdxkbY', '1', '1551752658', '1551752658', null);
INSERT INTO `y_admin_log_datas` VALUES ('215', '215', '0cc0d7e9jIIDB+UFzri2ok/6nPaXimf0zjn7xHeKBSIgHXz1iyA', '1', '1551752722', '1551752722', null);
INSERT INTO `y_admin_log_datas` VALUES ('216', '216', 'd734317dZXh1L9huiNE0sAUctHX6KKtEX0VoYb3TF2MHDPlf9rA', '1', '1551752763', '1551752763', null);
INSERT INTO `y_admin_log_datas` VALUES ('217', '217', 'f3516068JS8mET9LDedi+QGfbPrmH68WLynrxc9/eam0NuzdGYI', '1', '1551752971', '1551752971', null);
INSERT INTO `y_admin_log_datas` VALUES ('218', '218', '1571a921L1Rf3R6zmkBbP5rvdc3Zd07TFS9jVH6Vf1uIYMqXJlc', '1', '1551753029', '1551753029', null);
INSERT INTO `y_admin_log_datas` VALUES ('219', '219', 'e495b0795f+39+Z+gD2vNiydOJmXHcvPwymqY0H9oWVx3EkrbfY', '1', '1551753031', '1551753031', null);
INSERT INTO `y_admin_log_datas` VALUES ('220', '220', '36beb1ecpJ1g383kWoouLEOux1E5XM49wftA8FQv/3SWjpxpU4s', '1', '1551753092', '1551753092', null);
INSERT INTO `y_admin_log_datas` VALUES ('221', '221', 'ba7b4c3373HPjfD+yyTR900zazWSuHXKzimHqkSz6UU8qgpG/x0', '1', '1551753149', '1551753149', null);
INSERT INTO `y_admin_log_datas` VALUES ('222', '222', 'acb59962flSeAKs0W37NKyXxzsO2I96oYTEftHaboCe0GuvYNFE', '1', '1551753481', '1551753481', null);
INSERT INTO `y_admin_log_datas` VALUES ('223', '223', '8a1b382bvDD4LdhTarJan8PkCHcT1aFW+jS70M1GQiMHT6zMfwE', '1', '1551753538', '1551753538', null);
INSERT INTO `y_admin_log_datas` VALUES ('224', '224', '0b62fe41kv4O2dB8fy91sMmb7qiHESbAGBkEfCkU2xC7Y7GFEUc', '1', '1551753585', '1551753585', null);
INSERT INTO `y_admin_log_datas` VALUES ('225', '225', 'f24c299442BnLYRNTSod6arnEoI41C4DUPiWjDENT21Ksh6Fec8', '1', '1551753606', '1551753606', null);
INSERT INTO `y_admin_log_datas` VALUES ('226', '226', '796f7d5aOtvUsod45xxrYNn2HpDg8Iz8eIdiqqmDfWCgOnFsoE0', '1', '1551753613', '1551753613', null);
INSERT INTO `y_admin_log_datas` VALUES ('227', '227', 'a3e0ad9apVpaf+AWXoPOBHLGMs0sorN3XcyM4VhIhQPmmdRiK9I', '1', '1551753658', '1551753658', null);
INSERT INTO `y_admin_log_datas` VALUES ('228', '228', '93f67187VfRQg1r5yH/Cr5Z7MsX6NGNPNwSimbLmcyLsyFNDKbE', '1', '1551753778', '1551753778', null);
INSERT INTO `y_admin_log_datas` VALUES ('229', '229', 'dfeff170K9qUObFqiGsXb/CgSf479Oif2cgah6mGtSMQsfUGoCI', '1', '1551753994', '1551753994', null);
INSERT INTO `y_admin_log_datas` VALUES ('230', '230', 'ed9aa3ffzdc2KNGQImljbwQAefhyadagQdTJaWDHMIuHgcNcrLw', '1', '1551754049', '1551754049', null);
INSERT INTO `y_admin_log_datas` VALUES ('231', '231', '8605df49Z1VFybh1VmIQAGvVGtBXZMdgwlzmvCr+r2OUoygsuRs', '1', '1551754147', '1551754147', null);
INSERT INTO `y_admin_log_datas` VALUES ('232', '232', '4c099fa00x9NXQ+XT4DHHkhEuAVnt2Y5N1DyGw4ObeL7dz16K+4', '1', '1551754541', '1551754541', null);
INSERT INTO `y_admin_log_datas` VALUES ('233', '233', '7b22db2aio3RAYk6b+xaDVlmheiaBwLDHj2Vdq0sYFqQAYGiTT4', '1', '1551754635', '1551754635', null);
INSERT INTO `y_admin_log_datas` VALUES ('234', '234', '8e64e710u9Qv/8DSN3vyCkvTfxQaJo+QX5LH6G9CFLnkeGXlYqQ', '1', '1551754723', '1551754723', null);
INSERT INTO `y_admin_log_datas` VALUES ('235', '235', '1a5ff6a9up5Y1897vlsOcBkXL4igYyMieGzWHewFOkC5NXB89ec', '1', '1551756332', '1551756332', null);
INSERT INTO `y_admin_log_datas` VALUES ('236', '236', '93e2b4c7wEIbmppHch8JtOcjxpXFxuSytJrygVQx/hfat5BLnYk', '1', '1551756543', '1551756543', null);
INSERT INTO `y_admin_log_datas` VALUES ('237', '237', 'd597109beG3HCjToaUW/KhdU2UzrWObVR7CaFRdXppy1+P7P2ys', '1', '1551756771', '1551756771', null);
INSERT INTO `y_admin_log_datas` VALUES ('238', '238', '0250ac13Rawoxl+yk3hjxhqXkiiDccuoSL9F+T7ofNhLEn4bLFU', '1', '1551757392', '1551757392', null);
INSERT INTO `y_admin_log_datas` VALUES ('239', '239', '2c9676a16lm472jm4NIP2VhW8ZF5FZ0CxtXU+ep0VpokcI5tTwk', '1', '1551757418', '1551757418', null);
INSERT INTO `y_admin_log_datas` VALUES ('240', '240', '1111af8acdyh2DzzhYHaQfuxDG5I5K9mtnbQECzXr6Ct0UedAmk', '1', '1551757662', '1551757662', null);
INSERT INTO `y_admin_log_datas` VALUES ('241', '241', '026245284zlLohv3XgiQIDNWb+Rgv0SUKJXRCLxL/PVi1a6oSN8', '1', '1551757689', '1551757689', null);
INSERT INTO `y_admin_log_datas` VALUES ('242', '242', '764ef8beOCm2BNufb5fFbd5ZlcfHrrA9TZO3QW/GILn05NWcTS0', '1', '1551757826', '1551757826', null);
INSERT INTO `y_admin_log_datas` VALUES ('243', '243', 'e4d1fef9h2an8mIlVU4CKD4xFpCPRWt9W0dazPY6PmxTDnK9GQ8', '1', '1551757888', '1551757888', null);
INSERT INTO `y_admin_log_datas` VALUES ('244', '244', '7af29e706fVuZ0+ZPtUqjPwZFshpmY0fcxm00pEYwyNy7C3oBZI', '1', '1551763810', '1551763810', null);
INSERT INTO `y_admin_log_datas` VALUES ('245', '245', '374ccc1593QoYaY6JVvuqpTNuw356EUffwwSdkOUg3iaHZ93n9I', '1', '1551764971', '1551764971', null);
INSERT INTO `y_admin_log_datas` VALUES ('246', '246', 'fc5720ce0Y9X6BCZzVbToumtEJUfmM6VKQ5J/B/NrCl6mxtIxEA', '1', '1551764991', '1551764991', null);
INSERT INTO `y_admin_log_datas` VALUES ('247', '247', '5d40b579OFy79/AJR8vk1UUnFk9YJhqfn2rMvqXACKNYYcasI/U', '1', '1551765032', '1551765032', null);
INSERT INTO `y_admin_log_datas` VALUES ('248', '248', '985ec0545PUCRNQmhTYfcDPde11Mqv4cyHTUGH8YVnG3tV3wkM4', '1', '1551765325', '1551765325', null);
INSERT INTO `y_admin_log_datas` VALUES ('249', '249', '4968daf0AuVGq5e3pZrrtRKaj6udbgRUt5QlI+XV+wHGjThSLp4', '1', '1551765485', '1551765485', null);
INSERT INTO `y_admin_log_datas` VALUES ('250', '250', '89c5d027HBapZPEK386hcmmQAAvsQ6bZr5g33TRBpcM8gWhFwuo', '1', '1551765512', '1551765512', null);
INSERT INTO `y_admin_log_datas` VALUES ('251', '251', 'd4e0c063hWDpb20wsz5ksxwGYBU25EDlGRgtBLV8I6k7cULuq3o', '1', '1551765590', '1551765590', null);
INSERT INTO `y_admin_log_datas` VALUES ('252', '252', '4ae1ed3bMal1rCnCOLwy3bSArq8hZozuhnesEBRuOyaV8MyxZEY', '1', '1551765663', '1551765663', null);
INSERT INTO `y_admin_log_datas` VALUES ('253', '253', '72991238eyc2ENgo7nvHarUeQH1UyYEoGNgEcep9LWXE5BO0GPo', '1', '1551765663', '1551765663', null);
INSERT INTO `y_admin_log_datas` VALUES ('254', '254', '39e620b7yelhW1DJufQQ7r1/tU79r0tRRyUwCZP9H6po/BQxFHE', '1', '1551765708', '1551765708', null);
INSERT INTO `y_admin_log_datas` VALUES ('255', '255', '1a93f967vQcj8x1TDxhfGm08ioVX3JzQEiFPeO/GgbfYuCj5jWU', '1', '1551765752', '1551765752', null);
INSERT INTO `y_admin_log_datas` VALUES ('256', '256', '57acea2fnafcI9hQ1S+siKFm9zUXCkW8eEsE8eltwlddu9ryXWY', '1', '1551766705', '1551766705', null);
INSERT INTO `y_admin_log_datas` VALUES ('257', '257', '2c11581eQ9m9wnItvJ+/cxn1j/IPw4IuNjVcx2Se1YkWGo1VgWw', '1', '1551766725', '1551766725', null);
INSERT INTO `y_admin_log_datas` VALUES ('258', '258', 'dea2cd6bqEOT/cjKcC4V4l/9TycSD8GKNh3PQWGum/rHdT5qFmA', '1', '1551766888', '1551766888', null);
INSERT INTO `y_admin_log_datas` VALUES ('259', '259', 'd58d94dc2IyEv7gOam9rzHhLVAQfrXbmTuKaQ5AL2xgpn5mUVzo', '1', '1551766953', '1551766953', null);
INSERT INTO `y_admin_log_datas` VALUES ('260', '260', '9fd1c1e2tK2XvPUaqVS1CGtQSj2GHda0R8lICO0m21febBKj8Is', '1', '1551766956', '1551766956', null);
INSERT INTO `y_admin_log_datas` VALUES ('261', '261', 'bbe43a92wctJOXbT0p3vz4vXFGhKsfvhZA12coXVsWws/5GxfMQ', '1', '1551767404', '1551767404', null);
INSERT INTO `y_admin_log_datas` VALUES ('262', '262', '12f91b0aGu9rXHGktOsPE4mMjM94ksJDyVfUoNO/iiWZtVVnfdM', '1', '1551776718', '1551776718', null);
INSERT INTO `y_admin_log_datas` VALUES ('263', '263', '83b620d6JOGUkbTkb9Xz90JbzZ9qpO5Gqw4Rx0bqQQ2dSmzH1jM', '1', '1551776816', '1551776816', null);
INSERT INTO `y_admin_log_datas` VALUES ('264', '264', 'ac5278dcoN4VPPPLcE0oy1rhn+g3T87r8wNbOC/n4u7DzIeOuFU', '1', '1551776852', '1551776852', null);
INSERT INTO `y_admin_log_datas` VALUES ('265', '265', 'c3fb7c235FPxeN4WpmZPe5oC5yneGdIE/EJ9AWFNZvri+CK6n78', '1', '1551776960', '1551776960', null);
INSERT INTO `y_admin_log_datas` VALUES ('266', '266', '2c996917p1sSWu827V9qmW/LWgIz0kO1g+W300Rh604agiatRMk', '1', '1551776980', '1551776980', null);
INSERT INTO `y_admin_log_datas` VALUES ('267', '267', 'd7e19661NipOK4k0JpFh+gEgBObnDDnQNctttQ7Oiyq6JwBPgnQ', '1', '1551776993', '1551776993', null);
INSERT INTO `y_admin_log_datas` VALUES ('268', '268', '1fdaf39ft5RDcKE+uGWMH4ScciRxHCfiNlq3eL8ankOuuBV3lgc', '1', '1551777026', '1551777026', null);
INSERT INTO `y_admin_log_datas` VALUES ('269', '269', '59c3f166BwnAxIfXVVB6XFWA3ZemNdsITz+9zLKfsTrclDdG0ss', '1', '1551777037', '1551777037', null);
INSERT INTO `y_admin_log_datas` VALUES ('270', '270', 'df0f94b7C5RVcIpqWQNqXKvr51i5J/I7ndE9MmiyTDUjZa906yA', '1', '1551777197', '1551777197', null);
INSERT INTO `y_admin_log_datas` VALUES ('271', '271', '2d738af2bHbDCINI/TsKT27hXlZ4vO38hbUY/r4T9VGy/4re8b8', '1', '1551777240', '1551777240', null);
INSERT INTO `y_admin_log_datas` VALUES ('272', '272', '6aab466ckaZtupl1E1qokJvgQz8Pr+3gF3HNsBO0kYjv3J/riSs', '1', '1551777255', '1551777255', null);
INSERT INTO `y_admin_log_datas` VALUES ('273', '273', '1a1dbf72oLuBQSBkeikrzsMqfBrwtocLmdzQwLg7EvEQHlE2m8Y', '1', '1551777307', '1551777307', null);
INSERT INTO `y_admin_log_datas` VALUES ('274', '274', '6aef1ed8T0/P4LV0QClmZWb1pKNs0cyBij+/8PLmfir1nyDWdLs', '1', '1551777316', '1551777316', null);
INSERT INTO `y_admin_log_datas` VALUES ('275', '275', '7f636d8aldJFwRGCE41BItpLY44wv0VWKtpdSQGFMMYWoOZIeYs', '1', '1551777348', '1551777348', null);
INSERT INTO `y_admin_log_datas` VALUES ('276', '276', 'f6e38087DES1t0IYArp3IDhZ0LGQ5Yi5BNJ7/EDv214Y9wanEkE', '1', '1551777737', '1551777737', null);
INSERT INTO `y_admin_log_datas` VALUES ('277', '277', 'b50372b4/K2EU5ApAmcUw73N/MaB1fHZNB3S09eq/m2qTBrmrPU', '1', '1551777775', '1551777775', null);
INSERT INTO `y_admin_log_datas` VALUES ('278', '278', '5999ca95X8XLp8XG/XY27MI808TES2AHtL/egy7A1OhpCYQ65WQ', '1', '1551777831', '1551777831', null);
INSERT INTO `y_admin_log_datas` VALUES ('279', '279', '90ed9cedvTO1T3rYbWQMsQnPgHDe7ebpSeNFG5LLuQDNo7Fby5A', '1', '1551777856', '1551777856', null);
INSERT INTO `y_admin_log_datas` VALUES ('280', '280', 'd018f059pcR23dTxJtynmDXc65CRIp5BRapFZDBCfpekjMJ32m8', '1', '1551777872', '1551777872', null);
INSERT INTO `y_admin_log_datas` VALUES ('281', '281', 'f668ff03CkmCk3SpDydUgf9eeu7RRzE2V699Ezx5GcJfa2jg1/0', '1', '1551777874', '1551777874', null);
INSERT INTO `y_admin_log_datas` VALUES ('282', '282', '24b3633b0mn3wfIl5s1x4WpnQNQVatHjbQrJm3C/rijVulszsjzNuxhXP5+LjNCCt9Jm65P/Kevmg8xuXgR+bDZaFkMfXDxvJkf8QoJgVhpaYl75lQivpfotF1UpDxF7yLNQO0fn7JEGjpvwhqwLuYiHmD+GYVdkdTS7IoqVnQeMZDk8Cbs4RVTwiijnrrq9D5H+ZpVJmQ976VEOKGqRTUNbxGsPcCl4kEs4/1VAAuzIhZb/RgBrw0oTpJvIaW7dCN/CqFaJ4kU0HX/dLly/83rGLBNZQKHoU49zP2hukEJz17oZTnLqO7/Wg4LEojYq2Qqw6Fr+wyszOdlZoPF2ABL+b2O2rcUwIZ884PJsP9guMKRepBE1DSMUilFMPi3ZSNHiSiTWFDNbRVhLRDH1/0Vp2n3VLsbllYHI6k9KHiAhRwt454FXVfPkcclXdXEpkB2VUyl6KJM4', '1', '1551778596', '1551778596', null);
INSERT INTO `y_admin_log_datas` VALUES ('283', '283', '65390772aT5vP2aHxaVl4+A8uMdfYuwL6clKlwduChMk/3/BEv4', '1', '1551778640', '1551778640', null);
INSERT INTO `y_admin_log_datas` VALUES ('284', '284', 'f7f702b2lmPHQjy2lXIevuqvZ2NdrVXfEbGZfGyI14vpHizlcis', '1', '1551780021', '1551780021', null);
INSERT INTO `y_admin_log_datas` VALUES ('285', '285', 'b412fb3aCg1hQ4ZJtdscxIhky+xrKcL8Ob5EQcU1Za4tdmJBAcA', '1', '1551780610', '1551780610', null);
INSERT INTO `y_admin_log_datas` VALUES ('286', '286', '65a84c52a69vcGGEu41dRuku6hP6ceJmvCy2KZQp1n1zCXQY5kA', '1', '1551780614', '1551780614', null);
INSERT INTO `y_admin_log_datas` VALUES ('287', '287', '5e7be85diWkaA7xjN7OQyU3mS6b0FUvJ+HAZjEDmyVGw2lDX/QQ', '1', '1551780615', '1551780615', null);
INSERT INTO `y_admin_log_datas` VALUES ('288', '288', 'a2c56fadyVrRTK4NaAHK3qrgiG6ILyKrXZVGSF23HvTSec9zSyY', '1', '1551780690', '1551780690', null);
INSERT INTO `y_admin_log_datas` VALUES ('289', '289', 'cec5b26a7JSmo6NxT3JPHKuYSBmPKS2QJQhT9uCDHfPDU8aMZEvnOb7qgOx5vZq+ZtPEyuo5ncN3Z424YqDAmJQBch8H7SWDmxQdiOaNqERGY6OCOO9727ypkFnvaMLzdg6cP0qzQyCjijrTpLNacmeWrlShEj64X+HiNaeZST0BNqnB1UsBv5gZpPz4A0UdB7tjkvZhyo0fo9rDlq4XMHcfxz++Celf5TFIjXleQHGZkumAtD07LdDVE2lRShZBfvXluCir6atZjYeuaXLPKkQghAW6uB/drsSHlHoum26HPkT6S4qUlzL8Gg4803ocBreb43nn/MZPDiohkIBuUojPugaSSZBH5DxsjcjitgBWAgjrN6jc6E5k9St2bcuALnIPR8rsqaOFEtPbSYYMRvJ99yItGJWpx9fKVFXYnoN3WmICb5Cu1yxj7WQzyoX+QB+HePpNX/VR', '1', '1551836105', '1551836105', null);
INSERT INTO `y_admin_log_datas` VALUES ('290', '290', 'd5e6bc230PA0V5ZsuxELyc4y+se6Tltzt3CMm2TAIP6Y/BSqDR8', '1', '1551836114', '1551836114', null);
INSERT INTO `y_admin_log_datas` VALUES ('291', '291', 'e978aaf7/ZeF4NhLVMYVNtrZgMk7ip+FHG468uVbYPxaudDwP30', '1', '1551836116', '1551836116', null);
INSERT INTO `y_admin_log_datas` VALUES ('292', '292', 'c151521dGsGCycU7Ojo6bcL0UDn0HhXjPPQZgXkoz1Kp+vg6new', '1', '1551836119', '1551836119', null);
INSERT INTO `y_admin_log_datas` VALUES ('293', '293', '2471dbebeuGJ9gIhVVrU72QJqdtqlkC/u8/rV5TidCCC5R37nJI', '1', '1551836302', '1551836302', null);
INSERT INTO `y_admin_log_datas` VALUES ('294', '294', '1f417a306QsB+eQPDtb4+ygmG+AS9ywu2ZFFKcYZxJ3eBrBGUHc', '1', '1551836309', '1551836309', null);
INSERT INTO `y_admin_log_datas` VALUES ('295', '295', '936df72fuepYe233vV7zBkQ9sXmn7BUTiIBEzqE2/+ICCwsQos8', '1', '1551836314', '1551836314', null);
INSERT INTO `y_admin_log_datas` VALUES ('296', '296', '50afa1aat1b5+2jVgzi366iH6cQcPoSTRHJGSsDdLso3Xn4Yn0mtwsq13e1XmBU2T5WcEJey1S7sVEtVsUriKIftYCi9k8AmS2WJpeJzyR9EMejC6uzQ1FSoDCeCT/oN+xF/qOh2r71lSKQIHBpCz0TiG34qxfsv2S9BtOalOsSy1dHHqCFM8muuROuqlc8VfCuKH97voCslioiMyZDMv4RZm06nMOyYovwIbX5sf6f33q072vhp4Tqvi6F9qOZlyBgXDfvvml44bObqeqahdINbNXSaraMPBJlWgs4SlzsUJ+9y4G19wG/tKNRocINbdAKzG5P+0QQzaYkyjpfnT43ar0Ho25Lrst8hDqWD9zzMBUCAw8fTAp8sO4w+1QCLy/k1+mIbv13n0r2Zw/Yd2Ws4uipqJvBz16miorb0oe9z2yzYhMF7Dw', '1', '1551837498', '1551837498', null);
INSERT INTO `y_admin_log_datas` VALUES ('297', '297', '1bd3d01c2SjUmYO4x+AbbQ7oin02dId7NMIkJP+r6dllIQ2ue3n2cdOZsWWrdLH9CU1phzllUkwTdX/4IY2Lv0d8Wj98LaK85Eb+XzD0YjC9a8pmTcMjjxV36UKvjDWkOgSC3C73NsEmbHvXn4G2jVRXacVmUNOqv+cHRDXMQ0OOt+NLUiFLuzGahVx8I5p9BvHeCYU9POU9zcGIfFXmFK0AaivJXnR4xlJA/zkJ+5NWn/9HbOZdJXpSQ8OeCLfI9LpoqrTtc6iRdlgh03TUiLeJJAIBh9O7Ry7BsfIrWqNwt2uK+NarW9oHMYoMs8v6LNBuhaysaM6djiFu9fdrjOfRYqQ6I92GUbI8JmCRYf9Q0eApBgN400VdNWi/eiLmUF57D3hGtWkG8kyUYkQjtB6QLMLg9z1SQZzzeZ/E+MJVfxrOf4s', '1', '1551837680', '1551837680', null);
INSERT INTO `y_admin_log_datas` VALUES ('298', '298', '5290a03eUzAexdlCgM2hjqOf7KeCvTNga5vZQQtdiKlPd55jZLw', '1', '1551839167', '1551839167', null);
INSERT INTO `y_admin_log_datas` VALUES ('299', '299', '7f353319VidFe7/jld4gCSMbeKqNUcNoYS4mg4HufgPJrNLBVE8OLExdWIS9aY1XxYm2MI6PCz3FFifrL2kzdSRVL+KsuoQXJfTMXX8oRYthajTRDUbFkG5xBxFM6GGnRs5YL7r07qNP2xqe4cwrnojk18Voge4M2PnDw69NRq9UB7ql4UviGw4wA0jM1mnB+hxkROXYu9iZOMeudKGuVGIpzyPdgYSp5rlPUxVEXjYW6QnKBPcofROXHZDEmnuI2LE+CHI4ZzH+CUP1iqGrYI/ENqw8r7A7kl2kakI4b4irz9HK4IW/R+JLpnKDQ5po28z/08sMzrFy5M49fsSIAHtcsdViBqEs8ow71rzwtN6DGSQKLi92TtqklhIbVczWzlZl75WfTC0nn6XRWgPMJveHmdvrnLTmeZsSCEx6woeDAbKG4giRcDsxL8iVaKx5o2w', '1', '1551853531', '1551853531', null);
INSERT INTO `y_admin_log_datas` VALUES ('300', '300', '6aa91815msdrGZKhtMDXuUGUu6yI9LJcdefTqMtAMaIoCIxVS/w', '1', '1551854173', '1551854173', null);
INSERT INTO `y_admin_log_datas` VALUES ('301', '301', '778f5293RLqkPF+t4MEgNRIC/fmm5BLRZyGQ72D+KXCDKhIYjkU', '1', '1551854256', '1551854256', null);
INSERT INTO `y_admin_log_datas` VALUES ('302', '302', '05241c63s8/+ei87vYKShfEvfFW8P5hr0wqEjcIbuPP3tUl4b+4', '1', '1551863294', '1551863294', null);
INSERT INTO `y_admin_log_datas` VALUES ('303', '303', 'd2cad5489X+RkP0KR/jFSrS4TD7SgqYXYYu2pnSWniU9A907Qe4', '1', '1551863382', '1551863382', null);
INSERT INTO `y_admin_log_datas` VALUES ('304', '304', '6dfcbb0bXCg4kU8Je1OVW5nnM4nmQhaK6NU8E083rsfsMIDzimA', '1', '1551865464', '1551865464', null);
INSERT INTO `y_admin_log_datas` VALUES ('305', '305', '255619fdOZIyiQ8W3RQZUSnC3tgXjTJmKAbOFuIkPDWQZdLPUNE', '1', '1551865530', '1551865530', null);
INSERT INTO `y_admin_log_datas` VALUES ('306', '306', '92a8a253AWs6nwaFWcsYjNnWzMCzWa4ra9CIsKGUwSls55LfgBw', '1', '1551865545', '1551865545', null);
INSERT INTO `y_admin_log_datas` VALUES ('307', '307', '57838075jzPeNWGPlic8W0YJ70tA4vpLevNOAi3ePoKbxkgKuNc', '1', '1551865549', '1551865549', null);
INSERT INTO `y_admin_log_datas` VALUES ('308', '308', 'e3abfa00DsoWZHcMkcPVaUNcf6JOtFx5FmRthqUBtubdCDxeg/Q', '1', '1551865567', '1551865567', null);
INSERT INTO `y_admin_log_datas` VALUES ('309', '309', '85d9d6d2v1CtYMkRb+ez4GJxpt6lzwOpfAo4DLkZ6neRr4urF/g', '1', '1551865576', '1551865576', null);
INSERT INTO `y_admin_log_datas` VALUES ('310', '310', '71d16438/+/mxaorjXsXLQ6P3230ZSupwcd2eRXpylTX5nWShuw', '1', '1551866318', '1551866318', null);
INSERT INTO `y_admin_log_datas` VALUES ('311', '311', 'a5c99822sjWSpbMJQzQ87z0yEHDiCDFGMzeUzOgV0L9KWuM1QeE', '1', '1551866360', '1551866360', null);
INSERT INTO `y_admin_log_datas` VALUES ('312', '312', '1ab98aa584YyZrVu0l2oMjbJ3B1YGWwFX0oGUpYeQCR4W4agWxg', '1', '1551866386', '1551866386', null);
INSERT INTO `y_admin_log_datas` VALUES ('313', '313', '74bb3409Eekf6pFUd6JyCcvHV01zByRHDNhiKJmw1iUnCgyX9CQ', '1', '1551866614', '1551866614', null);
INSERT INTO `y_admin_log_datas` VALUES ('314', '314', '603e02efrJw4HQif6o4yDmR5UPq6lmj0TX2uacdKn3TD6M3GQZs', '1', '1551866620', '1551866620', null);
INSERT INTO `y_admin_log_datas` VALUES ('315', '315', 'eaaff252OK5X728UovMAoo7SUWIjxQci5Hcnx4a49npbUaAWLwg', '1', '1551866749', '1551866749', null);
INSERT INTO `y_admin_log_datas` VALUES ('316', '316', 'a97bcc15ZznFneFR/BVRgDgRQieduULkEEw7UbslYKB7B7QL1Rg', '1', '1551866760', '1551866760', null);
INSERT INTO `y_admin_log_datas` VALUES ('317', '317', '946e71d77E4BTSxPAZSdksvIxQWyyElmjGIxBGsxLVg56fKkqnM', '1', '1551867358', '1551867358', null);
INSERT INTO `y_admin_log_datas` VALUES ('318', '318', '0b32f093M7LY1o1EzwhYINbRUULmRmHA7/ZZETssrh7EORHw9QY', '1', '1551867396', '1551867396', null);
INSERT INTO `y_admin_log_datas` VALUES ('319', '319', '8f4d0107t0kNObthvA9/5banoyQdYEnyWApFdR8s73i0+SMJIqo', '1', '1551867407', '1551867407', null);
INSERT INTO `y_admin_log_datas` VALUES ('320', '320', 'e5cb4e6dIHQNMWeCTwRVFGn/3BuUD3FTtKDpNPJp7kAVNle5ggc', '1', '1551867550', '1551867550', null);
INSERT INTO `y_admin_log_datas` VALUES ('321', '321', '037d2ad2/SxcggC5GaWAcITS6+g55JVHIA0bB6BZ/FyP5BFzKII', '1', '1551867553', '1551867553', null);
INSERT INTO `y_admin_log_datas` VALUES ('322', '322', '43b449b1ONZi3hl3bfGSiSx/MeWvMf0k7ZypNe95eUA9yamNZ9s', '1', '1551867592', '1551867592', null);
INSERT INTO `y_admin_log_datas` VALUES ('323', '323', '695a492ctIr4r6bmRggGRsAn0v+HV7GyIgs+fjkAsH5E6hYdsFw', '1', '1551867595', '1551867595', null);
INSERT INTO `y_admin_log_datas` VALUES ('324', '324', '60a4d31f2vmhwCR4BS4o3oA5+UWCRS8VFLTTulPcMaLU5vDvr3I', '1', '1551867646', '1551867646', null);
INSERT INTO `y_admin_log_datas` VALUES ('325', '325', '7dfceddeUf/pnaTdLMvR5pzZT+XHkoobm1vyTJ/IbNVqjX0AP5I', '1', '1551867651', '1551867651', null);
INSERT INTO `y_admin_log_datas` VALUES ('326', '326', '0995c992MJyWQvANwTxvcJ21XEVt6TL8g0n+yQH/SPgDfEH8XUM', '1', '1551867658', '1551867658', null);
INSERT INTO `y_admin_log_datas` VALUES ('327', '327', '65d485b4V94oyiNWMZxAf+0zYyAvx1KJRfxzb1/Cif1dEbsT7HM', '1', '1551867734', '1551867734', null);
INSERT INTO `y_admin_log_datas` VALUES ('328', '328', '588a2702DMCXnF3Tz9Z23Hes5RrNddNQK3Dx73l5Hk/udcvcZZI', '1', '1551867780', '1551867780', null);
INSERT INTO `y_admin_log_datas` VALUES ('329', '329', '6121c555NeT/GYMZqAze0ExJolpGKiVnr3izbLqs1QmZEmRkmfQ', '1', '1551867787', '1551867787', null);
INSERT INTO `y_admin_log_datas` VALUES ('330', '330', 'bcac4cdahlSwg766JftY2YWXLPxDwcM4NKJT4IDi2IsGsIbRN18', '1', '1551867946', '1551867946', null);
INSERT INTO `y_admin_log_datas` VALUES ('331', '331', 'e0118a7609XPz1vnr+8dzxQZ1NSXvcoaWcdDBU1o6mpJJuMGyD0', '1', '1551867969', '1551867969', null);
INSERT INTO `y_admin_log_datas` VALUES ('332', '332', 'fd02eb91tvwlFZkvjPE8CBfq7PeXHZfbWqjhNgK4qPlMgvcX340', '1', '1551867971', '1551867971', null);
INSERT INTO `y_admin_log_datas` VALUES ('333', '333', '98269e52m4VlbspVbG0PBmJXiJOXD3FDAuJwR3Q8gvSxFXhf0zw', '1', '1551867976', '1551867976', null);
INSERT INTO `y_admin_log_datas` VALUES ('334', '334', 'b0f74495fAAGdFz76hnysGIDTcFGGehe51KV/5ov/5AKA4xXPrA', '1', '1551868009', '1551868009', null);
INSERT INTO `y_admin_log_datas` VALUES ('335', '335', '632725bd9ZLGh3rwmjxmfPeuSl3IguocasPnNPczjnJHIf4PLhg', '1', '1551868043', '1551868043', null);
INSERT INTO `y_admin_log_datas` VALUES ('336', '336', '462c3aaaRYDL3CAh7AOkLH3brvRTRXBsPALrCQPQSSKFvUpMCfQ', '1', '1551868108', '1551868108', null);
INSERT INTO `y_admin_log_datas` VALUES ('337', '337', '762d5fb4Zx4uCrp25JWH2JUX9wCdasOCmwwuN3rYPqE7ubYXec8', '1', '1551868111', '1551868111', null);
INSERT INTO `y_admin_log_datas` VALUES ('338', '338', '485a7dddPBtMbW85uP6IVWemV8OtSZHQZj2utGaZAhsCPZ3c9HE', '1', '1551868137', '1551868137', null);
INSERT INTO `y_admin_log_datas` VALUES ('339', '339', 'fc29aca0hBLQ/qqOqb0SaWloTyGLSjXpuyDFE5qdxw1z9D2b0vY', '1', '1551868163', '1551868163', null);
INSERT INTO `y_admin_log_datas` VALUES ('340', '340', 'e69db420hNj7yccpeNMLDY3JmBWzU7opmzUGzFm9xcbLta7Nt0k', '1', '1551868197', '1551868197', null);
INSERT INTO `y_admin_log_datas` VALUES ('341', '341', '7ba25584xrFZdtHFEdz6qirdl9iZsWz8qqmwnbfHEke6GWhIp3c', '1', '1551868222', '1551868222', null);
INSERT INTO `y_admin_log_datas` VALUES ('342', '342', '13224e15sikagFJwvreBf7SOBu83QT8+eP+HseXBPOTtV6W3j0w', '1', '1551868271', '1551868271', null);
INSERT INTO `y_admin_log_datas` VALUES ('343', '343', 'ecf63d35bJ+xmApFU0PLFLEDQAAduD0bzVvvUPOBZ3sy5rFKtCg', '1', '1551868281', '1551868281', null);
INSERT INTO `y_admin_log_datas` VALUES ('344', '344', 'a6197c28P47yvuGoeg/kqaG0f3pfHvzlk04MZd6ooJabEeo0138', '1', '1551868306', '1551868306', null);
INSERT INTO `y_admin_log_datas` VALUES ('345', '345', '6a5f699eI+LorytwiNGgAzyhepm5Ci+Sf2hwN6IozKyKz0rN4TI', '1', '1551868315', '1551868315', null);
INSERT INTO `y_admin_log_datas` VALUES ('346', '346', '0e0c6cdfQi2gSplBq8w3tJ1tvQ/oBH6o1yHMCic+rTOg+VxOE8c', '1', '1551868319', '1551868319', null);
INSERT INTO `y_admin_log_datas` VALUES ('347', '347', '1075a7e68lcu7XJFBm0+UsQ+N+A1c4hVl0wVXyQ5EbtZWAUAlwk', '1', '1551868492', '1551868492', null);
INSERT INTO `y_admin_log_datas` VALUES ('348', '348', 'f1d86682Eqnl8E50vTXfW4gSEIy/Z47EfplxIxT+1z5sb7vTM0o', '1', '1551868529', '1551868529', null);
INSERT INTO `y_admin_log_datas` VALUES ('349', '349', 'd1220b0f55gfoqiYr/Ey/sIrI4jS3JbqqcamrgHY7Yd2SBtXi4w', '1', '1551868541', '1551868541', null);
INSERT INTO `y_admin_log_datas` VALUES ('350', '350', '06db7a0c1KTzqcn5W24ksSb90t5nwehi2SpoL2+Wzrhf1zeEm6k', '1', '1551868560', '1551868560', null);
INSERT INTO `y_admin_log_datas` VALUES ('351', '351', '23e624aaiX4Tjcxur9DAlzVg8jTQ8eUjsxCB/h5w6mbRmBphKHM', '1', '1551868801', '1551868801', null);
INSERT INTO `y_admin_log_datas` VALUES ('352', '352', 'a3e872c5qwu4HKrle4pgF8VmHXE9jMYFlwz/eGV138m5+jxT4G8', '1', '1551868887', '1551868887', null);
INSERT INTO `y_admin_log_datas` VALUES ('353', '353', '6ead81bc5+NRA8i8W67MNFJ0AWQfjb3WjbhngmtcpaDxoihi3tI', '1', '1551868936', '1551868936', null);
INSERT INTO `y_admin_log_datas` VALUES ('354', '354', '67890053Qz6yP57onZIOjNJ6BHGwqJOI55CVyQN/ReMaVpxaUUo', '1', '1551868942', '1551868942', null);
INSERT INTO `y_admin_log_datas` VALUES ('355', '355', '4cfd97a2dgId/Vj1Y1YSndrtZ/Ctc8XsGt7s67qH6o+7J0gzCR4', '1', '1551868992', '1551868992', null);
INSERT INTO `y_admin_log_datas` VALUES ('356', '356', '912733c668hF2J9svOvA3Ql3jCADCgTSX6dtQ700lt4uHTtZ5Kk', '1', '1551869035', '1551869035', null);
INSERT INTO `y_admin_log_datas` VALUES ('357', '357', 'ed64cd1cTe+YfCLs5XFVRyCp03EimLbH5heyxrR0L442Mv2wjpM', '1', '1551869067', '1551869067', null);
INSERT INTO `y_admin_log_datas` VALUES ('358', '358', 'f932fa7aaM0GNIbs3p2z+UuZG0yUPC4GHA4WFVAH9G/dZOeOrL0', '1', '1551869135', '1551869135', null);
INSERT INTO `y_admin_log_datas` VALUES ('359', '359', '615774b6srAbZ4pvfIG8uSCbO/Rh4CL1/3wFGsJpF4+cpuzOZn0', '1', '1551869139', '1551869139', null);
INSERT INTO `y_admin_log_datas` VALUES ('360', '360', '4c68a514d6ne3ILhE2XqGR/n0DF0hof8TN4srzOXFp6uulFCIhYW3vKNhP3oOTao5epLWxOeTCUL3gPSN4cphv1t8WtneagJfeqkK9xma6kgZ+Z21sjxsLppZYZGCMUup8oI+gXzcCi30XDIxXhUqx8BEp/8CGZ2vOk2KwsG87Uuu9req20Ex4hnxigC3z6/xJuAIhRLpmXE5X/aK7wlpcpIyjkwKMZXfKPUSUb+wr6FPKhPARIjxtnAWnxtoL4Io3w5ryGOTRH/0J+0I6UJnFzQuclWkPeoizFawPwFMWgA8krFFpsXUSdtE94ed7ZsiqPONBmWKvngndkfCGWpS+h/cSr0qBYkmSJZJPbhRVlg0d0sDbb3CZ38Sex/+3780alYV/y8RSyLq2kaBBLnI1if2TDWxweW+GxNG9sRDm1VqHozZzJ5fTD79LO3caufvxqddlvObY7R', '1', '1551922707', '1551922707', null);
INSERT INTO `y_admin_log_datas` VALUES ('361', '361', 'b121ff97StZrRuuntkDTZ5V+uUmjx0D1tPZc/kB38ej6pjjVbgc', '1', '1551922714', '1551922714', null);
INSERT INTO `y_admin_log_datas` VALUES ('362', '362', '5271c735AwPrutxaohqIPwOngbNU4kIQfIDN4SpOZu4We6YQQ2w', '1', '1551922717', '1551922717', null);
INSERT INTO `y_admin_log_datas` VALUES ('363', '363', '227822bfBdpYzBpxTuwhRRhhvjPl1At9eK/kaSj1WpH/NULNEr0', '1', '1551922727', '1551922727', null);
INSERT INTO `y_admin_log_datas` VALUES ('364', '364', '45a411b6F62gE+1M3QPbB/AXnD2MkHIZd6UMGyhyP3qBhXQvZrA', '1', '1551922734', '1551922734', null);
INSERT INTO `y_admin_log_datas` VALUES ('365', '365', '703a57f5NXNd7NZYO1mLfTp8gkhKMTJPl9ALaTd9ex1sRWiPOOI', '1', '1551922742', '1551922742', null);
INSERT INTO `y_admin_log_datas` VALUES ('366', '366', '47ef1b113If+9xx82eJsdhBM9rMEX8sFa2sbA4n1PawXRjuTvCo', '1', '1551922810', '1551922810', null);
INSERT INTO `y_admin_log_datas` VALUES ('367', '367', 'f35d3bdetg2vkvsbONoxig5vfS17vEwRalitPAAlci3PyQpc/zQ', '1', '1551922984', '1551922984', null);
INSERT INTO `y_admin_log_datas` VALUES ('368', '368', '9061cf82tuSccg1dqSwn2UnLLuUrhiTgaeyCXbV5yeIvFj8AiAQ', '1', '1551923009', '1551923009', null);
INSERT INTO `y_admin_log_datas` VALUES ('369', '369', 'dc1e9d6d9MGHD50YUhiNJhqi6G5QrffBZ0t3RVbhI2lrFUfKmkU', '1', '1551923019', '1551923019', null);
INSERT INTO `y_admin_log_datas` VALUES ('370', '370', 'acf6f0c1/89I2ZL2IldZs/66eNwh6U5HDXwUIrfWs9XMw2qQYpo', '1', '1551923044', '1551923044', null);
INSERT INTO `y_admin_log_datas` VALUES ('371', '371', 'f45b3cadH80Iw8CG7E5NV270u9NOZjv39Byg9tFy3Zcp1BPE1D0', '1', '1551923049', '1551923049', null);
INSERT INTO `y_admin_log_datas` VALUES ('372', '372', '695edda9cXfsze5+VsSNbrSePjVLkPQdq8onRPRzLs8hoSKGF3E', '1', '1551923058', '1551923058', null);
INSERT INTO `y_admin_log_datas` VALUES ('373', '373', '246d5ca1ECEiIXb7WGbX1HBkMWLgljmYk1MYQqO/RyU8AJhW7IA', '1', '1551923678', '1551923678', null);
INSERT INTO `y_admin_log_datas` VALUES ('374', '374', '9cd66f03xvmLnNttgJHTgD6JzcC9+ysk0NRDQmCEZ6kiQdSRURA', '1', '1551924126', '1551924126', null);
INSERT INTO `y_admin_log_datas` VALUES ('375', '375', '1c87cb91HQEXca9YXQ5w0u/CU4wysjZHqZRqjWLOZX6XG0oClyw', '1', '1551924144', '1551924144', null);
INSERT INTO `y_admin_log_datas` VALUES ('376', '376', '7d1f5f25ERRlXHkSpZOPVElbyDZ5hfev0t7amfJNocbfV0NJ9PU', '1', '1551924166', '1551924166', null);
INSERT INTO `y_admin_log_datas` VALUES ('377', '377', '9967fc55siLC3z1rtNmE8I70HoHf2d6OdUrIwzLtnqLiaT9us2w', '1', '1551924173', '1551924173', null);
INSERT INTO `y_admin_log_datas` VALUES ('378', '378', 'b8081522h8W2Ydo1g7intWyZmMHli6z8uhzU06DT1A5Slf707Wk', '1', '1551924180', '1551924180', null);
INSERT INTO `y_admin_log_datas` VALUES ('379', '379', '661f659fYc5uuFUG1ui3MxaBGWTz4FO+2ArGQvJy0GGdo6gloks', '1', '1551924189', '1551924189', null);
INSERT INTO `y_admin_log_datas` VALUES ('380', '380', 'f1b1a607A5yBcBHnsgvQfCOCv6AcOQTboztA6Ap66+DHugEe79c', '1', '1551924254', '1551924254', null);
INSERT INTO `y_admin_log_datas` VALUES ('381', '381', '77862fbcsAgHR/ko4EppJf2yMqU+DlliZS+nHCz7MaoEONWVq+o', '1', '1551924440', '1551924440', null);
INSERT INTO `y_admin_log_datas` VALUES ('382', '382', 'f1c9b500OCz4YSCYTPZTZDsF9hrXxavTJIz9JZVj6IbmDXrNNiE', '1', '1551924673', '1551924673', null);
INSERT INTO `y_admin_log_datas` VALUES ('383', '383', '722e5b24U5+TL7LRA8RDde4a3IHW319gvZB8nL+L3iO20ZEDN5M', '1', '1551924687', '1551924687', null);
INSERT INTO `y_admin_log_datas` VALUES ('384', '384', '3ed20ad5wGj9xfcLhGHm2pscDuTsRmxDYdrQ/hHq/S8ff/STk6E', '1', '1551925236', '1551925236', null);
INSERT INTO `y_admin_log_datas` VALUES ('385', '385', '0767c24d9fIU6Q72vi/J23nqgeRg1zf/TzVq+X9p39Xa/D2oXsE', '1', '1551925505', '1551925505', null);
INSERT INTO `y_admin_log_datas` VALUES ('386', '386', 'c913cd5aUpWcnbNtgJjeNi/mdd1VvM4NEXAonkWfBcFzkmQEvWU', '1', '1551925583', '1551925583', null);
INSERT INTO `y_admin_log_datas` VALUES ('387', '387', '2ddf7213oO47zKhPSHe3wqQ5CGgVPEYuJatY2NU3d1+27VsANek', '1', '1551925981', '1551925981', null);
INSERT INTO `y_admin_log_datas` VALUES ('388', '388', '1ad30f5dBRCLle1PtEfeKEO+J+lP3K/ziHeLBIbWBpSAwHn4/WmNychpnM8FtxGe/FMt9GvP6xtCpw', '1', '1551925989', '1551925989', null);
INSERT INTO `y_admin_log_datas` VALUES ('389', '389', 'b38fe91fTLKqiIqyS6jVCtMkBlm1sOmlgPRyyDzwNENvDYmnkDY', '1', '1551926330', '1551926330', null);
INSERT INTO `y_admin_log_datas` VALUES ('390', '390', 'a7e4c1b4dY1xPAdjR7WIAz0fgKfNUwYYtOyAmXh68bZ2tDrIfRI', '1', '1551926409', '1551926409', null);
INSERT INTO `y_admin_log_datas` VALUES ('391', '391', '6a56c8a4ZyrvztNHybicYivhlgenBR5Kmtriv/GRGXZqkRW+R5s', '1', '1551926422', '1551926422', null);
INSERT INTO `y_admin_log_datas` VALUES ('392', '392', 'f7254d4fj1p/NxSlAW5b0qaA5TBc5JyA8XscIoyOGYqlBVfW0UY', '1', '1551926462', '1551926462', null);
INSERT INTO `y_admin_log_datas` VALUES ('393', '393', '78b5dcd19YdecriBPj9VSWKLrIE+yGO7dl5YlkGt1NP6ZeYdNTo', '1', '1551926469', '1551926469', null);
INSERT INTO `y_admin_log_datas` VALUES ('394', '394', '19fbf785jXDoQbbrWdX2yBjTkw2NtRMkBqAXcQv6tQwilR7kUAk', '1', '1551926532', '1551926532', null);
INSERT INTO `y_admin_log_datas` VALUES ('395', '395', 'bbc170fe6IwbN0FfG6SNK3FagBakV3ngnYIUOQlyQrIu4PvUh3s', '1', '1551926535', '1551926535', null);
INSERT INTO `y_admin_log_datas` VALUES ('396', '396', '75be646fQ6Tdc9lO6lblzbMNo2kMOtcYyWFJul6QCpTcuv2r78I', '1', '1551926621', '1551926621', null);
INSERT INTO `y_admin_log_datas` VALUES ('397', '397', 'b91b25a8WjDP/C2AkhLwz71QFoRViadYiI/2KrORNwHN1BIulLY', '1', '1551929181', '1551929181', null);
INSERT INTO `y_admin_log_datas` VALUES ('398', '398', '8f8e19adTh0n2ewBHMBwlj6z55vXgrBiwfvxJ/1eGDG/+NVIbOw', '1', '1551929188', '1551929188', null);
INSERT INTO `y_admin_log_datas` VALUES ('399', '399', '546c5bfddBcym4YsYZctqUpwjhuLgWvYMcGWNoU9abtwoyO95lo', '1', '1551931095', '1551931095', null);
INSERT INTO `y_admin_log_datas` VALUES ('400', '400', '4146aad59P3uJd4m7HdxsDdE9j1BBbvYrXH0uUfyRctPAA8eaAc', '1', '1551931106', '1551931106', null);
INSERT INTO `y_admin_log_datas` VALUES ('401', '401', 'a4ef2a70jtKmozwwzJMFeSnJ/e7CXvUAvmfky0h3bHxXPpjUoKs', '1', '1551931114', '1551931114', null);
INSERT INTO `y_admin_log_datas` VALUES ('402', '402', 'd42f66004dmOQ+Kj8elUX3QoE8a9inibNvJeECao0Fc7jiwiPhM', '1', '1551931135', '1551931135', null);
INSERT INTO `y_admin_log_datas` VALUES ('403', '403', '1e7b3aa2XonOIJQ8HqwcFRhQnVKgvPC5rwpcuXk/Y+xHvl1h9FA', '1', '1551931150', '1551931150', null);
INSERT INTO `y_admin_log_datas` VALUES ('404', '404', '1a0601f5GNH+NVD2+6ehrcPC5I55vpPZkKFNQl0v4zroy/fVgxU', '1', '1551931158', '1551931158', null);
INSERT INTO `y_admin_log_datas` VALUES ('405', '405', '7d038dccdN8YhGA3vN3NB8tE3lZQovM3mxJwN+piX/IEBH8b1pU', '1', '1551938631', '1551938631', null);
INSERT INTO `y_admin_log_datas` VALUES ('406', '406', '20264c4c6e886lsFQ+hTID9YP83p7CIw/vqeXOGOiPfZmnCoUEE', '1', '1551938781', '1551938781', null);
INSERT INTO `y_admin_log_datas` VALUES ('407', '407', 'a21abedfX80AXz1DPMMOLVx+IH8YcLcAFJYfw+fO/11yBwp8RA4', '1', '1551939077', '1551939077', null);
INSERT INTO `y_admin_log_datas` VALUES ('408', '408', 'c0d536cc4lEAWnT1IYMcqzxhPqaXrVVylnBPoxbmU5XVig339YU', '1', '1551939156', '1551939156', null);
INSERT INTO `y_admin_log_datas` VALUES ('409', '409', 'feb65fece3ppARR+Dmc3CsGukyZJ0TLzZ1N/R5xGnci1EXW5pqs', '1', '1551939474', '1551939474', null);
INSERT INTO `y_admin_log_datas` VALUES ('410', '410', '47db4a4cC4GFqafybmkxrHpwE8y6Hzr7SA8CPB5VGDhJyKyZOM0', '1', '1551939568', '1551939568', null);
INSERT INTO `y_admin_log_datas` VALUES ('411', '411', '860743c2bj4c0R23pVhIosv7CVzYfZjaPmn6gHLEoB2gv0jYxCc', '1', '1551939612', '1551939612', null);
INSERT INTO `y_admin_log_datas` VALUES ('412', '412', '77795d2cfdQdm9NMV/tPWdea78ZCRpDlfxfOrxpO2ipgS+le6XM', '1', '1551939702', '1551939702', null);
INSERT INTO `y_admin_log_datas` VALUES ('413', '413', '5be81996HK+NK7ZVaxCAZfTguXBYMz7NTE7o2VFNiGNslM1WXuo', '1', '1551940078', '1551940078', null);
INSERT INTO `y_admin_log_datas` VALUES ('414', '414', '05448317/89HpRWxHx0cmFxkWM8PS8bTrZ2Lz2DOqEL9stEiPb8', '1', '1551940136', '1551940136', null);
INSERT INTO `y_admin_log_datas` VALUES ('415', '415', '3be07b51iinTRLrU1iwdTyE2pTHnNExANpQZFrjFS1nseicjrNY', '1', '1551940346', '1551940346', null);
INSERT INTO `y_admin_log_datas` VALUES ('416', '416', 'd81249baQBKAVTSToRt55QFDTxics+ROqQKmRivZ0VD360iCbjg', '1', '1551940371', '1551940371', null);
INSERT INTO `y_admin_log_datas` VALUES ('417', '417', 'fc7cbd1dt8ippLWwxL1wqhdodS5kPckqbio9yJ+Dj2jyUwNgdr4', '1', '1551940379', '1551940379', null);
INSERT INTO `y_admin_log_datas` VALUES ('418', '418', '3e605f63bC6foQwbUfUmXfNuEaw/6i/qLy//7tL4b6URd552RCk', '1', '1551941327', '1551941327', null);
INSERT INTO `y_admin_log_datas` VALUES ('419', '419', 'c8ca97a6kSd/qQ2lscZtgsGnX5Nj29QoqOLdIQysGobSX/7FItk', '1', '1551941335', '1551941335', null);
INSERT INTO `y_admin_log_datas` VALUES ('420', '420', 'e39cd2faa0Yu2gCCbAthU8FPGIIqSSzCqZzo+Jnb7YshozOgQMg', '1', '1551941560', '1551941560', null);
INSERT INTO `y_admin_log_datas` VALUES ('421', '421', 'b8db478e6nCZVHzIKlwHH0JRYueK+Yks+JUIpNWpkrOoc3Vf+ZQ', '1', '1551941585', '1551941585', null);
INSERT INTO `y_admin_log_datas` VALUES ('422', '422', '2305d572pjo4XjFPMuCApkUI0QP4X54hoXqWoHAfjQzuYnSAX+Q', '1', '1551941593', '1551941593', null);
INSERT INTO `y_admin_log_datas` VALUES ('423', '423', '04e283b67FI2B4uIOHtWn+HII4W27tgOoNxyPyxbdCdvj3+PwV4', '1', '1551942201', '1551942201', null);
INSERT INTO `y_admin_log_datas` VALUES ('424', '424', '2a4d93175Bn39XusTBqPphkbB/7NoHIQwR0wUvQg3PfCklFmapA', '1', '1551942204', '1551942204', null);
INSERT INTO `y_admin_log_datas` VALUES ('425', '425', '793910d1HHweRWfPVNFLX6b5V9DsJSy7YzvAlrF129buGPL9wZA', '1', '1551942207', '1551942207', null);
INSERT INTO `y_admin_log_datas` VALUES ('426', '426', 'fbf55dbaoocnZzVJQTrNij4DBDaSocV2wGCQ+lNQZpysLeg1mG8', '1', '1551945246', '1551945246', null);
INSERT INTO `y_admin_log_datas` VALUES ('427', '427', '942b04c03QNbHM9lvbolA2aLLm9zx9SfZLfMIUMUXhAqhrSKyf0', '1', '1551945292', '1551945292', null);
INSERT INTO `y_admin_log_datas` VALUES ('428', '428', 'd89ad481UJqY1y5/S9b/qyVhlW5serT5pZGK0g8cHQWouik6bOI', '1', '1551945879', '1551945879', null);
INSERT INTO `y_admin_log_datas` VALUES ('429', '429', 'eef03edbSa1etJZ+ZENv7/pb7hmmQJpoqqGX5HnNUKxwUJu6eLM', '1', '1551945891', '1551945891', null);
INSERT INTO `y_admin_log_datas` VALUES ('430', '430', 'd1ecc824qaAcKTWjIuG5xC1X+ycd2XLG5VfnG8rzlohW8Ib9ik0', '1', '1551945909', '1551945909', null);
INSERT INTO `y_admin_log_datas` VALUES ('431', '431', 'a0402f43JNhKiUbvFDWIINNOoHszYUAGueOQ5iilXjr5t3pCFqY', '1', '1551946087', '1551946087', null);
INSERT INTO `y_admin_log_datas` VALUES ('432', '432', 'bd2ab5398J6Z6uWOZipBoGogoxnLW6GaAslxIbRsnGxTQO6OXFw', '1', '1551946090', '1551946090', null);
INSERT INTO `y_admin_log_datas` VALUES ('433', '433', '793062e0IabFVsozU0VTcAib/inynKkm2vERwZbKyNMhIrJW3/E', '1', '1551946095', '1551946095', null);
INSERT INTO `y_admin_log_datas` VALUES ('434', '434', 'b72477467tVMYYytLfqkQ6RkSlYYj+DxKwPgkSH/68PqQBQV5iA', '1', '1551946153', '1551946153', null);
INSERT INTO `y_admin_log_datas` VALUES ('435', '435', '763a77ab6GgguYClnPrHgEDLvjl4KXTLfnEeltkzfg6rWZtAlQ0', '1', '1551946159', '1551946159', null);
INSERT INTO `y_admin_log_datas` VALUES ('436', '436', 'd14fc693IANV7IF89feK7N2+4lWaPnX3EPQGOtNKoXSCBQwqaMu2p95xITBkgOQy22CqdzLZEKuBHCPQiYBsDJUvU38vt8NhYBRFZH0PUeFZLScdeYpicb5Ryp1qOCzNEq0oo8XZv3J6kStRP7h9cJZM0zvVtYLHpQN9i7d5hEO8tLgx6rp7Jl20Cz+kNjauzFzLvio2MHBR93dmXEpWvslPR2ndDskuhgGhQGalmYqyyNpPOCvujBw0yTzzzLnVbwYp8tg/5NSpjZQ6cFeEPLAswWzTZuQ+7sH4hK4RO6xtyBsdg4TDuwHyKrLbbrmW42Yk3LbY++q9VjtAxRWonSiEAwujjw9shL+9cMCiQFd+SR+BPxxAQrdIhfCT0iQxx4hA0NgEuEJzLz3A2qR25e7wFG/mVzIlvTBKS2+bPNcGuac8+u6inCXBvVR5SmkfgrCjBA', '1', '1551951141', '1551951141', null);
INSERT INTO `y_admin_log_datas` VALUES ('437', '437', 'c2b94e694kaDEj0Li+94W2rtDOV1j2RPqJmDB1Hzm2/qcD7zFK7eDqbuEOtbTr5zoObOW1N9E3Lggn72ThwoOOx53JnmwrIdAU4MSgLjjdNkp4u1Vi9w5CXAgvOw8ckq9zMY8gNArUZbYWJtmze9KpdIfOq77dVMu9Q1BNMMr/2ycH+S7H9iw2ruqkXsY+/CszCBoVyp7mnRmlXWeoOQOXpJjdhcm64RHFob8zO7fMtazHJ8EF8rXxrcMvQJagz5wFOlazSMALShTtLr9ojOBj22kT1Bl3ET85a1X5hCtSPvECiDJWcaBW5bYpfxZDCxPo6zWk0Y52wxeoxvpU3rhS76oUta0flTnANrzBQPDfhX/EsfYPrtRi7uO1VLPZTrJP93Knry0UNdGMhyRL7PMVTs9Fp0mpWDHBVcVdp0SCJ+qXj0aQqDHaHX6k0qOhT7ofEJtA', '1', '1551951164', '1551951164', null);
INSERT INTO `y_admin_log_datas` VALUES ('438', '438', 'b3b887e8c3QQXRTtgSmvWzTEr+lBDDxTL5/canSkhW5IQNgodSA', '1', '1551951174', '1551951174', null);
INSERT INTO `y_admin_log_datas` VALUES ('439', '439', '30e7f945USjud5LNxOuDrMgrGy4bE/v8/598yiRbAEuCg+PbuFk', '1', '1551951183', '1551951183', null);
INSERT INTO `y_admin_log_datas` VALUES ('440', '440', 'f6c23c0f/fph9J5H4jzDxh7huRAW3NwM36l4JedwOulxis5kwWI', '1', '1551951186', '1551951186', null);
INSERT INTO `y_admin_log_datas` VALUES ('441', '441', 'df8c015a747Thqb0uS7gTpv2jhS2c0RlKzonKh7hBPWeVNcaUaw', '1', '1551951191', '1551951191', null);
INSERT INTO `y_admin_log_datas` VALUES ('442', '442', '5e1172afw+GYv0zv1Cz+NDp+AbFS/JHnmeI1FOqnTNrKISZskLMJ5Rle45vXjgTvvYC3n4cwBjvQSwBMGXzpdSHo6MOiNZfbg+Gukr1D//B+UT6cyjTlaapYzJlkICy0yvY3WcT94itSDdOHnmDwUbd4yaQu8AVdb9PgSFQk30Kay0IVFhxgBfGqFf2Ig9uOCk/wmSI8sw6NSsXIRRkTI+fKtyzjDwRuAH+jw+szjt57xD0CUtn6jwWn8csWT8mbxeYryAxnRnQVwAcRsWA/j24KG+EOd16/QLuH6azTcEALvCStKUO8gSMWyaBag1jwyM7cSeUo1cKm6ysWV/G/yYSNcUvI7KGimv3El69LOMQtHaucAfKrq33EVrEvTm0nEWe+8RYAtZNvWSqUm37T2gRKt9m2Xz4I6eXwwduLP7O7M18OnPtd7mX5rgLV0Tpw2W+X/lQx/ANo', '1', '1552291757', '1552291757', null);
INSERT INTO `y_admin_log_datas` VALUES ('443', '443', 'f3ff60d6RQNzI8owa8J4tbPwPXOSeJLzmG2M8TnGRPtVRNtnK+g', '1', '1552291781', '1552291781', null);
INSERT INTO `y_admin_log_datas` VALUES ('444', '444', '22933d115QOsbs5rGkCFbDODSTnFAu5mlnVnsf13Q4vclc6n8Uw', '1', '1552291869', '1552291869', null);
INSERT INTO `y_admin_log_datas` VALUES ('445', '445', '0192fca4Ykmo3ipV2Xy6Hcv1s+02hTR249sovrza+EPgkedikXs', '1', '1552291931', '1552291931', null);
INSERT INTO `y_admin_log_datas` VALUES ('446', '446', '7b093baa4YS2DeEnsyppWmpBcQw56fPcSzhbwvV720vvw8Se9nU', '1', '1552292099', '1552292099', null);
INSERT INTO `y_admin_log_datas` VALUES ('447', '447', '092ab22fzjx8+7APobnGpmv6pga5nub1P6DaslO3KtazNAs/2Zc', '1', '1552292136', '1552292136', null);
INSERT INTO `y_admin_log_datas` VALUES ('448', '448', 'd7d36614DGxy3HGwJXWxSSfDXOV6P1s9CLwpn+cd+s+aZwVDEDA', '1', '1552292341', '1552292341', null);
INSERT INTO `y_admin_log_datas` VALUES ('449', '449', 'c94ce965EMkE8/Ar0176hiVD3VQY/TWjynRaToGQkPmckMsfsCQ', '1', '1552292344', '1552292344', null);
INSERT INTO `y_admin_log_datas` VALUES ('450', '450', '2b10678dcKqNZQLRtB2zKTrLcMvVm2qb7wEgZBxA75aBdjum34c', '1', '1552292570', '1552292570', null);
INSERT INTO `y_admin_log_datas` VALUES ('451', '451', '1154650fkky53UsJd1uYq6h9w2DECbjOFd1BnLlLYHxWjCQuDvc', '1', '1552292619', '1552292619', null);
INSERT INTO `y_admin_log_datas` VALUES ('452', '452', '78cdc627X6bO9B2/8X7oCN3WByBkPxAGKfy/BvVN0a+M4caaK8w', '1', '1552292622', '1552292622', null);
INSERT INTO `y_admin_log_datas` VALUES ('453', '453', '2996d400NG027GfsAXU/GvpeUp31ao036NLwts6XnD1HRMmpBcY', '1', '1552292648', '1552292648', null);
INSERT INTO `y_admin_log_datas` VALUES ('454', '454', 'd277c3d1LHVwvXMXBpd638cnQYS9D8hXFok2oJHN5iR8F8C6RlU', '1', '1552292660', '1552292660', null);
INSERT INTO `y_admin_log_datas` VALUES ('455', '455', '3f6b7e8byxMHFx7ZfcFVtBDZKeH+iI/qbqV7IErj3K4iFuPsK+g', '1', '1552292663', '1552292663', null);
INSERT INTO `y_admin_log_datas` VALUES ('456', '456', 'cc711398IhRMCQqI+a5OiFwoJawifwgMOT7VP3aNg9Pi1ROnS3M', '1', '1552292688', '1552292688', null);
INSERT INTO `y_admin_log_datas` VALUES ('457', '457', '672e133aFn+wh7AADKrOsNAjXYOe6HlT7p/S0eK5WdCq/PMtqro', '1', '1552292882', '1552292882', null);
INSERT INTO `y_admin_log_datas` VALUES ('458', '458', '43dcfd4acYMEBoDsyrcNC2gyyyKA9fu/fmo4VKS7kepZowx67bE', '1', '1552292893', '1552292893', null);
INSERT INTO `y_admin_log_datas` VALUES ('459', '459', 'cf9ba0a8LD+zp5avo/7CzYY4t1n9zVYn9yq4fNFNKU45keodbMM', '1', '1552292903', '1552292903', null);
INSERT INTO `y_admin_log_datas` VALUES ('460', '460', 'e58b4b347Rdw2y19AtrSXyICd5Gic54NYfPQXtwTQNuhhS0iDik', '1', '1552293011', '1552293011', null);
INSERT INTO `y_admin_log_datas` VALUES ('461', '461', '1f87e43f5jODwCXYmM5sSZLoCZNMa6pkLsvcSr/SedLVQIyN7Rg', '1', '1552293062', '1552293062', null);
INSERT INTO `y_admin_log_datas` VALUES ('462', '462', 'd3abc9be59HbU8hhCUleKw5ETYzYzDHJbjlpUSjE9iUtXlmajYY', '1', '1552293236', '1552293236', null);
INSERT INTO `y_admin_log_datas` VALUES ('463', '463', '796be296LMb27qyAzBrfsUUMBM/Ja7MFzdx0vJ8ymNn84aN6ai4', '1', '1552293316', '1552293316', null);

-- ----------------------------
-- Table structure for y_admin_logs
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_logs`;
CREATE TABLE `y_admin_logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL COMMENT '用户id',
  `resource_id` int(11) NOT NULL DEFAULT '0' COMMENT '资源id，如果是0证明是添加？，此字段不设置为无符号',
  `title` varchar(255) NOT NULL COMMENT '日志标题',
  `log_type` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '1get，2post，3put，4deldet',
  `log_url` varchar(255) NOT NULL COMMENT '访问url',
  `log_ip` bigint(15) NOT NULL COMMENT '操作ip',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态，保留字段',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '操作时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=464 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='后台用户操作日志表';

-- ----------------------------
-- Records of y_admin_logs
-- ----------------------------
INSERT INTO `y_admin_logs` VALUES ('1', '1', '0', '登录', '2', 'admin/auth/login.html', '2886926337', '1', '1547108503');
INSERT INTO `y_admin_logs` VALUES ('2', '1', '1', '修改设置', '2', 'admin/sysconfig/edit.html', '2886926337', '1', '1547109433');
INSERT INTO `y_admin_logs` VALUES ('3', '1', '1', '修改设置', '2', 'admin/sysconfig/edit.html', '2886926337', '1', '1547109441');
INSERT INTO `y_admin_logs` VALUES ('4', '1', '1', '修改设置', '2', 'admin/sysconfig/edit.html', '2886926337', '1', '1547109449');
INSERT INTO `y_admin_logs` VALUES ('5', '1', '0', '登录', '2', 'admin/auth/login.html', '2886926337', '1', '1548647539');
INSERT INTO `y_admin_logs` VALUES ('6', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add.html', '2886926337', '1', '1548647583');
INSERT INTO `y_admin_logs` VALUES ('7', '1', '44', '修改菜单', '2', 'admin/admin_menu/edit.html', '2886926337', '1', '1548647641');
INSERT INTO `y_admin_logs` VALUES ('8', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550544655');
INSERT INTO `y_admin_logs` VALUES ('9', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550556849');
INSERT INTO `y_admin_logs` VALUES ('10', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550556974');
INSERT INTO `y_admin_logs` VALUES ('11', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550557044');
INSERT INTO `y_admin_logs` VALUES ('12', '1', '57', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550558174');
INSERT INTO `y_admin_logs` VALUES ('13', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550560717');
INSERT INTO `y_admin_logs` VALUES ('14', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550562176');
INSERT INTO `y_admin_logs` VALUES ('15', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550562209');
INSERT INTO `y_admin_logs` VALUES ('16', '1', '61', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550562229');
INSERT INTO `y_admin_logs` VALUES ('17', '1', '60', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550562241');
INSERT INTO `y_admin_logs` VALUES ('18', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550562292');
INSERT INTO `y_admin_logs` VALUES ('19', '1', '62', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550562307');
INSERT INTO `y_admin_logs` VALUES ('20', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1550564589');
INSERT INTO `y_admin_logs` VALUES ('21', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550626674');
INSERT INTO `y_admin_logs` VALUES ('22', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550626999');
INSERT INTO `y_admin_logs` VALUES ('23', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550626999');
INSERT INTO `y_admin_logs` VALUES ('24', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550627065');
INSERT INTO `y_admin_logs` VALUES ('25', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550627065');
INSERT INTO `y_admin_logs` VALUES ('26', '1', '20', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550631950');
INSERT INTO `y_admin_logs` VALUES ('27', '1', '20', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550631950');
INSERT INTO `y_admin_logs` VALUES ('28', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632020');
INSERT INTO `y_admin_logs` VALUES ('29', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632021');
INSERT INTO `y_admin_logs` VALUES ('30', '1', '11', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632683');
INSERT INTO `y_admin_logs` VALUES ('31', '1', '11', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632684');
INSERT INTO `y_admin_logs` VALUES ('32', '1', '11', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632714');
INSERT INTO `y_admin_logs` VALUES ('33', '1', '11', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632715');
INSERT INTO `y_admin_logs` VALUES ('34', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632778');
INSERT INTO `y_admin_logs` VALUES ('35', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632778');
INSERT INTO `y_admin_logs` VALUES ('36', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632797');
INSERT INTO `y_admin_logs` VALUES ('37', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632797');
INSERT INTO `y_admin_logs` VALUES ('38', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632811');
INSERT INTO `y_admin_logs` VALUES ('39', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550632811');
INSERT INTO `y_admin_logs` VALUES ('40', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633053');
INSERT INTO `y_admin_logs` VALUES ('41', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633053');
INSERT INTO `y_admin_logs` VALUES ('42', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550633065');
INSERT INTO `y_admin_logs` VALUES ('43', '1', '6', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550633105');
INSERT INTO `y_admin_logs` VALUES ('44', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633255');
INSERT INTO `y_admin_logs` VALUES ('45', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633255');
INSERT INTO `y_admin_logs` VALUES ('46', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550633300');
INSERT INTO `y_admin_logs` VALUES ('47', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633420');
INSERT INTO `y_admin_logs` VALUES ('48', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633420');
INSERT INTO `y_admin_logs` VALUES ('49', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633500');
INSERT INTO `y_admin_logs` VALUES ('50', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633500');
INSERT INTO `y_admin_logs` VALUES ('51', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633811');
INSERT INTO `y_admin_logs` VALUES ('52', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633811');
INSERT INTO `y_admin_logs` VALUES ('53', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633923');
INSERT INTO `y_admin_logs` VALUES ('54', '1', '-1', '新增资源', '2', 'admin/weresponse/add', '3232243969', '1', '1550633924');
INSERT INTO `y_admin_logs` VALUES ('55', '1', '13', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642963');
INSERT INTO `y_admin_logs` VALUES ('56', '1', '12', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642969');
INSERT INTO `y_admin_logs` VALUES ('57', '1', '11', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642974');
INSERT INTO `y_admin_logs` VALUES ('58', '1', '10', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642979');
INSERT INTO `y_admin_logs` VALUES ('59', '1', '9', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642984');
INSERT INTO `y_admin_logs` VALUES ('60', '1', '8', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642988');
INSERT INTO `y_admin_logs` VALUES ('61', '1', '7', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550642992');
INSERT INTO `y_admin_logs` VALUES ('62', '1', '15', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550647927');
INSERT INTO `y_admin_logs` VALUES ('63', '1', '15', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550647927');
INSERT INTO `y_admin_logs` VALUES ('64', '1', '15', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550647949');
INSERT INTO `y_admin_logs` VALUES ('65', '1', '15', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550647950');
INSERT INTO `y_admin_logs` VALUES ('66', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648035');
INSERT INTO `y_admin_logs` VALUES ('67', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648035');
INSERT INTO `y_admin_logs` VALUES ('68', '1', '4', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648044');
INSERT INTO `y_admin_logs` VALUES ('69', '1', '4', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648044');
INSERT INTO `y_admin_logs` VALUES ('70', '1', '3', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648050');
INSERT INTO `y_admin_logs` VALUES ('71', '1', '3', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648050');
INSERT INTO `y_admin_logs` VALUES ('72', '1', '2', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648054');
INSERT INTO `y_admin_logs` VALUES ('73', '1', '2', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648055');
INSERT INTO `y_admin_logs` VALUES ('74', '1', '1', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648059');
INSERT INTO `y_admin_logs` VALUES ('75', '1', '1', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550648059');
INSERT INTO `y_admin_logs` VALUES ('76', '1', '0', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550648146');
INSERT INTO `y_admin_logs` VALUES ('77', '1', '0', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550648159');
INSERT INTO `y_admin_logs` VALUES ('78', '1', '0', '删除资源', '2', 'admin/weresponse/del.html', '3232243969', '1', '1550648170');
INSERT INTO `y_admin_logs` VALUES ('79', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550651231');
INSERT INTO `y_admin_logs` VALUES ('80', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550651231');
INSERT INTO `y_admin_logs` VALUES ('81', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550654515');
INSERT INTO `y_admin_logs` VALUES ('82', '1', '5', '修改资源', '2', 'admin/weresponse/edit', '3232243969', '1', '1550654516');
INSERT INTO `y_admin_logs` VALUES ('83', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550712349');
INSERT INTO `y_admin_logs` VALUES ('84', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550730833');
INSERT INTO `y_admin_logs` VALUES ('85', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550735512');
INSERT INTO `y_admin_logs` VALUES ('86', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1550799092');
INSERT INTO `y_admin_logs` VALUES ('87', '1', '58', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550803914');
INSERT INTO `y_admin_logs` VALUES ('88', '1', '59', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550803960');
INSERT INTO `y_admin_logs` VALUES ('89', '1', '60', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550803998');
INSERT INTO `y_admin_logs` VALUES ('90', '1', '61', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550804008');
INSERT INTO `y_admin_logs` VALUES ('91', '1', '62', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550804021');
INSERT INTO `y_admin_logs` VALUES ('92', '1', '63', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1550804037');
INSERT INTO `y_admin_logs` VALUES ('93', '1', '0', '登录', '2', 'admin/auth/login.html', '3723153884', '1', '1550814966');
INSERT INTO `y_admin_logs` VALUES ('94', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551058341');
INSERT INTO `y_admin_logs` VALUES ('95', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551423921');
INSERT INTO `y_admin_logs` VALUES ('96', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551662812');
INSERT INTO `y_admin_logs` VALUES ('97', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551662896');
INSERT INTO `y_admin_logs` VALUES ('98', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551662953');
INSERT INTO `y_admin_logs` VALUES ('99', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551662992');
INSERT INTO `y_admin_logs` VALUES ('100', '1', '65', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1551663063');
INSERT INTO `y_admin_logs` VALUES ('101', '1', '66', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1551663070');
INSERT INTO `y_admin_logs` VALUES ('102', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551663109');
INSERT INTO `y_admin_logs` VALUES ('103', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551663197');
INSERT INTO `y_admin_logs` VALUES ('104', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551663233');
INSERT INTO `y_admin_logs` VALUES ('105', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551663261');
INSERT INTO `y_admin_logs` VALUES ('106', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551663278');
INSERT INTO `y_admin_logs` VALUES ('107', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551663398');
INSERT INTO `y_admin_logs` VALUES ('108', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551663983');
INSERT INTO `y_admin_logs` VALUES ('109', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551664030');
INSERT INTO `y_admin_logs` VALUES ('110', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551664038');
INSERT INTO `y_admin_logs` VALUES ('111', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551664093');
INSERT INTO `y_admin_logs` VALUES ('112', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551664504');
INSERT INTO `y_admin_logs` VALUES ('113', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551665068');
INSERT INTO `y_admin_logs` VALUES ('114', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551665092');
INSERT INTO `y_admin_logs` VALUES ('115', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551665992');
INSERT INTO `y_admin_logs` VALUES ('116', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551666016');
INSERT INTO `y_admin_logs` VALUES ('117', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551666081');
INSERT INTO `y_admin_logs` VALUES ('118', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551666632');
INSERT INTO `y_admin_logs` VALUES ('119', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551668198');
INSERT INTO `y_admin_logs` VALUES ('120', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551669818');
INSERT INTO `y_admin_logs` VALUES ('121', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551671017');
INSERT INTO `y_admin_logs` VALUES ('122', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551679553');
INSERT INTO `y_admin_logs` VALUES ('123', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551679604');
INSERT INTO `y_admin_logs` VALUES ('124', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551679683');
INSERT INTO `y_admin_logs` VALUES ('125', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551680577');
INSERT INTO `y_admin_logs` VALUES ('126', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551681975');
INSERT INTO `y_admin_logs` VALUES ('127', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551682029');
INSERT INTO `y_admin_logs` VALUES ('128', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551682076');
INSERT INTO `y_admin_logs` VALUES ('129', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551682780');
INSERT INTO `y_admin_logs` VALUES ('130', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551682872');
INSERT INTO `y_admin_logs` VALUES ('131', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683049');
INSERT INTO `y_admin_logs` VALUES ('132', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683144');
INSERT INTO `y_admin_logs` VALUES ('133', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683388');
INSERT INTO `y_admin_logs` VALUES ('134', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683607');
INSERT INTO `y_admin_logs` VALUES ('135', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683609');
INSERT INTO `y_admin_logs` VALUES ('136', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683613');
INSERT INTO `y_admin_logs` VALUES ('137', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683627');
INSERT INTO `y_admin_logs` VALUES ('138', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683630');
INSERT INTO `y_admin_logs` VALUES ('139', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683661');
INSERT INTO `y_admin_logs` VALUES ('140', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683700');
INSERT INTO `y_admin_logs` VALUES ('141', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683715');
INSERT INTO `y_admin_logs` VALUES ('142', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683806');
INSERT INTO `y_admin_logs` VALUES ('143', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683817');
INSERT INTO `y_admin_logs` VALUES ('144', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551683875');
INSERT INTO `y_admin_logs` VALUES ('145', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684297');
INSERT INTO `y_admin_logs` VALUES ('146', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684317');
INSERT INTO `y_admin_logs` VALUES ('147', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684352');
INSERT INTO `y_admin_logs` VALUES ('148', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684392');
INSERT INTO `y_admin_logs` VALUES ('149', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684415');
INSERT INTO `y_admin_logs` VALUES ('150', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551684447');
INSERT INTO `y_admin_logs` VALUES ('151', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551685382');
INSERT INTO `y_admin_logs` VALUES ('152', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551687927');
INSERT INTO `y_admin_logs` VALUES ('153', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551688067');
INSERT INTO `y_admin_logs` VALUES ('154', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551688212');
INSERT INTO `y_admin_logs` VALUES ('155', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551688331');
INSERT INTO `y_admin_logs` VALUES ('156', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551688765');
INSERT INTO `y_admin_logs` VALUES ('157', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689044');
INSERT INTO `y_admin_logs` VALUES ('158', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689141');
INSERT INTO `y_admin_logs` VALUES ('159', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689141');
INSERT INTO `y_admin_logs` VALUES ('160', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689142');
INSERT INTO `y_admin_logs` VALUES ('161', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689177');
INSERT INTO `y_admin_logs` VALUES ('162', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689196');
INSERT INTO `y_admin_logs` VALUES ('163', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689221');
INSERT INTO `y_admin_logs` VALUES ('164', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689239');
INSERT INTO `y_admin_logs` VALUES ('165', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689303');
INSERT INTO `y_admin_logs` VALUES ('166', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551689325');
INSERT INTO `y_admin_logs` VALUES ('167', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551690626');
INSERT INTO `y_admin_logs` VALUES ('168', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551690813');
INSERT INTO `y_admin_logs` VALUES ('169', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551690817');
INSERT INTO `y_admin_logs` VALUES ('170', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551691069');
INSERT INTO `y_admin_logs` VALUES ('171', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551692245');
INSERT INTO `y_admin_logs` VALUES ('172', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551692340');
INSERT INTO `y_admin_logs` VALUES ('173', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551692395');
INSERT INTO `y_admin_logs` VALUES ('174', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551692491');
INSERT INTO `y_admin_logs` VALUES ('175', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551692504');
INSERT INTO `y_admin_logs` VALUES ('176', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551692519');
INSERT INTO `y_admin_logs` VALUES ('177', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551692523');
INSERT INTO `y_admin_logs` VALUES ('178', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551693134');
INSERT INTO `y_admin_logs` VALUES ('179', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551693151');
INSERT INTO `y_admin_logs` VALUES ('180', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551693489');
INSERT INTO `y_admin_logs` VALUES ('181', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551693688');
INSERT INTO `y_admin_logs` VALUES ('182', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551693748');
INSERT INTO `y_admin_logs` VALUES ('183', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551694066');
INSERT INTO `y_admin_logs` VALUES ('184', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551695123');
INSERT INTO `y_admin_logs` VALUES ('185', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551695137');
INSERT INTO `y_admin_logs` VALUES ('186', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551695289');
INSERT INTO `y_admin_logs` VALUES ('187', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551695328');
INSERT INTO `y_admin_logs` VALUES ('188', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551695331');
INSERT INTO `y_admin_logs` VALUES ('189', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551695359');
INSERT INTO `y_admin_logs` VALUES ('190', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551750020');
INSERT INTO `y_admin_logs` VALUES ('191', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750029');
INSERT INTO `y_admin_logs` VALUES ('192', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750095');
INSERT INTO `y_admin_logs` VALUES ('193', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750123');
INSERT INTO `y_admin_logs` VALUES ('194', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750168');
INSERT INTO `y_admin_logs` VALUES ('195', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750224');
INSERT INTO `y_admin_logs` VALUES ('196', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750235');
INSERT INTO `y_admin_logs` VALUES ('197', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750263');
INSERT INTO `y_admin_logs` VALUES ('198', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750301');
INSERT INTO `y_admin_logs` VALUES ('199', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750325');
INSERT INTO `y_admin_logs` VALUES ('200', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750340');
INSERT INTO `y_admin_logs` VALUES ('201', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750370');
INSERT INTO `y_admin_logs` VALUES ('202', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551750977');
INSERT INTO `y_admin_logs` VALUES ('203', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551751363');
INSERT INTO `y_admin_logs` VALUES ('204', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551751881');
INSERT INTO `y_admin_logs` VALUES ('205', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551751954');
INSERT INTO `y_admin_logs` VALUES ('206', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551751962');
INSERT INTO `y_admin_logs` VALUES ('207', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551751985');
INSERT INTO `y_admin_logs` VALUES ('208', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752087');
INSERT INTO `y_admin_logs` VALUES ('209', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752414');
INSERT INTO `y_admin_logs` VALUES ('210', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752419');
INSERT INTO `y_admin_logs` VALUES ('211', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752523');
INSERT INTO `y_admin_logs` VALUES ('212', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752528');
INSERT INTO `y_admin_logs` VALUES ('213', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752655');
INSERT INTO `y_admin_logs` VALUES ('214', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752658');
INSERT INTO `y_admin_logs` VALUES ('215', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752722');
INSERT INTO `y_admin_logs` VALUES ('216', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752763');
INSERT INTO `y_admin_logs` VALUES ('217', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551752971');
INSERT INTO `y_admin_logs` VALUES ('218', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753029');
INSERT INTO `y_admin_logs` VALUES ('219', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753031');
INSERT INTO `y_admin_logs` VALUES ('220', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753092');
INSERT INTO `y_admin_logs` VALUES ('221', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753148');
INSERT INTO `y_admin_logs` VALUES ('222', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753481');
INSERT INTO `y_admin_logs` VALUES ('223', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753538');
INSERT INTO `y_admin_logs` VALUES ('224', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753584');
INSERT INTO `y_admin_logs` VALUES ('225', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753606');
INSERT INTO `y_admin_logs` VALUES ('226', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753613');
INSERT INTO `y_admin_logs` VALUES ('227', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551753658');
INSERT INTO `y_admin_logs` VALUES ('228', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551753778');
INSERT INTO `y_admin_logs` VALUES ('229', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551753993');
INSERT INTO `y_admin_logs` VALUES ('230', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551754049');
INSERT INTO `y_admin_logs` VALUES ('231', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551754147');
INSERT INTO `y_admin_logs` VALUES ('232', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551754541');
INSERT INTO `y_admin_logs` VALUES ('233', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551754635');
INSERT INTO `y_admin_logs` VALUES ('234', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551754723');
INSERT INTO `y_admin_logs` VALUES ('235', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551756332');
INSERT INTO `y_admin_logs` VALUES ('236', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551756543');
INSERT INTO `y_admin_logs` VALUES ('237', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551756771');
INSERT INTO `y_admin_logs` VALUES ('238', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757392');
INSERT INTO `y_admin_logs` VALUES ('239', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757417');
INSERT INTO `y_admin_logs` VALUES ('240', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757662');
INSERT INTO `y_admin_logs` VALUES ('241', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757688');
INSERT INTO `y_admin_logs` VALUES ('242', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757826');
INSERT INTO `y_admin_logs` VALUES ('243', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551757888');
INSERT INTO `y_admin_logs` VALUES ('244', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551763810');
INSERT INTO `y_admin_logs` VALUES ('245', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551764971');
INSERT INTO `y_admin_logs` VALUES ('246', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551764991');
INSERT INTO `y_admin_logs` VALUES ('247', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765032');
INSERT INTO `y_admin_logs` VALUES ('248', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765325');
INSERT INTO `y_admin_logs` VALUES ('249', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765485');
INSERT INTO `y_admin_logs` VALUES ('250', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765512');
INSERT INTO `y_admin_logs` VALUES ('251', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765590');
INSERT INTO `y_admin_logs` VALUES ('252', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765662');
INSERT INTO `y_admin_logs` VALUES ('253', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765663');
INSERT INTO `y_admin_logs` VALUES ('254', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765708');
INSERT INTO `y_admin_logs` VALUES ('255', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551765752');
INSERT INTO `y_admin_logs` VALUES ('256', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551766705');
INSERT INTO `y_admin_logs` VALUES ('257', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551766725');
INSERT INTO `y_admin_logs` VALUES ('258', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551766888');
INSERT INTO `y_admin_logs` VALUES ('259', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551766953');
INSERT INTO `y_admin_logs` VALUES ('260', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551766956');
INSERT INTO `y_admin_logs` VALUES ('261', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551767404');
INSERT INTO `y_admin_logs` VALUES ('262', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551776718');
INSERT INTO `y_admin_logs` VALUES ('263', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551776816');
INSERT INTO `y_admin_logs` VALUES ('264', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551776852');
INSERT INTO `y_admin_logs` VALUES ('265', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551776959');
INSERT INTO `y_admin_logs` VALUES ('266', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551776980');
INSERT INTO `y_admin_logs` VALUES ('267', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551776993');
INSERT INTO `y_admin_logs` VALUES ('268', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551777026');
INSERT INTO `y_admin_logs` VALUES ('269', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551777037');
INSERT INTO `y_admin_logs` VALUES ('270', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551777197');
INSERT INTO `y_admin_logs` VALUES ('271', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777240');
INSERT INTO `y_admin_logs` VALUES ('272', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777255');
INSERT INTO `y_admin_logs` VALUES ('273', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777306');
INSERT INTO `y_admin_logs` VALUES ('274', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777316');
INSERT INTO `y_admin_logs` VALUES ('275', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777348');
INSERT INTO `y_admin_logs` VALUES ('276', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777736');
INSERT INTO `y_admin_logs` VALUES ('277', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777775');
INSERT INTO `y_admin_logs` VALUES ('278', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777831');
INSERT INTO `y_admin_logs` VALUES ('279', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777856');
INSERT INTO `y_admin_logs` VALUES ('280', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777872');
INSERT INTO `y_admin_logs` VALUES ('281', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551777874');
INSERT INTO `y_admin_logs` VALUES ('282', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551778596');
INSERT INTO `y_admin_logs` VALUES ('283', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551778640');
INSERT INTO `y_admin_logs` VALUES ('284', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551780021');
INSERT INTO `y_admin_logs` VALUES ('285', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551780610');
INSERT INTO `y_admin_logs` VALUES ('286', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551780613');
INSERT INTO `y_admin_logs` VALUES ('287', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551780615');
INSERT INTO `y_admin_logs` VALUES ('288', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551780690');
INSERT INTO `y_admin_logs` VALUES ('289', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551836105');
INSERT INTO `y_admin_logs` VALUES ('290', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551836114');
INSERT INTO `y_admin_logs` VALUES ('291', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551836116');
INSERT INTO `y_admin_logs` VALUES ('292', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551836119');
INSERT INTO `y_admin_logs` VALUES ('293', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551836302');
INSERT INTO `y_admin_logs` VALUES ('294', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551836309');
INSERT INTO `y_admin_logs` VALUES ('295', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551836313');
INSERT INTO `y_admin_logs` VALUES ('296', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551837498');
INSERT INTO `y_admin_logs` VALUES ('297', '1', '-1', '添加菜单', '2', 'admin/admin_menu/add', '3232243969', '1', '1551837680');
INSERT INTO `y_admin_logs` VALUES ('298', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551839167');
INSERT INTO `y_admin_logs` VALUES ('299', '1', '71', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1551853531');
INSERT INTO `y_admin_logs` VALUES ('300', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551854172');
INSERT INTO `y_admin_logs` VALUES ('301', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551854255');
INSERT INTO `y_admin_logs` VALUES ('302', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551863294');
INSERT INTO `y_admin_logs` VALUES ('303', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551863382');
INSERT INTO `y_admin_logs` VALUES ('304', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551865464');
INSERT INTO `y_admin_logs` VALUES ('305', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551865530');
INSERT INTO `y_admin_logs` VALUES ('306', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551865545');
INSERT INTO `y_admin_logs` VALUES ('307', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551865549');
INSERT INTO `y_admin_logs` VALUES ('308', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551865567');
INSERT INTO `y_admin_logs` VALUES ('309', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551865576');
INSERT INTO `y_admin_logs` VALUES ('310', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866318');
INSERT INTO `y_admin_logs` VALUES ('311', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866359');
INSERT INTO `y_admin_logs` VALUES ('312', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866386');
INSERT INTO `y_admin_logs` VALUES ('313', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551866614');
INSERT INTO `y_admin_logs` VALUES ('314', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866620');
INSERT INTO `y_admin_logs` VALUES ('315', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866748');
INSERT INTO `y_admin_logs` VALUES ('316', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551866760');
INSERT INTO `y_admin_logs` VALUES ('317', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867358');
INSERT INTO `y_admin_logs` VALUES ('318', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551867396');
INSERT INTO `y_admin_logs` VALUES ('319', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867407');
INSERT INTO `y_admin_logs` VALUES ('320', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551867550');
INSERT INTO `y_admin_logs` VALUES ('321', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867553');
INSERT INTO `y_admin_logs` VALUES ('322', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867592');
INSERT INTO `y_admin_logs` VALUES ('323', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867595');
INSERT INTO `y_admin_logs` VALUES ('324', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867646');
INSERT INTO `y_admin_logs` VALUES ('325', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867651');
INSERT INTO `y_admin_logs` VALUES ('326', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551867658');
INSERT INTO `y_admin_logs` VALUES ('327', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867734');
INSERT INTO `y_admin_logs` VALUES ('328', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867780');
INSERT INTO `y_admin_logs` VALUES ('329', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551867787');
INSERT INTO `y_admin_logs` VALUES ('330', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867946');
INSERT INTO `y_admin_logs` VALUES ('331', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867969');
INSERT INTO `y_admin_logs` VALUES ('332', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551867971');
INSERT INTO `y_admin_logs` VALUES ('333', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551867976');
INSERT INTO `y_admin_logs` VALUES ('334', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868009');
INSERT INTO `y_admin_logs` VALUES ('335', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551868043');
INSERT INTO `y_admin_logs` VALUES ('336', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551868108');
INSERT INTO `y_admin_logs` VALUES ('337', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868111');
INSERT INTO `y_admin_logs` VALUES ('338', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868137');
INSERT INTO `y_admin_logs` VALUES ('339', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868163');
INSERT INTO `y_admin_logs` VALUES ('340', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868197');
INSERT INTO `y_admin_logs` VALUES ('341', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868222');
INSERT INTO `y_admin_logs` VALUES ('342', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868271');
INSERT INTO `y_admin_logs` VALUES ('343', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868281');
INSERT INTO `y_admin_logs` VALUES ('344', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868306');
INSERT INTO `y_admin_logs` VALUES ('345', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551868315');
INSERT INTO `y_admin_logs` VALUES ('346', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868319');
INSERT INTO `y_admin_logs` VALUES ('347', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868492');
INSERT INTO `y_admin_logs` VALUES ('348', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868529');
INSERT INTO `y_admin_logs` VALUES ('349', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868541');
INSERT INTO `y_admin_logs` VALUES ('350', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868560');
INSERT INTO `y_admin_logs` VALUES ('351', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868801');
INSERT INTO `y_admin_logs` VALUES ('352', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868887');
INSERT INTO `y_admin_logs` VALUES ('353', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868935');
INSERT INTO `y_admin_logs` VALUES ('354', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868942');
INSERT INTO `y_admin_logs` VALUES ('355', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551868991');
INSERT INTO `y_admin_logs` VALUES ('356', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551869035');
INSERT INTO `y_admin_logs` VALUES ('357', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551869067');
INSERT INTO `y_admin_logs` VALUES ('358', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551869135');
INSERT INTO `y_admin_logs` VALUES ('359', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551869139');
INSERT INTO `y_admin_logs` VALUES ('360', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1551922707');
INSERT INTO `y_admin_logs` VALUES ('361', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551922714');
INSERT INTO `y_admin_logs` VALUES ('362', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551922717');
INSERT INTO `y_admin_logs` VALUES ('363', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551922727');
INSERT INTO `y_admin_logs` VALUES ('364', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551922734');
INSERT INTO `y_admin_logs` VALUES ('365', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551922742');
INSERT INTO `y_admin_logs` VALUES ('366', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551922810');
INSERT INTO `y_admin_logs` VALUES ('367', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551922984');
INSERT INTO `y_admin_logs` VALUES ('368', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551923009');
INSERT INTO `y_admin_logs` VALUES ('369', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551923019');
INSERT INTO `y_admin_logs` VALUES ('370', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551923044');
INSERT INTO `y_admin_logs` VALUES ('371', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551923049');
INSERT INTO `y_admin_logs` VALUES ('372', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551923058');
INSERT INTO `y_admin_logs` VALUES ('373', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551923678');
INSERT INTO `y_admin_logs` VALUES ('374', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924126');
INSERT INTO `y_admin_logs` VALUES ('375', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924144');
INSERT INTO `y_admin_logs` VALUES ('376', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551924166');
INSERT INTO `y_admin_logs` VALUES ('377', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551924173');
INSERT INTO `y_admin_logs` VALUES ('378', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924180');
INSERT INTO `y_admin_logs` VALUES ('379', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924189');
INSERT INTO `y_admin_logs` VALUES ('380', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924254');
INSERT INTO `y_admin_logs` VALUES ('381', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924440');
INSERT INTO `y_admin_logs` VALUES ('382', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924673');
INSERT INTO `y_admin_logs` VALUES ('383', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551924687');
INSERT INTO `y_admin_logs` VALUES ('384', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551925236');
INSERT INTO `y_admin_logs` VALUES ('385', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551925505');
INSERT INTO `y_admin_logs` VALUES ('386', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551925583');
INSERT INTO `y_admin_logs` VALUES ('387', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551925981');
INSERT INTO `y_admin_logs` VALUES ('388', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551925989');
INSERT INTO `y_admin_logs` VALUES ('389', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926329');
INSERT INTO `y_admin_logs` VALUES ('390', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926409');
INSERT INTO `y_admin_logs` VALUES ('391', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926422');
INSERT INTO `y_admin_logs` VALUES ('392', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926462');
INSERT INTO `y_admin_logs` VALUES ('393', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926469');
INSERT INTO `y_admin_logs` VALUES ('394', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926532');
INSERT INTO `y_admin_logs` VALUES ('395', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926535');
INSERT INTO `y_admin_logs` VALUES ('396', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551926621');
INSERT INTO `y_admin_logs` VALUES ('397', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551929181');
INSERT INTO `y_admin_logs` VALUES ('398', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551929188');
INSERT INTO `y_admin_logs` VALUES ('399', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551931095');
INSERT INTO `y_admin_logs` VALUES ('400', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551931106');
INSERT INTO `y_admin_logs` VALUES ('401', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551931114');
INSERT INTO `y_admin_logs` VALUES ('402', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551931135');
INSERT INTO `y_admin_logs` VALUES ('403', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551931150');
INSERT INTO `y_admin_logs` VALUES ('404', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551931158');
INSERT INTO `y_admin_logs` VALUES ('405', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551938631');
INSERT INTO `y_admin_logs` VALUES ('406', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551938781');
INSERT INTO `y_admin_logs` VALUES ('407', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939077');
INSERT INTO `y_admin_logs` VALUES ('408', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939156');
INSERT INTO `y_admin_logs` VALUES ('409', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939474');
INSERT INTO `y_admin_logs` VALUES ('410', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939568');
INSERT INTO `y_admin_logs` VALUES ('411', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939612');
INSERT INTO `y_admin_logs` VALUES ('412', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551939702');
INSERT INTO `y_admin_logs` VALUES ('413', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551940078');
INSERT INTO `y_admin_logs` VALUES ('414', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551940136');
INSERT INTO `y_admin_logs` VALUES ('415', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551940346');
INSERT INTO `y_admin_logs` VALUES ('416', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551940371');
INSERT INTO `y_admin_logs` VALUES ('417', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551940379');
INSERT INTO `y_admin_logs` VALUES ('418', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551941327');
INSERT INTO `y_admin_logs` VALUES ('419', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551941335');
INSERT INTO `y_admin_logs` VALUES ('420', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551941560');
INSERT INTO `y_admin_logs` VALUES ('421', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551941585');
INSERT INTO `y_admin_logs` VALUES ('422', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551941593');
INSERT INTO `y_admin_logs` VALUES ('423', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551942201');
INSERT INTO `y_admin_logs` VALUES ('424', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551942204');
INSERT INTO `y_admin_logs` VALUES ('425', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551942207');
INSERT INTO `y_admin_logs` VALUES ('426', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551945246');
INSERT INTO `y_admin_logs` VALUES ('427', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551945292');
INSERT INTO `y_admin_logs` VALUES ('428', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551945879');
INSERT INTO `y_admin_logs` VALUES ('429', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551945891');
INSERT INTO `y_admin_logs` VALUES ('430', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1551945909');
INSERT INTO `y_admin_logs` VALUES ('431', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551946087');
INSERT INTO `y_admin_logs` VALUES ('432', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551946090');
INSERT INTO `y_admin_logs` VALUES ('433', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551946095');
INSERT INTO `y_admin_logs` VALUES ('434', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551946153');
INSERT INTO `y_admin_logs` VALUES ('435', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551946159');
INSERT INTO `y_admin_logs` VALUES ('436', '1', '68', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1551951141');
INSERT INTO `y_admin_logs` VALUES ('437', '1', '68', '修改菜单', '2', 'admin/admin_menu/edit', '3232243969', '1', '1551951164');
INSERT INTO `y_admin_logs` VALUES ('438', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551951174');
INSERT INTO `y_admin_logs` VALUES ('439', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1551951183');
INSERT INTO `y_admin_logs` VALUES ('440', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1551951185');
INSERT INTO `y_admin_logs` VALUES ('441', '1', '-1', '设置', '1', 'admin/cms.config/index.html', '3232243969', '1', '1551951191');
INSERT INTO `y_admin_logs` VALUES ('442', '1', '0', '登录', '2', 'admin/auth/login.html', '3232243969', '1', '1552291757');
INSERT INTO `y_admin_logs` VALUES ('443', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552291781');
INSERT INTO `y_admin_logs` VALUES ('444', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552291869');
INSERT INTO `y_admin_logs` VALUES ('445', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552291931');
INSERT INTO `y_admin_logs` VALUES ('446', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292099');
INSERT INTO `y_admin_logs` VALUES ('447', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292136');
INSERT INTO `y_admin_logs` VALUES ('448', '1', '-1', '标签', '1', 'admin/cms.tags/index.html', '3232243969', '1', '1552292341');
INSERT INTO `y_admin_logs` VALUES ('449', '1', '-1', '栏目', '1', 'admin/cms.category/index.html', '3232243969', '1', '1552292344');
INSERT INTO `y_admin_logs` VALUES ('450', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292570');
INSERT INTO `y_admin_logs` VALUES ('451', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292619');
INSERT INTO `y_admin_logs` VALUES ('452', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292622');
INSERT INTO `y_admin_logs` VALUES ('453', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292648');
INSERT INTO `y_admin_logs` VALUES ('454', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292660');
INSERT INTO `y_admin_logs` VALUES ('455', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292663');
INSERT INTO `y_admin_logs` VALUES ('456', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292688');
INSERT INTO `y_admin_logs` VALUES ('457', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292882');
INSERT INTO `y_admin_logs` VALUES ('458', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292893');
INSERT INTO `y_admin_logs` VALUES ('459', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552292903');
INSERT INTO `y_admin_logs` VALUES ('460', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552293011');
INSERT INTO `y_admin_logs` VALUES ('461', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552293061');
INSERT INTO `y_admin_logs` VALUES ('462', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552293236');
INSERT INTO `y_admin_logs` VALUES ('463', '1', '-1', '文章', '1', 'admin/cms.content/index.html', '3232243969', '1', '1552293315');

-- ----------------------------
-- Table structure for y_admin_menus
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_menus`;
CREATE TABLE `y_admin_menus` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '菜单id',
  `parent_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父级id',
  `title` varchar(50) NOT NULL COMMENT '菜单名称',
  `url` varchar(100) NOT NULL COMMENT '模块/控制器/方法',
  `icon` varchar(50) NOT NULL DEFAULT 'fa-circle-o' COMMENT '菜单图标',
  `condition` varchar(255) DEFAULT '',
  `is_show` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '是否显示',
  `sort_id` smallint(5) unsigned NOT NULL DEFAULT '1000' COMMENT '排序id',
  `log_type` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '0不记录日志，1get，2post，3put，4delete，先这些啦',
  `type` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '认证方式，1为实时认证，2为登录认证',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态：1默认正常，2禁用',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='后台菜单表';

-- ----------------------------
-- Records of y_admin_menus
-- ----------------------------
INSERT INTO `y_admin_menus` VALUES ('1', '0', '后台首页', 'admin/index/index', 'fa-home', '', '1', '99', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('2', '0', '系统管理', 'admin/sys', 'fa-desktop', '', '1', '1099', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('3', '2', '用户管理', 'admin/admin_user/index', 'fa-user', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('4', '3', '添加用户', 'admin/admin_user/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('5', '3', '修改用户', 'admin/admin_user/edit', 'fa-edit', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('6', '3', '删除用户', 'admin/admin_user/del', 'fa-close', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('7', '2', '角色管理', 'admin/admin_group/index', 'fa-group', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('8', '7', '添加角色', 'admin/admin_group/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('9', '7', '修改角色', 'admin/admin_group/edit', 'fa-edit', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('10', '7', '删除角色', 'admin/admin_group/del', 'fa-close', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('11', '7', '角色授权', 'admin/admin_group/access', 'fa-key', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('12', '2', '菜单管理', 'admin/admin_menu/index', 'fa-align-justify', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('13', '12', '添加菜单', 'admin/admin_menu/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('14', '12', '修改菜单', 'admin/admin_menu/edit', 'fa-edit', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('15', '12', '删除菜单', 'admin/admin_menu/del', 'fa-close', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('16', '2', '系统设置', 'admin/sysconfig/manage', 'fa-cog', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('17', '16', '添加设置', 'admin/sysconfig/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('18', '16', '修改设置', 'admin/sysconfig/edit', 'fa-edit', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('19', '16', '删除设置', 'admin/sysconfig/del', 'fa-close', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('20', '2', '文件管理', 'admin/admin_file/manager', 'fa-file-text', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('21', '20', '文件列表', 'admin/admin_file/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('22', '21', '上传文件', 'admin/admin_file/upload', 'fa-upload', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('23', '21', '下载文件', 'admin/admin_file/download', 'fa-download', '', '0', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('24', '21', '修改文件', 'admin/admin_file/edit', 'fa-edit', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('25', '21', '删除文件', 'admin/admin_file/del', 'fa-crash', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('26', '20', '回收站文件', 'admin/admin_file/recycle', 'fa-recycle', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('27', '26', '还原文件', 'admin/admin_file/reduction', 'fa-reply', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('28', '26', '永久删除文件', 'admin/admin_file/delete', 'fa-trash', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('29', '2', '日志管理', 'admin/admin_log', 'fa-info-circle', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('30', '29', '操作日志', 'admin/admin_log/index', 'fa-keyboard-o', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('31', '30', '查看操作日志详情', 'admin/admin_log/view', 'fa-search-plus', '', '0', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('32', '29', '系统日志', 'admin/syslog/index', 'fa-exclamation-circle', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('33', '32', '查看系统日志Trace', 'admin/syslog/view', 'fa-info-circle', '', '0', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('34', '2', '数据维护', 'admin/data', 'fa-database', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('35', '34', '数据库备份', 'admin/databack/index', 'fa-database', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('36', '35', '添加备份', 'admin/databack/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('37', '35', '删除备份', 'admin/databack/del', 'fa-trash', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('38', '35', '还原备份', 'admin/databack/reduction', 'fa-circle-o', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('39', '35', '下载备份', 'admin/databack/download', 'fa-download', '', '0', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('40', '34', '数据表管理', 'admin/database/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('41', '40', '优化表', 'admin/database/optimize', 'fa-refresh', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('42', '40', '修复表', 'admin/database/repair', 'fa-circle-o-notch', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('43', '40', '查看表详情', 'admin/database/view', 'fa-info-circle', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('44', '2', '个人资料', 'admin/admin_user/profile', 'fa-smile-o', '', '1', '2000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('45', '0', '用户管理', 'admin/user/manage', 'fa-user', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('46', '45', '用户列表', 'admin/user/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('47', '46', '添加用户', 'admin/user/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('48', '46', '修改用户', 'admin/user/edit', 'fa-pencil', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('49', '46', '删除用户', 'admin/user/del', 'fa-trash', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('50', '46', '禁用/启用 用户', 'admin/user/disable', 'fa-ban', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('51', '45', '用户等级', 'admin/user_level/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('52', '51', '添加用户等级', 'admin/user_level/add', 'fa-plus', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('53', '51', '修改用户等级', 'admin/user_level/edit', 'fa-pencil', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('54', '51', '删除用户等级', 'admin/user_level/del', 'fa-trash', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('55', '16', '后台设置', 'admin/sysconfig/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('56', '2', '定时任务', 'admin/crontab/index', 'fa-calendar', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('57', '2', '微信管理', 'admin/weautoreply', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('58', '57', '自动回复', 'admin/_we_autoreply/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('59', '57', '资源管理', 'admin/_we_response/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('60', '59', '新增资源', 'admin/_we_response/add', 'fa-list', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('61', '59', '修改资源', 'admin/_we_response/edit', 'fa-list', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('62', '59', '删除资源', 'admin/_we_response/del', 'fa-list', '', '0', '1000', '2', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('63', '57', '菜单管理', 'admin/_we_menu/index', 'fa-list', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('64', '0', 'CMS管理', 'admin/cms.conent/index', 'fa-archive', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('65', '64', '文章', 'admin/cms.content/index', 'fa-list', '', '1', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('66', '64', '标签', 'admin/cms.tags/index', 'fa-list', '', '1', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('67', '64', '栏目', 'admin/cms.category/index', 'fa-list', '', '1', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('68', '64', '模块', 'admin/cms.template/index', 'fa-list', '', '0', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('69', '64', '设置', 'admin/cms.config/index', 'fa-list', '', '1', '1000', '1', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('70', '69', '网站设置', 'admin/cms.config/index', 'fa-wrench', '', '1', '1000', '0', '1', '1');
INSERT INTO `y_admin_menus` VALUES ('71', '64', 'Banner', 'admin/cms.banner/index', 'fa-list', '', '1', '1000', '0', '1', '1');

-- ----------------------------
-- Table structure for y_admin_users
-- ----------------------------
DROP TABLE IF EXISTS `y_admin_users`;
CREATE TABLE `y_admin_users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `name` varchar(50) NOT NULL COMMENT '用户名（登录帐号）',
  `password` char(32) NOT NULL COMMENT '密码',
  `nickname` varchar(30) DEFAULT NULL COMMENT '用户昵称或中文用户名',
  `email` varchar(255) DEFAULT NULL COMMENT '邮箱',
  `mobile` char(11) DEFAULT NULL COMMENT '手机号',
  `avatar` varchar(255) DEFAULT '/static/admin/images/avatar.png' COMMENT '用户头像',
  `qq_openid` varchar(64) DEFAULT NULL,
  `create_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `delete_time` int(10) unsigned DEFAULT NULL COMMENT '删除时间',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '用户状态1正常，0冻结',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='后台用户表';

-- ----------------------------
-- Records of y_admin_users
-- ----------------------------
INSERT INTO `y_admin_users` VALUES ('1', 'admin', '21232f297a57a5a743894a0e4a801fc3', '超级管理员', '', '18888888888', '/static/admin/images/avatar.png', null, '1488189586', '1526916735', null, '1');
INSERT INTO `y_admin_users` VALUES ('2', 'demo', 'fe01ce2a7fbac8fafaed7c982a04e229', 'Demo', '', '', '/static/admin/images/avatar.png', null, '1539572074', '1539572110', null, '1');

-- ----------------------------
-- Table structure for y_attachments
-- ----------------------------
DROP TABLE IF EXISTS `y_attachments`;
CREATE TABLE `y_attachments` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '上传用户id',
  `original_name` varchar(255) NOT NULL,
  `save_name` varchar(255) NOT NULL,
  `save_path` varchar(255) NOT NULL,
  `extension` varchar(255) NOT NULL,
  `mime` varchar(255) NOT NULL,
  `size` int(11) unsigned NOT NULL DEFAULT '0',
  `md5` char(32) NOT NULL,
  `sha1` char(40) NOT NULL,
  `url` varchar(255) NOT NULL,
  `is_open` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '是否公开，默认为0不公开只能自己看，1为公开',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0',
  `update_time` int(11) unsigned NOT NULL,
  `delete_time` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='附件表';

-- ----------------------------
-- Records of y_attachments
-- ----------------------------
INSERT INTO `y_attachments` VALUES ('1', '0', 'fx.png', 'dd9be964dc8cec705ef2626be6a94648.png', 'D:/php/website/BearAdmin/public/uploads/attachment/20180808/dd9be964dc8cec705ef2626be6a94648.png', 'png', 'image/png', '3228', '82d5b8eb764adb141250a8613b0f883a', 'be9492d8fa95873377e3e8008b15b1d41368925b', '/uploads/attachment/20180808/dd9be964dc8cec705ef2626be6a94648.png', '0', '1533695403', '1533695403', null);
INSERT INTO `y_attachments` VALUES ('2', '0', 'r3.png', '7e2a8ed1e5e301608e8851e8df8d0bbe.png', 'D:/php/website/BearAdmin/public/uploads/attachment/20180808/7e2a8ed1e5e301608e8851e8df8d0bbe.png', 'png', 'image/png', '1933', 'b7a14b939643579b40273a10a29da008', 'b9db5f2d43c2b988ea65612a414403e8f9f78c63', '/uploads/attachment/20180808/7e2a8ed1e5e301608e8851e8df8d0bbe.png', '0', '1533695438', '1533695438', null);
INSERT INTO `y_attachments` VALUES ('3', '0', 'r3_1.png', '1c6bcdb692cc11df6b393e90d30af5e2.png', 'D:/php/website/BearAdmin/public/uploads/attachment/20180808/1c6bcdb692cc11df6b393e90d30af5e2.png', 'png', 'image/png', '1836', '9f870914e24115562c869538daa4820d', 'e83af3fcc03e7b9db52ad485f6b4e142eaadda7c', '/uploads/attachment/20180808/1c6bcdb692cc11df6b393e90d30af5e2.png', '0', '1533695461', '1533695461', null);

-- ----------------------------
-- Table structure for y_cms_banners
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_banners`;
CREATE TABLE `y_cms_banners` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `title` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `image` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '图片',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '链接',
  `show_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '显示标题',
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '副标题',
  `category_id` int(10) unsigned DEFAULT '0',
  `status` int(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态 0-不显示 1显示',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='图片';

-- ----------------------------
-- Records of y_cms_banners
-- ----------------------------
INSERT INTO `y_cms_banners` VALUES ('1', '1551844159', '1551844344', '1551844344', '首页banner1', '20190306/e7913a80659b369754790aec33bd6237.jpg', '', '加油哦', ';adsfpqhfpqohfpoqwhfpoq', '0', '1');
INSERT INTO `y_cms_banners` VALUES ('2', '1551844196', '1551852694', '1551852694', '首页banner1e', '20190306/64d5b923d82fb382c105338579da0e85.jpg', 'admin/cust', 'asdfasdf', 'asfdasfd', '2', '0');
INSERT INTO `y_cms_banners` VALUES ('3', '1551852713', '1551860569', null, '首页banner1', '20190306/4adf0313741751b5c15354b7fc3d6b88.jpg', '', '这里是标题', '这里是对这个标题的说明', '0', '1');
INSERT INTO `y_cms_banners` VALUES ('4', '1551852737', '1551852737', null, '首页banner2', '20190306/bebd569b308b087477e72f296afcd81f.jpg', '', '', '', '0', '1');
INSERT INTO `y_cms_banners` VALUES ('5', '1551852756', '1551852756', null, '首页banner3', '20190306/391d9efab25fd211f134e4e565c73811.jpg', '', '', '', '0', '1');
INSERT INTO `y_cms_banners` VALUES ('6', '1551945465', '1551945465', null, '联系我们', '20190307/2cdf8423d6c4dd66bfb0d9d5e1f2c428.jpg', '', 'contact us', '', '0', '0');

-- ----------------------------
-- Table structure for y_cms_category
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_category`;
CREATE TABLE `y_cms_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父级id',
  `title` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '类型 0-列表1-绑定内容',
  `content_id` int(11) unsigned NOT NULL DEFAULT '0',
  `tag_id` int(11) NOT NULL DEFAULT '0',
  `is_nav` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否导航栏显示 0-否 1-是',
  `hits` int(11) NOT NULL DEFAULT '0' COMMENT '点击数',
  `sort` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '排序权重',
  `image` text COLLATE utf8mb4_general_ci COMMENT '缩略图',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='栏目表';

-- ----------------------------
-- Records of y_cms_category
-- ----------------------------
INSERT INTO `y_cms_category` VALUES ('1', '1551776852', '1551931158', null, '0', '关于我们', '0', '0', '5', '1', '0', '1000', null);
INSERT INTO `y_cms_category` VALUES ('2', '1551777306', '1551926408', null, '0', '作品', '0', '0', '7', '1', '0', '1000', null);
INSERT INTO `y_cms_category` VALUES ('3', '1551777316', '1551926421', null, '0', '服务', '0', '0', '4', '1', '0', '1000', null);
INSERT INTO `y_cms_category` VALUES ('4', '1551777348', '1551941593', '1551942201', '0', '联系我们', '1', '124', '0', '1', '0', '1000', null);
INSERT INTO `y_cms_category` VALUES ('5', '1551854255', '1551926462', null, '1', '公司历史', '1', '83', '0', '1', '0', '1000', null);

-- ----------------------------
-- Table structure for y_cms_config
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_config`;
CREATE TABLE `y_cms_config` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `title` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `code` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '名称',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '值',
  `options` text COLLATE utf8mb4_general_ci COMMENT '候选值',
  `type` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '0' COMMENT '类型',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='设置表';

-- ----------------------------
-- Records of y_cms_config
-- ----------------------------
INSERT INTO `y_cms_config` VALUES ('1', '1', '1551868538', null, '网站标题', 'title', 'CMS 测试3', null, 'input');
INSERT INTO `y_cms_config` VALUES ('2', '1', '1551922809', null, '网站LOGO', 'logo', '20190307/1d4ee86344cdd4e08ff62183ddfd5881.png', null, 'image');
INSERT INTO `y_cms_config` VALUES ('3', '1', '1551867396', null, '公司名称', 'company', '易帮投缘', null, 'input');
INSERT INTO `y_cms_config` VALUES ('4', '1', '1551939474', null, '公司地址', 'address', '湖北省武汉市光谷资本大厦4楼', null, 'input');
INSERT INTO `y_cms_config` VALUES ('5', '1', '1551867396', null, '电话', 'tel', '12345678', null, 'input');
INSERT INTO `y_cms_config` VALUES ('6', '1', '1551939702', null, '简介', 'des', '投缘帮是早期创业者的社群，以“让创业者帮助创业者”为宗旨，采用线上+线下结合的形式，为全国范围的项目提供优质服务。\r\n\r\n我们为社群内的创始人提供：15+年行业经验合伙人，20+亲密合作早期投资机构，300+创始人背后资源，600+位早期投资人。', null, 'textarea');
INSERT INTO `y_cms_config` VALUES ('7', '1', '1551939611', null, '版权', 'copyright', 'Copyright © 2019.ycpai All rights reserved.', null, 'input');
INSERT INTO `y_cms_config` VALUES ('8', '1', '1551939156', null, '备案信息', 'beian', '1111', null, 'input');
INSERT INTO `y_cms_config` VALUES ('9', '1', '1551940379', null, '邮箱', 'email', '', null, 'input');
INSERT INTO `y_cms_config` VALUES ('10', '1', '1551940379', null, '微信二维码', 'qrcode', '20190307/dde784d0e5c0de5bf1a07189ac01d8c8.png', null, 'image');

-- ----------------------------
-- Table structure for y_cms_contact
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_contact`;
CREATE TABLE `y_cms_contact` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_time` int(10) unsigned NOT NULL,
  `update_time` int(10) unsigned NOT NULL,
  `delete_time` int(11) DEFAULT NULL,
  `user_name` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_general_ci NOT NULL,
  `subject` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `message` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of y_cms_contact
-- ----------------------------
INSERT INTO `y_cms_contact` VALUES ('1', '1551945133', '1551945133', null, 'abc', 'ysfzf@hotmail.com', 'abcabc', 'abca1234567890');

-- ----------------------------
-- Table structure for y_cms_content
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_content`;
CREATE TABLE `y_cms_content` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT '内容',
  `image` text COLLATE utf8mb4_general_ci COMMENT '缩略图',
  `hits` int(11) NOT NULL DEFAULT '0' COMMENT '点击数',
  `tag_id` int(11) NOT NULL DEFAULT '0' COMMENT '标签',
  `author` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '作者',
  `top` tinyint(1) unsigned DEFAULT '0' COMMENT '推荐到首页  0-否  1-是',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=125 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='内容表';

-- ----------------------------
-- Records of y_cms_content
-- ----------------------------
INSERT INTO `y_cms_content` VALUES ('2', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('3', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('4', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('5', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('6', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('7', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('9', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('10', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('11', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('12', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('13', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('14', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('15', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('16', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('17', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('18', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('19', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('20', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('21', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('22', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('23', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('24', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('25', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('26', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('30', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('31', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('32', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('33', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('34', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('35', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('36', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('37', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('38', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('39', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('40', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('41', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('42', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('43', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('44', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('45', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('46', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('47', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('48', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('49', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('50', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('51', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('52', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('53', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('61', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('62', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('63', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('64', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('65', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('66', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('67', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('68', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('69', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('70', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('71', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('72', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('73', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('74', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('75', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('76', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('77', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('78', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('79', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('80', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('81', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('82', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('83', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('84', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('85', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('86', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('87', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('88', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('89', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('90', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('91', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('92', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('93', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('94', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('95', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('96', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('97', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('98', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('99', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('100', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('101', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('102', '1551925582', '1551925582', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('103', '1551923677', '1551923677', null, '数组去重的110种方法', '&lt;h2&gt;一、使用双重&lt;code&gt;for&lt;/code&gt;循环&lt;/h2&gt;&lt;p&gt;要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。同样也可以使用双重for循环来数组去重。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;j&amp;nbsp;=&amp;nbsp;i+1;&amp;nbsp;j&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;j++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;==&amp;nbsp;arr[j])&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arr.splice(j,1)\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;j--\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;arr\r\n}\r\nlet&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;[1,1,&amp;#39;true&amp;#39;,&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,true,true,false,false,&amp;nbsp;undefined,undefined,&amp;nbsp;null,null,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;#39;NaN&amp;#39;,&amp;#39;NaN&amp;#39;,&amp;nbsp;0,&amp;nbsp;0,{},{},[],[]];\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;1,&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;false,&amp;nbsp;undefined,&amp;nbsp;NaN,&amp;nbsp;NaN,&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;{},&amp;nbsp;{}&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;可以看见&lt;code&gt;NaN&lt;/code&gt;没有被去除掉，两个&lt;code&gt;{}&lt;/code&gt;都没去掉，因为&lt;code&gt;{}&lt;/code&gt;是引用值，而却我们使用的是&lt;code&gt;arr[i] == arr[j]&lt;/code&gt;会发生类型转换，所以以下都为&lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1 == true&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false== []&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;undefined == null&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;false == 0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要解决以上问题我们可以使用&lt;code&gt;Object.is(arr[i], arr[j])&lt;/code&gt;的方法替换&lt;code&gt;arr[i]==arr[j]&lt;/code&gt;既可以去除&lt;code&gt;NaN&lt;/code&gt;还可以防止发生类型转换。代码这里接不贴出了，大家可以自己写一下运行一下。&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：为了方便以下arr都使用该处的arr值&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;二、利用&lt;code&gt;indexOf()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;indexOf()&lt;/code&gt;，可以判断一个数组中是否包含某个值，如果存在则返回该元素在数组中的位置，如果不存在则返回&lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;&lt;pre&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们新建一个数组来保存去重后的数组，如果该数组不包含元素就将该元素&lt;code&gt;push&lt;/code&gt;到该数组中，可以发现这种方法任然没有去掉&lt;code&gt;NaN、{}、[]&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;三、利用&lt;code&gt;includes()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;includes()&lt;/code&gt;方法也可以判断数组是否包含某个特定的元素，如果包含就返回&lt;code&gt;true&lt;/code&gt;不包含就返回&lt;code&gt;false&lt;/code&gt;。这和&lt;code&gt;indexOf()&lt;/code&gt;方法有些类似，所以我们使用&lt;code&gt;includes()&lt;/code&gt;进行数组去重和&lt;code&gt;indexOf()&lt;/code&gt;的方法原理是一样的。&lt;/p&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;h2&gt;四、利用&lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。并且&lt;code&gt;filter()&lt;/code&gt;&lt;strong&gt;不会改变数组&lt;/strong&gt;，也&lt;strong&gt;不会对空数组进行检测&lt;/strong&gt;。&lt;code&gt;filter()&lt;/code&gt;方法接收一个回调函数。&lt;/p&gt;&lt;h4&gt;语法：&lt;/h4&gt;&lt;pre&gt;array.filter(function(item,index,arr),&amp;nbsp;thisValue)&amp;nbsp;复制代码&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr class=&quot;firstRow&quot;&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;item&lt;/td&gt;&lt;td&gt;必须。当前元素的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;index&lt;/td&gt;&lt;td&gt;可选。当前元素的索引值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;arr&lt;/td&gt;&lt;td&gt;可选。当前元素属于的数组对象&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;代码实现&lt;/h4&gt;&lt;pre class=&quot;brush:js;toolbar:false&quot;&gt;functon&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;res&amp;nbsp;=&amp;nbsp;[]\r\n&amp;nbsp;&amp;nbsp;	for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(res.indexOf(arr[i])&amp;nbsp;===&amp;nbsp;-1)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	res.push(arr[i])\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;	}\r\n&amp;nbsp;&amp;nbsp;	return&amp;nbsp;res\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;[],&amp;nbsp;[]]&lt;/pre&gt;&lt;p&gt;这里我们用判断&lt;code&gt;indexOf(item)&lt;/code&gt;判断当前元素的索引是否等于当前&lt;code&gt;index&lt;/code&gt;，如果相等就返回该元素。&lt;/p&gt;&lt;h2&gt;五、使用对象的特点&lt;/h2&gt;&lt;p&gt;对象是一种以键值对存储信息的结构，并且不能有重复的键。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;let&amp;nbsp;obj&amp;nbsp;=&amp;nbsp;{}\r\n&amp;nbsp;&amp;nbsp;for&amp;nbsp;(let&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;arr.length;&amp;nbsp;i++)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(arr[i]&amp;nbsp;in&amp;nbsp;obj)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;++\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;obj[arr[i]]&amp;nbsp;=&amp;nbsp;10\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;}\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;Object.keys(obj)&amp;nbsp;//&amp;nbsp;以数组的形式返回键\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//&amp;nbsp;[&amp;nbsp;&amp;#39;0&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;1&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;false&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;undefined&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;null&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;[object&amp;nbsp;Object]&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;&amp;#39;]&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这种方法的写出来有点问题，因为是用&lt;code&gt;Object.keys(obj)&lt;/code&gt;来返回键的集合所以得到的都是字符串的形式。&lt;/p&gt;&lt;h2&gt;六、使用set&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; 提供了新的数据结构 &lt;code&gt;Set&lt;/code&gt;。它类似于数组，但是成员的值都是唯一的，没有重复的值。&lt;/p&gt;&lt;pre&gt;function&amp;nbsp;unique(arr)&amp;nbsp;{\r\n&amp;nbsp;&amp;nbsp;return&amp;nbsp;[...new&amp;nbsp;Set(arr)]\r\n}\r\nconsole.log(unique(arr))&amp;nbsp;//[&amp;nbsp;1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;true&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;true,&amp;nbsp;&amp;nbsp;&amp;nbsp;false,&amp;nbsp;&amp;nbsp;&amp;nbsp;undefined,&amp;nbsp;&amp;nbsp;&amp;nbsp;null,&amp;nbsp;&amp;nbsp;&amp;nbsp;NaN,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;NaN&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;0,&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;{},&amp;nbsp;&amp;nbsp;&amp;nbsp;[],&amp;nbsp;&amp;nbsp;&amp;nbsp;[]&amp;nbsp;]&lt;/pre&gt;&lt;p&gt;这是&lt;code&gt;ES6&lt;/code&gt;最常用的方法，得到的效果也还不错。&lt;/p&gt;&lt;p&gt;&lt;br/&gt; &lt;br/&gt; 谢谢你的阅读。 希望大家也可以把自己常用的方法分享一起交流。&lt;br/&gt;作者：Ilion&lt;br/&gt;链接：https://juejin.im/post/5c7e0328f265da2dc538da03&lt;br/&gt;来源：掘金&lt;br/&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/5eac8fb82b35b83b2490954d340fb090.jpg', '0', '4', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('104', '1551924126', '1551924189', null, '了解 Docker 的核心组成', '&lt;p style=&quot;line-height: inherit; margin-top: 25px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在掌握 Docker 的一些背景知识后，我们还不得不花费一节的篇幅来简单介绍有关 Docker 核心的一些知识。当然，大家不要觉得有“核心”这类的词，我们就要在这一节中深入 Docker 底层去讲解原理性的东西，更确切的说这一节更像一张词汇表，在掌握这些与 Docker 紧密相关的词汇后，大家可以更好的理解之后小节中的内容。&lt;br/&gt;&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;四大组成对象&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在之前的小节里，我们提到了 Docker 实现容器引擎的一些技术，但那些都是一些相对底层的原理实现，在 Docker 将它们封装后，我们并不会直接操作它们。在 Docker 中，另外提供出了一些软件层面的概念，这才是我们操作 Docker 所针对的对象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 体系里，有四个对象 ( Object ) 是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：&lt;span style=&quot;font-weight: 700;&quot;&gt;镜像 ( Image )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;容器 ( Container )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;网络 ( Network )&lt;/span&gt;、&lt;span style=&quot;font-weight: 700;&quot;&gt;数据卷 ( Volume )&lt;/span&gt;。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;镜像 ( Image ) 这个概念相信大家不会陌生，因为它是其他虚拟化技术 ( 特别是虚拟机 ) 中常常被使用的一个概念。所谓镜像，可以理解为一个只读的文件包，其中包含了&lt;span style=&quot;font-weight: 700;&quot;&gt;虚拟环境运行最原始文件系统的内容&lt;/span&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;当然，Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/7/165b29cad1a3dfae?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;容器 ( Container ) 就更好理解了，在容器技术中，容器就是用来隔离虚拟环境的基础设施，而在 Docker 里，它也被引申为隔离出来的虚拟环境。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;用更官方的定义，Docker 的容器应该有三项内容组成：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一个 Docker 镜像&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个程序运行环境&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个指令集合&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;关于镜像与容器的更多细节知识，我们在后面的小节中还会单独进行讲解。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;网络&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;对于大部分程序来说，它们的运行都不会是孤立的，而是要与外界或者更准确的说是与其他程序进行交互的，这里的交互绝大多数情况下指的就是数据信息的交换。网络通讯是目前最常用的一种程序间的数据交换方式了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;由于计算机网络领域拥有相对统一且独立的协议等约定，其跨平台性非常优秀，所有的应用都可以通过网络在不同的硬件平台或操作系统平台上进行数据交互。特别是在分布式云计算的时代，应用或服务间的通讯更是充分依赖于网络传输，所以自然拥有一套完善的网络体系支撑，是承载应用运行所必须的基础设施。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;正是因为拥有强大的网络功能，才能让我们制造健壮的 Docker 应用体系。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;数据卷&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。&lt;/p&gt;&lt;h2 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 12px; font-size: 24px; border-bottom: 1px solid rgb(236, 236, 236); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;Docker Engine&lt;/h2&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;时至今日，Docker 生态已经远比它诞生之初要庞大许多，虽然我们仍然习惯使用 Docker 这个名字去指代实现容器技术支持的软件，但显然更加容易与其他的概念产生混淆。这里我们很有必要对这个 Docker 中最核心的软件进行介绍，不仅因为它在 Docker 生态中扮演着中心的地位，也因为它是我们在开发中实实在在接触最多的东西。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;目前这款实现容器化的工具是由 Docker 官方进行维护的，Docker 官方将其命名为&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;Docker Engine&lt;/span&gt;，同时定义其为工业级的容器引擎 ( Industry-standard Container Engine )。在 Docker Engine 中，实现了 Docker 技术中最核心的部分，也就是容器引擎这一部分。&lt;/p&gt;&lt;h3 class=&quot;heading&quot; style=&quot;color: rgb(51, 51, 51); line-height: 1.5; margin-top: 35px; margin-bottom: 10px; padding-bottom: 0px; font-size: 18px; font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;docker daemon 和 docker CLI&lt;/h3&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;虽然我们说 Docker Engine 是一款软件，但实实在在去深究的话，它其实算是由多个独立软件所组成的软件包。在这些程序中，最核心的就是&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker daemon&lt;/span&gt;&amp;nbsp;和&amp;nbsp;&lt;span style=&quot;font-weight: 700;&quot;&gt;docker CLI&lt;/span&gt;&amp;nbsp;这俩了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;所有我们通常认为的 Docker 所能提供的容器管理、应用编排、镜像分发等功能，都集中在了 docker daemon 中，而我们之前所提到的镜像模块、容器模块、数据卷模块和网络模块也都实现在其中。在操作系统里，docker daemon 通常以服务的形式运行以便静默的提供这些功能，所以我们也通常称之为 Docker 服务。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a8349ffdb33e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;在 docker daemon 管理容器等相关资源的同时，它也向外暴露了一套 RESTful API，我们能够通过这套接口对 docker daemon 进行操作。或者更确切的说，是通过这套 RESTful API 对 docker daemon 中运行的容器和其他资源进行管理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;通常来说，我们是采用在控制台或者命令行输入命令来控制 docker daemon 的，因为这样很酷也更容易适应那些有或者没有图形界面的操作系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;那么问题来了，如果我们在控制台中编写一个 HTTP 请求以借助 docker daemon 提供的 RESTful API 来操控它，那显然是个费脑、费手又费时间的活儿。所以在 Docker Engine 里还直接附带了 docker CLI 这个控制台程序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/5/165a834db42056c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit; margin-top: 22px; margin-bottom: 22px; color: rgb(51, 51, 51); font-family: -apple-system, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);&quot;&gt;熟悉程序结构的朋友们比较容易看出来，docker daemon 和 docker CLI 所组成的，正是一个标准 C/S ( Client-Server ) 结构的应用程序。衔接这两者的，正是 docker daemon 所提供的这套 RESTful API。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/b46b52a5f9b8252700167b04881c8e4d.jpg', '0', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('105', '1551924254', '1551924687', null, '在 Windows 和 Mac 安装Docker', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于开发来说，Windows 和 macOS 是更为常见和常用的系统，所以也很有必要了解在 Windows 和 macOS 中使用 Docker 的方法。很幸运的是，Docker 的官方对这两个系统提供了强有力的支持，我们可以很轻松的在这两个系统中运行 Docker。在这一小节中，我们就来了解一下 Docker 在 Windows 和 macOS 中安装的方式以及运行的原理。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在大多数情况下，我们的开发工作是在 Windows 或 macOS 这两个操作系统中进行的，既然 Docker 是我们用来解决开发、测试到运维整条产品线的工具，自然支持这两个系统是不可或缺的功能。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如同封装 Docker 为我们提供了轻松的虚拟化运行环境一样，Docker 在 Windows 和 macOS 中的安装也是极易完成的。Docker 官方为 Windows 和 macOS 系统单独开辟了一条产品线，名为 Docker Desktop，其定位是快速为开发者提供在 Windows 和 macOS 中运行 Docker 环境的工具。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 实现容器化与 Docker Engine 是一致的，这就保证了我们在 Windows 和 macOS 中开发所使用的环境可以很轻松的转移到其他的 Docker 实例中，不论这个 Docker 实例是运行在 Windows、macOS 亦或是 Linux。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 产品线包含两个软件，也就是针对 Windows 系统的 Docker for Windows 和针对 macOS 的 Docker for Mac。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Desktop&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在安装 Docker for Windows 和 Docker for Mac 之前，我们依然要了解一下两款软件对操作系统及软硬件的要求，只有达到了这些要求，我们才能顺利的安装上 Docker for Windows 和 Docker for Mac。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;必须使用 Windows 10 Pro ( 专业版 )&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 64 bit 版本的 Windows&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Mac 硬件必须为 2010 年以后的型号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;必须使用 macOS El Capitan 10.11 及以后的版本&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外，虚拟机软件 VirtualBox 与 Docker Desktop 兼容性不佳，建议在安装 Docker for Windows 和 Docker for Mac 之前先卸载 VirtualBox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在确认系统能够支持 Docker Desktop 之后，我们就从 Docker 官方网站下载这两个软件的安装程序，这里直接附上 Docker Store 的下载链接，供大家直接下载：&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-windows&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fstore.docker.com%2Feditions%2Fcommunity%2Fdocker-ce-desktop-mac&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;store.docker.com/editions/co…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker for Windows 和 Docker for Mac 的方法十分简单，按 Windows 或 macOS 常见的软件安装方式安装即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动 Docker&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;像 Linux 中一样，我们要在 Windows 和 macOS 中使用 Docker 前，我们需要先将 Docker 服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 Docker for Windows 和 Docker for Mac 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 Docker for Windows 或 Docker for Mac 并启动即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开软件之后，我们会在 Windows 的任务栏或者 macOS 的状态栏中看到 Docker 的大鲸鱼图标。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 或 Docker for Mac 在启动时，这只大鲸鱼上的集装箱会一直闪动，这说明 Docker 程序正在部署 docker daemon 所需要的一些环境并执行 docker daemon 的启动。当集装箱不再闪动，就说明 Docker 服务已经准备就绪，我们就可以在 Windows 和 macOS 中使用 Docker 了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 为我们在 Windows 和 macOS 中使用 Docker 提供了与 Linux 中几乎一致的方法，我们只需要打开 Windows 中的 PowerShell 获得 macOS 中的 Terminal，亦或者 Git Bash、Cmder、iTerm 等控制台类软件，输入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker&lt;/code&gt;&amp;nbsp;命令即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;docker version&lt;/code&gt;&amp;nbsp;能够看到 Docker 客户端的信息，我们可以在这里发现程序运行的平台：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;λ&amp;nbsp;docker&amp;nbsp;version&amp;nbsp;Client:&amp;nbsp;##&amp;nbsp;......&amp;nbsp;&amp;nbsp;OS/Arch:&amp;nbsp;&amp;nbsp;windows/amd64&amp;nbsp;##&amp;nbsp;......&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 的实现原理&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;通过之前小节的介绍，我们知道 Docker 的核心功能，也就是容器实现，是基于 Linux 内核中 Namespaces、CGroups 等功能的。那么大体上可以说，Docker 是依赖于 Linux 而存在的。那么问题来了，Docker Desktop 是如何实现让我们在 Windows 和 macOS 中如此顺畅的使用 Docker 的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;其实 Docker Desktop 的实现逻辑很简单：既然 Windows 和 macOS 中没有 Docker 能够利用的 Linux 环境，那么我们生造一个 Linux 环境就行啦！Docker for Windows 和 Docker for Mac 正是这么实现的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于虚拟化在云计算时代的广泛使用，Windows 和 MacOS 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 Hypervisor 实现虚拟化的功能。在 Windows 中，我们可以通过 Hyper-V 实现虚拟化，而在 macOS 中，我们可以通过 HyperKit 实现虚拟化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 这里利用了这两个操作系统提供的功能来搭建一个虚拟 Linux 系统，并在其之上安装和运行 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;除了搭建 Linux 系统并运行 docker daemon 之外，Docker Desktop 系列最突出的一项功能就是我们能够直接通过 PowerShell、Terminal 这类的控制台软件在 Windows 和 macOS 中直接操作虚拟 Linux 系统中运行的 docker daemon。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;实现这个功能得益于 docker daemon 对外提供的操作过程并不是复杂且领域性强的 IPC 等方式，而是通用的 RESTful Api 的形式。也就是说，Docker Desktop 只要实现 Windows 和 macOS 中的客户端，就能够直接利用 Hypervisor 的网络支持与虚拟 Linux 系统中的 docker daemon 进行通讯，并对它进行控制。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这其实就是我们之前所提到 docker daemon 使用 RESTful Api 作为控制方式的优势体现了。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;主机文件挂载&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 对 Windows 和 macOS 到虚拟 Linux 系统，再到 Docker 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。这相比于普通虚拟机软件进行挂载的过程来说，完全不能用百倍效率来比较了。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;配置 Docker Desktop&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在我们使用 Docker Desktop 系列之前，我们还会简单修改其的一些配置，以便更好的合理搭配操作系统与 Docker Desktop 系列软件。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以通过 Docker for Windows 或 Docker for Mac 的大鲸鱼图标打开配置页面：在大鲸鱼弹出的菜单中选择 Settings ( Windows ) 或 Preferences ( macOS )。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;打开 Docker for Windows 和 Docker for Mac 的配置页面后，我们可以发现几个配置页面。这里我不逐一把每个页面进行截图了，大家可以自己动手查看页面每个页面的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker for Windows 和 Docker for Mac 的配置项目较 Docker Engine 来说要多上许多，这主要是因为 Docker Desktop 是 Docker Engine 的超集，所以其不仅包含了 Docker Engine 的配置内容，还要包含诸如虚拟机实现等其他配置。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我这里抽出几个与 Docker 相关的关键配置，分别简单说明它们的作用：&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;文件系统挂载配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Shared Drivers 面板，以及在 Docker for Mac 中的 File Sharing 面板中，包含了我们之前提到的将本机目录挂载到 Hypervisor 里 Linux 系统中的配置。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;资源控制配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Advanced 面板中，我们可以调整 Docker 最大占用的本机资源。当然，更准确的说我们是在调整虚拟 Linux 环境所能占用的资源，是通过这个方式影响 Docker 所能占用的最大资源。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;网络配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Docker for Windows 的 Network 面板，以及在 Docker for Mac 中的 Advanced 面板中，我们可以配置 Docker 内部默认网络的子网等内容。这个网络的作用以及更详细的内容，我们会在之第 9 节中进行讲解。&lt;/p&gt;&lt;h4 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;docker daemon 配置&lt;/h4&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在 Daemon 面板里，我们可以直接配置对 docker daemon 的运行配置进行调整。默认情况下，在 Daemon 面板里只有 Insecure registries 和 Registry mirrors 两个配置，分别用来定义未认证镜像仓库地址和镜像源地址。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们可以点击切换按钮切换到 Advanced 模式，在这个模式下，我们可以直接编辑 docker daemon 的 daemon.json 配置文件，实现更具体、完整的配置 docker daemon 的目的。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;低系统版本解决方案&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Desktop 系列为我们在 Windows 和 macOS 中使用 Docker 提供了巨大的便利，几乎让我们可以在数分钟内搭建 Windows 和 macOS 中 Docker 的运行环境，并得到像 Linux 中使用 Docker 一样的体验。但 Docker Desktop 依然存在一定的局限性，其中最大的莫过于其对 Windows 和 macOS 的苛刻要求。虽然我们提倡保持操作系统的更新换代，以得到最新的功能以及更好的安全保障，但依然有很多情况下我们不得不使用低版本的 Windows 和 macOS。对于这种情况，Docker 官方也提供了相应的解决方案。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先，让我们来聊聊为什么 Docker for Windows 和 Docker for Mac 会对操作系统有如此严苛的要求。其实原因很简单，刚才我们谈到了，Docker for Windows 和 Docker for Mac 的实现分别依靠了 Windows 中的 Hyper-V 和 macOS 中的 HyperKit，而这两个虚拟化工具只在高版本的 Windows 和 macOS 系统中才提供出来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;既然知道了原因，解决方案自然也就有了，既然我们不能利用 Hyper-V 或 HyperKit 来创建虚拟的 Linux 系统，那就找一个能够替代它们的工具，用其创建虚拟 Linux 系统即可。&lt;/p&gt;&lt;h3 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker Toolbox&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Docker 官方为我们找到了用于搭建虚拟 Linux 系统的软件，即 Oracle 的 VirtualBox，并以此封装了另一个集成的 Docker 运行环境软件：Docker Toolbox。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装 Docker Toolbox 的过程也十分简单，下载安装包并按常规软件一样安装即可。这里直接我直接提供给大家 Docker Toolbox 安装包的连接，方便大家下载。&lt;/p&gt;&lt;ul style=&quot;padding: 0px 0px 0px 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Windows&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fwin%2Fstable%2FDockerToolbox.exe&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/win/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Docker Toolbox for Mac&lt;/a&gt;&amp;nbsp;(&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdownload.docker.com%2Fmac%2Fstable%2FDockerToolbox.pkg&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;download.docker.com/mac/stable/…&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;安装完 Docker Toolbox 后，我们有几项与 Docker for Windows 和 Docker for Mac 不同的使用方法需要注意。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于不能很好的与系统以及 VirtualBox 互通结合，我们启动、关闭、重启 Docker 服务不能完全实现自动化，所以这里 Docker 为我们提供了 Docker QuickStart Terminal 这个工具来处理这些过程。换个方式说，我们必须通过它来启动和操作 Docker，而不能再直接使用 PowerShell、Terminal 这类软件了。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;另外一个不便之处就是文件系统的挂载，由于 Docker Toolbox 无法直接操作 VirtualBox 实现挂载，所以这个过程需要我们人工来进行。整个挂载的方式与我们之前谈到的一样，区别只是需要我们手动操作。将本机目录挂载到虚拟 Linux 系统中的配置在 VirtualBox 的 Settings 中，我们将本机需要挂载的目录配置进去并保存即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/7cc6b15c076267df51e11e32f9cd1588.jpg', '1', '7', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('106', '1551925236', '1551925236', null, 'Redis 分布式锁', '&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式应用进行逻辑处理时经常会遇到并发问题。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;比如一个操作要修改用户的状态，修改状态需要先读出用户的状态，在内存里进行修改，改完了再存回去。如果这样的操作同时进行了，就会出现并发问题，因为读取和保存状态这两个操作不是原子的。（Wiki 解释：所谓&lt;span style=&quot;font-weight: 700&quot;&gt;原子操作&lt;/span&gt;是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch 线程切换。）&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/10/164824791aa796fa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这个时候就要使用到分布式锁来限制程序的并发执行。Redis 分布式锁使用非常广泛，它是面试的重要考点之一，很多同学都知道这个知识，也大致知道分布式锁的原理，但是具体到细节的使用上往往并不完全正确。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;//&amp;nbsp;这里的冒号:就是一个普通的字符，没特别含义，它可以是任意其它字符，不要误解&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;于是我们在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setnx&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;lock:codehole&amp;nbsp;5&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。也许你会想到用 Redis 事务来解决。但是这里不行，因为 expire 是依赖于 setnx 的执行结果的，如果 setnx 没抢到锁，expire 是不应该执行的。事务里没有 if-else 分支逻辑，事务的特点是一口气执行，要么全部执行要么一个都不执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了解决这个疑难，Redis 开源社区涌现了一堆分布式锁的 library，专门用来解决这个问题。实现方法极为复杂，小白用户一般要费很大的精力才可以搞懂。如果你需要使用分布式锁，意味着你不能仅仅使用 Jedis 或者 redis-py 就行了，还得引入分布式锁的 library。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了治理这个乱象，Redis 2.8 版本中作者加入了 set 指令的扩展参数，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。从此以后所有的第三方分布式锁 library 可以休息了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;lock:codehole&amp;nbsp;true&amp;nbsp;ex&amp;nbsp;5&amp;nbsp;nx&amp;nbsp;OK&amp;nbsp;...&amp;nbsp;do&amp;nbsp;something&amp;nbsp;critical&amp;nbsp;...&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;lock:codehole&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;上面这个指令就是 setnx 和 expire 组合在一起的原子指令，它就是分布式锁的奥义所在。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;超时问题&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，导致临界区代码不能得到严格的串行执行。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;tag&amp;nbsp;=&amp;nbsp;random.nextint()&amp;nbsp;&amp;nbsp;#&amp;nbsp;随机数&amp;nbsp;if&amp;nbsp;redis.set(key,&amp;nbsp;tag,&amp;nbsp;nx=True,&amp;nbsp;ex=5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;redis.delifequals(key,&amp;nbsp;tag)&amp;nbsp;&amp;nbsp;#&amp;nbsp;假想的&amp;nbsp;delifequals&amp;nbsp;指令&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;delifequals&lt;/code&gt;这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;delifequals&amp;nbsp;if&amp;nbsp;redis.call(&amp;quot;get&amp;quot;,KEYS[1])&amp;nbsp;==&amp;nbsp;ARGV[1]&amp;nbsp;then&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;redis.call(&amp;quot;del&amp;quot;,KEYS[1])&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0&amp;nbsp;end&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;但是这也不是一个完美的方案，它只是相对安全一点，因为如果真的超时了，当前线程的逻辑没有执行完，其它线程也会乘虚而入。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。比如 Java 语言里有个 ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;-*-&amp;nbsp;coding:&amp;nbsp;utf-8&amp;nbsp;import&amp;nbsp;redis&amp;nbsp;import&amp;nbsp;threading&amp;nbsp;locks&amp;nbsp;=&amp;nbsp;threading.local()&amp;nbsp;locks.redis&amp;nbsp;=&amp;nbsp;{}&amp;nbsp;def&amp;nbsp;key_for(user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;&amp;quot;account_{}&amp;quot;.format(user_id)&amp;nbsp;def&amp;nbsp;_lock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;bool(client.set(key,&amp;nbsp;True,&amp;nbsp;nx=True,&amp;nbsp;ex=5))&amp;nbsp;def&amp;nbsp;_unlock(client,&amp;nbsp;key):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.delete(key)&amp;nbsp;def&amp;nbsp;lock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;+=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;_lock(client,&amp;nbsp;key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;not&amp;nbsp;ok:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;def&amp;nbsp;unlock(client,&amp;nbsp;user_id):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key&amp;nbsp;=&amp;nbsp;key_for(user_id)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;key&amp;nbsp;in&amp;nbsp;locks.redis:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;locks.redis[key]&amp;nbsp;-=&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;lt;=&amp;nbsp;0:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;del&amp;nbsp;locks.redis[key]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self._unlock(key)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;True&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;False&amp;nbsp;client&amp;nbsp;=&amp;nbsp;redis.StrictRedis()&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;lock&amp;quot;,&amp;nbsp;lock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&amp;nbsp;print&amp;nbsp;&amp;quot;unlock&amp;quot;,&amp;nbsp;unlock(client,&amp;nbsp;&amp;quot;codehole&amp;quot;)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是可重入锁的全部，精确一点还需要考虑内存锁计数的过期时间，代码复杂度将会继续升高。老钱不推荐使用可重入锁，它加重了客户端的复杂性，在编写业务方法时注意在逻辑结构上进行调整完全可以不使用可重入锁。下面是 Java 版本的可重入锁。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;public&amp;nbsp;class&amp;nbsp;RedisWithReentrantLock&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;ThreadLocal&amp;lt;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;gt;&amp;nbsp;lockers&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ThreadLocal&amp;lt;&amp;gt;();&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Jedis&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;RedisWithReentrantLock(Jedis&amp;nbsp;jedis)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.jedis&amp;nbsp;=&amp;nbsp;jedis;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;boolean&amp;nbsp;_lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;jedis.set(key,&amp;nbsp;&amp;quot;&amp;quot;,&amp;nbsp;&amp;quot;nx&amp;quot;,&amp;nbsp;&amp;quot;ex&amp;quot;,&amp;nbsp;5L)&amp;nbsp;!=&amp;nbsp;null;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;void&amp;nbsp;_unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jedis.del(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;private&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;currentLockers()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refs&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;refs;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lockers.set(new&amp;nbsp;HashMap&amp;lt;&amp;gt;());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;lockers.get();&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;lock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;!=&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt&amp;nbsp;+&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean&amp;nbsp;ok&amp;nbsp;=&amp;nbsp;this._lock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(!ok)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;unlock(String&amp;nbsp;key)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String,&amp;nbsp;Integer&amp;gt;&amp;nbsp;refs&amp;nbsp;=&amp;nbsp;currentLockers();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Integer&amp;nbsp;refCnt&amp;nbsp;=&amp;nbsp;refs.get(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;==&amp;nbsp;null)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;false;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refCnt&amp;nbsp;-=&amp;nbsp;1;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(refCnt&amp;nbsp;&amp;gt;&amp;nbsp;0)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.put(key,&amp;nbsp;refCnt);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;refs.remove(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this._unlock(key);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;true;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Jedis&amp;nbsp;jedis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Jedis();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RedisWithReentrantLock&amp;nbsp;redis&amp;nbsp;=&amp;nbsp;new&amp;nbsp;RedisWithReentrantLock(jedis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.lock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(redis.unlock(&amp;quot;codehole&amp;quot;));&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跟 Python 版本区别不大，也是基于 ThreadLocal 和引用计数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;以上还不是分布式锁的全部，在小册的拓展篇&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c19216fb9a04fb8773ed1&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《拾遗漏补 —— 再谈分布式锁》&lt;/a&gt;，我们还会继续对分布式锁做进一步的深入理解。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考题&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Review 下你自己的项目代码中的分布式锁，它的使用方式是否标准正确？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果你还没用过分布式锁，想想自己的项目中是否可以用上？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/19eebf889e445ffff42f254af2b6928a.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('107', '1551925505', '1551925505', null, '万丈高楼平地起 —— Redis 基础数据结构', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;基础：万丈高楼平地起 —— Redis 基础数据结构&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;千里之行，始于足下。本节我们的学习目标是：快速理解并掌握 Redis 的基础知识。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;由于本节内容是 Redis 最简单最容易掌握的知识，如果读者已经很熟悉 Redis 的基础数据结构，从珍惜生命的角度出发，你可以略过本节内容，跳到下一节继续阅读。如果你觉得本节的动画有点晃眼，阅读起来不那么舒服，可以看看作者的另一篇文章&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/post/5b53ee7e5188251aaa2d2e16&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《Redis 数据结构基础教程》&lt;/a&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;要体验 Redis，我们先从 Redis 安装说起。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 安装&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;体验 Redis 需要使用 Linux 或者 Mac 环境，如果是 Windows 可以考虑使用虚拟机。主要方式有四种：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用 Docker 安装。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 Github 源码编译。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;直接安装 apt-get install(Ubuntu)、yum install(RedHat) 或者 brew install(Mac)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果读者懒于安装操作，也可以使用网页版的&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://link.juejin.im/?target=https%3A%2F%2Ftry.redis.io%2F&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;Web Redis&lt;/a&gt;&amp;nbsp;直接体验。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;具体操作如下：&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Docker 方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;拉取&amp;nbsp;redis&amp;nbsp;镜像&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;pull&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行&amp;nbsp;redis&amp;nbsp;容器&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;run&amp;nbsp;--name&amp;nbsp;myredis&amp;nbsp;-d&amp;nbsp;-p6379:6379&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;执行容器中的&amp;nbsp;redis-cli，可以直接使用命令行操作&amp;nbsp;redis&amp;nbsp;&amp;gt;&amp;nbsp;docker&amp;nbsp;exec&amp;nbsp;-it&amp;nbsp;myredis&amp;nbsp;redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;Github 源码编译方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;下载源码&amp;nbsp;&amp;gt;&amp;nbsp;git&amp;nbsp;clone&amp;nbsp;--branch&amp;nbsp;2.8&amp;nbsp;--depth&amp;nbsp;1&amp;nbsp;git@github.com:antirez/redis.git&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;编译&amp;nbsp;&amp;gt;&amp;nbsp;make&amp;nbsp;&amp;gt;&amp;nbsp;cd&amp;nbsp;src&amp;nbsp;#&amp;nbsp;运行服务器，daemonize表示在后台运行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-server&amp;nbsp;--daemonize&amp;nbsp;yes&amp;nbsp;#&amp;nbsp;运行命令行&amp;nbsp;&amp;gt;&amp;nbsp;./redis-cli&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;直接安装方式&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;mac&amp;nbsp;&amp;gt;&amp;nbsp;brew&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;ubuntu&amp;nbsp;&amp;gt;&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;redhat&amp;nbsp;&amp;gt;&amp;nbsp;yum&amp;nbsp;install&amp;nbsp;redis&amp;nbsp;#&amp;nbsp;运行客户端&amp;nbsp;&amp;gt;&amp;nbsp;redis-cli&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 基础数据结构&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 有 5 种基础数据结构，分别为：string (字符串)、list (列表)、set (集合)、hash (哈希) 和 zset (有序集合)。熟练掌握这 5 种基本数据结构的使用是 Redis 知识最基础也最重要的部分，它也是在 Redis 面试题中问到最多的内容。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;本节将带领 Redis 初学者快速通关这 5 种基本数据结构。考虑到 Redis 的命令非常多，这里只选取那些最常见的指令进行讲解，如果有遗漏常见指令，读者可以在评论去留言。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string (字符串)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串 string 是 Redis 最简单的数据结构。Redis 所有的数据结构都是以唯一的 key 字符串作为名称，然后通过这个唯一 key 值来获取相应的 value 数据。不同类型的数据结构的差异就在于 value 的结构不一样。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458d666d851a12?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串结构使用非常广泛，一个常见的用途就是缓存用户信息。我们将用户信息结构体使用 JSON 序列化成字符串，然后将序列化后的字符串塞进 Redis 来缓存。同样，取用户信息会经过一次反序列化的过程。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;键值对&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;exists&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;name&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;批量键值对&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以批量对多个字符串进行读写，节省网络耗时开销。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name1&amp;nbsp;codehole&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;name2&amp;nbsp;holycoder&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;#&amp;nbsp;返回一个列表&amp;nbsp;1)&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;holycoder&amp;quot;&amp;nbsp;3)&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;mset&amp;nbsp;name1&amp;nbsp;boy&amp;nbsp;name2&amp;nbsp;girl&amp;nbsp;name3&amp;nbsp;unknown&amp;nbsp;&amp;gt;&amp;nbsp;mget&amp;nbsp;name1&amp;nbsp;name2&amp;nbsp;name3&amp;nbsp;1)&amp;nbsp;&amp;quot;boy&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;girl&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;unknown&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和 set 命令扩展&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;可以对 key 设置过期时间，到点自动删除，这个功能常用来控制缓存的失效时间。不过这个「自动删除」的机制是比较复杂的，如果你感兴趣，可以继续深入阅读第 26 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b4c42405188251b3950d251&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《朝生暮死——过期策略》&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;expire&amp;nbsp;name&amp;nbsp;5&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期&amp;nbsp;...&amp;nbsp;&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setex&amp;nbsp;name&amp;nbsp;5&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;5s&amp;nbsp;后过期，等价于&amp;nbsp;set+expire&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;wait&amp;nbsp;for&amp;nbsp;5s&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;(nil)&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;codehole&amp;nbsp;&amp;nbsp;#&amp;nbsp;如果&amp;nbsp;name&amp;nbsp;不存在就执行&amp;nbsp;set&amp;nbsp;创建&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;setnx&amp;nbsp;name&amp;nbsp;holycoder&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为&amp;nbsp;name&amp;nbsp;已经存在，所以&amp;nbsp;set&amp;nbsp;创建不成功&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;name&amp;nbsp;&amp;quot;codehole&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;没有改变&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果 value 值是一个整数，还可以对它进行自增操作。自增是有范围的，它的范围是 signed long 的最大最小值，超过了这个值，Redis 会报错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;age&amp;nbsp;30&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;age&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;5&amp;nbsp;(integer)&amp;nbsp;36&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;age&amp;nbsp;-5&amp;nbsp;(integer)&amp;nbsp;31&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;9223372036854775807&amp;nbsp;&amp;nbsp;#&amp;nbsp;Long.Max&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;codehole&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;字符串是由多个字节组成，每个字节又是由 8 个 bit 组成，如此便可以将一个字符串看成很多 bit 的组合，这便是 bitmap「位图」数据结构，位图的具体使用会放到后面的章节来讲。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字符串的内部结构实现，请阅读第 32 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5af9d96fb9a04f83465ada&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字符串」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list (列表)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表相当于 Java 语言里面的 LinkedList，注意它是链表而不是数组。这意味着 list 的插入和删除操作非常快，时间复杂度为 O(1)，但是索引定位很慢，时间复杂度为 O(n)，这点让人非常意外。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当列表弹出了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/1645918c2cdf772e?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的列表结构常用来做异步队列使用。将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进左边出：队列&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;右边进右边出：栈&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;books&amp;nbsp;(nil)&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;慢操作&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;lindex 相当于 Java 链表的&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;get(int index)&lt;/code&gt;方法，它需要对链表进行遍历，性能随着参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index&lt;/code&gt;增大而变差。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;ltrim 和字面上的含义不太一样，个人觉得它叫 lretain(保留) 更合适一些，因为 ltrim 跟的两个参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;start_index&lt;/code&gt;和&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;end_index&lt;/code&gt;定义了一个区间，在这个区间内的值，ltrim 要保留，区间之外统统砍掉。我们可以通过ltrim来实现一个定长的链表，这一点非常有用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;index 可以为负数，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-1&lt;/code&gt;表示倒数第一个元素，同样&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;index=-2&lt;/code&gt;表示倒数第二个元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;books&amp;nbsp;python&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;books&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素，O(n)&amp;nbsp;慎用&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;-1&amp;nbsp;#&amp;nbsp;O(n)&amp;nbsp;慎用&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;books&amp;nbsp;1&amp;nbsp;0&amp;nbsp;#&amp;nbsp;这其实是清空了整个列表，因为区间范围长度为负&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现 Redis 底层存储的还不是一个简单的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;linkedlist&lt;/code&gt;，而是称之为快速链表&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;&amp;nbsp;的一个结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。因为普通的链表需要的附加指针空间太大，会比较浪费空间，而且会加重内存的碎片化。比如这个列表里存的只是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;int&lt;/code&gt;&amp;nbsp;类型的数据，结构上还需要两个额外的指针&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;prev&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;next&lt;/code&gt;&amp;nbsp;。所以 Redis 将链表和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;结合起来组成了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;quicklist&lt;/code&gt;。也就是将多个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;ziplist&lt;/code&gt;&amp;nbsp;使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于列表的内部结构实现，请阅读第 34 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c95226fb9a04fa42fc3f6&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「压缩列表」内部》&lt;/a&gt;和第 35 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5c963be51d45199154e82e&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「快速列表」内部》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash (字典)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的字典相当于 Java 语言里面的 HashMap，它是无序字典。内部实现结构上同 Java 的 HashMap 也是一致的，同样的数组 + 链表二维结构。第一维 hash 的数组位置碰撞时，就会将碰撞的元素使用链表串接起来。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;不同的是，Redis 的字典的值只能是字符串，另外它们 rehash 的方式不一样，因为 Java 的 HashMap 在字典很大时，rehash 是个耗时的操作，需要一次性全部 rehash。Redis 为了高性能，不能堵塞服务，所以采用了渐进式 rehash 策略。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/28/164dc873b2a899a8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;渐进式 rehash 会在 rehash 的同时，保留新旧两个 hash 结构，查询时会同时查询两个 hash 结构，然后在后续的定时任务中以及 hash 操作指令中，循序渐进地将旧 hash 的内容一点点迁移到新的 hash 结构中。当搬迁完成了，就会使用新的hash结构取而代之。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当 hash 移除了最后一个元素之后，该数据结构自动被删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458ef82907e5e1?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;命令行的字符串如果包含空格，要用引号括起来&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;entries()，key&amp;nbsp;和&amp;nbsp;value&amp;nbsp;间隔出现&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;concurrency&amp;nbsp;in&amp;nbsp;go&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;python&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hlen&amp;nbsp;books&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;因为是更新操作，所以返回&amp;nbsp;0&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;books&amp;nbsp;golang&amp;nbsp;&amp;quot;learning&amp;nbsp;go&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;quot;effective&amp;nbsp;java&amp;quot;&amp;nbsp;python&amp;nbsp;&amp;quot;learning&amp;nbsp;python&amp;quot;&amp;nbsp;golang&amp;nbsp;&amp;quot;modern&amp;nbsp;golang&amp;nbsp;programming&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;批量&amp;nbsp;set&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;同字符串对象一样，hash 结构中的单个子 key 也可以进行计数，它对应的指令是&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;hincrby&lt;/code&gt;，和&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;incr&lt;/code&gt;使用基本一样。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;老钱又老了一岁&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;user-laoqian&amp;nbsp;age&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;30&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于字典的内部结构实现，请阅读第 33 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5bdbbd5188251ac22b5bf7&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「字典」内部》&lt;/a&gt;。&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set (集合)&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 的集合相当于 Java 语言里面的 HashSet，它内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;NULL&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;当集合中最后一个元素移除之后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set 结构可以用来存储活动中奖的用户 ID，因为有去重功能，可以保证同一个用户不会中奖两次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;python&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;nbsp;重复&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;sadd&amp;nbsp;books&amp;nbsp;java&amp;nbsp;golang&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意顺序，和插入的并不一致，因为&amp;nbsp;set&amp;nbsp;是无序的&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;golang&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;java&amp;nbsp;&amp;nbsp;#&amp;nbsp;查询某个&amp;nbsp;value&amp;nbsp;是否存在，相当于&amp;nbsp;contains(o)&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;books&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取长度相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;弹出一个&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;color: rgb(51, 51, 51);padding-bottom: 5px;font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset (有序集合)&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 25px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可能是 Redis 提供的最为特色的数据结构，它也是在面试中面试官最爱问的数据结构。它类似于 Java 的 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个 score，代表这个 value 的排序权重。它的内部实现用的是一种叫做「跳跃列表」的数据结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 中最后一个 value 被移除后，数据结构自动删除，内存被回收。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/2/16458f9f679a8bb0?imageslim&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 可以用来存粉丝列表，value 值是粉丝的用户 ID，score 是关注时间。我们可以对粉丝列表按关注时间进行排序。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 还可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;9.0&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.9&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;books&amp;nbsp;8.6&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;排序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;按&amp;nbsp;score&amp;nbsp;逆序列出，参数区间为排名范围&amp;nbsp;1)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zcard&amp;nbsp;books&amp;nbsp;&amp;nbsp;#&amp;nbsp;相当于&amp;nbsp;count()&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zscore&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取指定&amp;nbsp;value&amp;nbsp;的&amp;nbsp;score&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;内部&amp;nbsp;score&amp;nbsp;使用&amp;nbsp;double&amp;nbsp;类型进行存储，所以存在小数点精度问题&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;排名&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;0&amp;nbsp;8.91&amp;nbsp;&amp;nbsp;#&amp;nbsp;根据分值区间遍历&amp;nbsp;zset&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;books&amp;nbsp;-inf&amp;nbsp;8.91&amp;nbsp;withscores&amp;nbsp;#&amp;nbsp;根据分值区间&amp;nbsp;(-∞,&amp;nbsp;8.91]&amp;nbsp;遍历&amp;nbsp;zset，同时返回分值。inf&amp;nbsp;代表&amp;nbsp;infinite，无穷大的意思。&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;8.5999999999999996&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;8.9000000000000004&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrem&amp;nbsp;books&amp;nbsp;&amp;quot;java&amp;nbsp;concurrency&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除&amp;nbsp;value&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;books&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;nbsp;cookbook&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;think&amp;nbsp;in&amp;nbsp;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset 内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为 zset 要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照 score 值进行排序。这意味着当有新元素需要插入时，要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级 —— 部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于 L0、L1 和 L2 层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问，那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先 L0 层肯定是 100% 了，L1 层只有 50% 的概率，L2 层只有 25% 的概率，L3 层只有 12.5% 的概率，一直随机到最顶层 L31 层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;关于跳跃列表的内部结构实现，请阅读第 36 节&lt;a target=&quot;_blank&quot; href=&quot;https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b5ac63d5188256255299d9c&quot; style=&quot;;background-color: transparent;cursor: pointer;color: rgb(2, 105, 200);border-bottom: 1px solid rgb(209, 233, 255)&quot;&gt;《极度深寒 —— 探索「跳跃列表」内部结构》&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;容器型数据结构的通用规则&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list/set/hash/zset 这四种数据结构是容器型数据结构，它们共享下面两条通用规则：&lt;/p&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;create if not exists&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器不存在，那就创建一个，再进行操作。比如 rpush 操作刚开始是没有列表的，Redis 就会自动创建一个，然后再 rpush 进去新元素。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;drop if no elements&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果容器里元素没有了，那么立即删除元素，释放内存。这意味着 lpop 操作到最后一个元素，列表就消失了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;过期时间&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis 所有的数据结构都可以设置过期时间，时间到了，Redis 会自动删除相应的对象。需要注意的是过期是以对象为单位，比如一个 hash 结构的过期是整个 hash 对象的过期，而不是其中的某个子 key。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;还有一个需要特别注意的地方是如果一个字符串已经设置了过期时间，然后你调用了 set 方法修改了它，它的过期时间会消失。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 15px;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;expire&amp;nbsp;codehole&amp;nbsp;600&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;597&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;set&amp;nbsp;codehole&amp;nbsp;yoyo&amp;nbsp;OK&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ttl&amp;nbsp;codehole&amp;nbsp;(integer)&amp;nbsp;-1&lt;/pre&gt;&lt;h2 style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;思考 &amp;amp; 作业&lt;/h2&gt;&lt;ol style=&quot;padding-left: 28px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;font-size: 15px;white-space: normal;background-color: rgb(255, 255, 255)&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Java 用户，请定义一个用户信息结构体，然后使用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;fastjson&lt;/code&gt;&amp;nbsp;对用户信息对象进行序列化和反序列化，再使用 Jedis 对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;如果你是 Python 用户，使用内置的 JSON 包就可以了。然后通过 redis-py 来对 Redis 缓存的用户信息进行存和取。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想如果要改成用 hash 结构来缓存用户信息，你该如何封装比较合适？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;想想平时还有哪些指令你平时用过而本小节没有提到的？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回想一下掘金社区的功能模块中分别会使用到哪些数据结构？&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/32940386e992a44fb90e5ef5de49fb50.jpg', '0', '5', 'admin', '0');
INSERT INTO `y_cms_content` VALUES ('108', '1551925582', '1552292893', null, 'Vue.js 运行机制全局概览', '&lt;h1 style=&quot;font-size: 30px;margin: 35px 0px 5px;line-height: 1.5;padding-bottom: 5px&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 20px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;全局概览&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这一节笔者将为大家介绍一下 Vue.js 内部的整个流程，希望能让大家对全局有一个整体的印象，然后我们再来逐个模块进行讲解。从来没有了解过 Vue.js 实现的同学可能会对一些内容感到疑惑，这是很正常的，这一节的目的主要是为了让大家对整个流程有一个大概的认识，算是一个概览预备的过程，当把整本小册认真读完以后，再来阅读这一节，相信会有收获的。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;首先我们来看一下笔者画的内部流程图。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;大家第一次看到这个图一定是一头雾水的，没有关系，我们来逐个讲一下这些模块的作用以及调用关系。相信讲完之后大家对Vue.js内部运行机制会有一个大概的认识。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;初始化及挂载&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e8abbababbe6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;new Vue()&lt;/code&gt;&amp;nbsp;之后。 Vue 会调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;_init&lt;/code&gt;&amp;nbsp;函数进行初始化，也就是这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;过程，它会初始化生命周期、事件、 props、 methods、 data、 computed 与 watch 等。其中最重要的是通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;设置&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，用来实现「&lt;span style=&quot;font-weight: 700&quot;&gt;响应式&lt;/span&gt;」以及「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，后面会详细讲到，这里只要有一个印象即可。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;初始化之后调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;$mount&lt;/code&gt;&amp;nbsp;会挂载组件，如果是运行时编译，即不存在 render function 但是存在 template 的情况，需要进行「&lt;span style=&quot;font-weight: 700&quot;&gt;编译&lt;/span&gt;」步骤。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;编译&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;compile编译可以分成&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;三个阶段，最终需要得到 render function。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;parse&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;&amp;nbsp;会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;optimize&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;的主要作用是标记 static 静态节点，这是 Vue 在编译过程中的一处优化，后面当&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;更新界面时，会有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程， diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的性能。&lt;/p&gt;&lt;h3 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 0px;font-size: 18px&quot;&gt;generate&lt;/h3&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;是将 AST 转化成 render function 字符串的过程，得到结果是 render 的字符串以及 staticRenderFns 字符串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在经历过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;parse&lt;/code&gt;、&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;optimize&lt;/code&gt;&amp;nbsp;与&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;generate&lt;/code&gt;&amp;nbsp;这三个阶段以后，组件中就会存在渲染 VNode 所需的 render function 了。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;响应式&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;接下来也就是 Vue.js 响应式核心部分。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这里的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;跟&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;已经在之前介绍过了，在&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;init&lt;/code&gt;&amp;nbsp;的时候通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Object.defineProperty&lt;/code&gt;&amp;nbsp;进行了绑定，它使得当被设置的对象被读取的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数，而在当被赋值的时候会执行&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;函数。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当 render function 被渲染的时候，因为会读取所需对象的值，所以会触发&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;getter&lt;/code&gt;&amp;nbsp;函数进行「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」，「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。形成如下所示的这样一个关系。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;在修改对象的值的时候，会触发对应的&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;，&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter&lt;/code&gt;&amp;nbsp;通知之前「&lt;span style=&quot;font-weight: 700&quot;&gt;依赖收集&lt;/span&gt;」得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;update&lt;/code&gt;&amp;nbsp;来更新视图，当然这中间还有一个&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;的过程以及使用队列来异步更新的策略，这个我们后面再讲。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;Virtual DOM&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（ VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;比如说下面这样一个例子：&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;div&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个div标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;children:&amp;nbsp;[&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*存放该标签的子节点*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tag:&amp;nbsp;&amp;#39;a&amp;#39;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*说明这是一个a标签*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text:&amp;nbsp;&amp;#39;click&amp;nbsp;me&amp;#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*标签的内容*/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&amp;nbsp;}&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;渲染后可以得到&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 1em;line-height: 1.75;overflow: auto;position: relative&quot;&gt;&amp;lt;div&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a&amp;gt;click&amp;nbsp;me&amp;lt;/a&amp;gt;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如 isStatic （代表是否为静态节点）、 isComment （代表是否为注释节点）等。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;更新视图&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/21/1607715c316d4922?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;前面我们说到，在修改一个对象值的时候，会通过&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;setter -&amp;gt; Watcher -&amp;gt; update&lt;/code&gt;&amp;nbsp;的流程来修改对应的视图，那么最终是如何更新视图的呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;当数据变化后，执行 render function 就可以得到一个新的 VNode 节点，我们如果想要得到新的视图，最简单粗暴的方法就是直接解析这个新的 VNode 节点，然后用&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;innerHTML&lt;/code&gt;&amp;nbsp;直接全部渲染到真实 DOM 中。但是其实我们只对其中的一小块内容进行了修改，这样做似乎有些「&lt;span style=&quot;font-weight: 700&quot;&gt;浪费&lt;/span&gt;」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍我们的「&lt;span style=&quot;font-weight: 700&quot;&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&lt;/span&gt;」了。我们会将新的 VNode 与旧的 VNode 一起传入&amp;nbsp;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;patch&lt;/code&gt;&amp;nbsp;进行比较，经过 diff 算法得出它们的「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」。最后我们只需要将这些「&lt;span style=&quot;font-weight: 700&quot;&gt;差异&lt;/span&gt;」的对应 DOM 进行修改即可。&lt;/p&gt;&lt;h2 style=&quot;line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236)&quot;&gt;再看全局&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;lazyload inited loaded&quot; src=&quot;https://user-gold-cdn.xitu.io/2017/12/19/1606e7eaa2a664e8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;那么，让我们继续学习每一个模块吧!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '20190307/df25b071f577ec726c42f0023081cc50.jpg', '0', '4', 'admin', '1');
INSERT INTO `y_cms_content` VALUES ('124', '1551941560', '1551942207', '1551942207', '联系我们', '', null, '0', '3', 'admin', '0');

-- ----------------------------
-- Table structure for y_cms_tags
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_tags`;
CREATE TABLE `y_cms_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `title` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `hits` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '点击数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='标签表';

-- ----------------------------
-- Records of y_cms_tags
-- ----------------------------
INSERT INTO `y_cms_tags` VALUES ('1', '1551776993', '1551776993', null, 'about', '0');
INSERT INTO `y_cms_tags` VALUES ('2', '1551777037', '1551777037', null, 'protfolio', '0');
INSERT INTO `y_cms_tags` VALUES ('3', '1551777197', '1551777197', null, 'service', '0');
INSERT INTO `y_cms_tags` VALUES ('4', '1551923019', '1551923019', null, 'javascript', '1');
INSERT INTO `y_cms_tags` VALUES ('5', '1551923044', '1551923044', null, 'php', '0');
INSERT INTO `y_cms_tags` VALUES ('6', '1551923049', '1551923049', null, 'mysql', '0');
INSERT INTO `y_cms_tags` VALUES ('7', '1551924173', '1551924173', null, 'docker', '3');

-- ----------------------------
-- Table structure for y_cms_templates
-- ----------------------------
DROP TABLE IF EXISTS `y_cms_templates`;
CREATE TABLE `y_cms_templates` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `create_time` int(11) NOT NULL COMMENT '添加时间',
  `update_time` int(11) NOT NULL COMMENT '更新时间',
  `delete_time` int(11) DEFAULT NULL COMMENT '删除时间',
  `title` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '标题',
  `code` varchar(32) COLLATE utf8mb4_general_ci NOT NULL COMMENT '模板代码',
  `image` text COLLATE utf8mb4_general_ci COMMENT '缩略图',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='模板表';

-- ----------------------------
-- Records of y_cms_templates
-- ----------------------------

-- ----------------------------
-- Table structure for y_crontab
-- ----------------------------
DROP TABLE IF EXISTS `y_crontab`;
CREATE TABLE `y_crontab` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `type` varchar(10) NOT NULL DEFAULT '' COMMENT '事件类型',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '事件标题',
  `content` text NOT NULL COMMENT '事件内容',
  `schedule` varchar(100) NOT NULL DEFAULT '' COMMENT 'Crontab格式',
  `sleep` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '延迟秒数执行',
  `maximums` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大执行次数 0为不限',
  `executes` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '已经执行的次数',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `begintime` int(10) NOT NULL DEFAULT '0' COMMENT '开始时间',
  `endtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '结束时间',
  `executetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最后执行时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` enum('completed','expired','hidden','normal') NOT NULL DEFAULT 'normal' COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='定时任务表';

-- ----------------------------
-- Records of y_crontab
-- ----------------------------
INSERT INTO `y_crontab` VALUES ('1', 'url', '测试', 'http://www.baidu.com', '*/1 * * * *', '0', '0', '4', '1548655272', '1548730225', '0', '0', '1548730225', '0', 'normal');

-- ----------------------------
-- Table structure for y_crontab_log
-- ----------------------------
DROP TABLE IF EXISTS `y_crontab_log`;
CREATE TABLE `y_crontab_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_time` int(10) unsigned NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `crontab_id` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of y_crontab_log
-- ----------------------------

-- ----------------------------
-- Table structure for y_excel_examples
-- ----------------------------
DROP TABLE IF EXISTS `y_excel_examples`;
CREATE TABLE `y_excel_examples` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `age` tinyint(3) unsigned NOT NULL DEFAULT '1',
  `sex` varchar(8) NOT NULL,
  `city` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- ----------------------------
-- Records of y_excel_examples
-- ----------------------------
INSERT INTO `y_excel_examples` VALUES ('1', 'a', '25', '男', '济南');
INSERT INTO `y_excel_examples` VALUES ('2', 'b', '23', '女', '济南');
INSERT INTO `y_excel_examples` VALUES ('3', 'c', '1', '男', '济南');

-- ----------------------------
-- Table structure for y_sysconfigs
-- ----------------------------
DROP TABLE IF EXISTS `y_sysconfigs`;
CREATE TABLE `y_sysconfigs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `group_id` int(11) unsigned NOT NULL DEFAULT '1' COMMENT '分组默认1，系统设置',
  `name` varchar(255) NOT NULL COMMENT '名称',
  `code` varchar(255) NOT NULL COMMENT '代码',
  `content` varchar(255) NOT NULL COMMENT '内容',
  `description` varchar(255) NOT NULL COMMENT '描述',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '是否启用，1启用，0禁用',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0',
  `update_time` int(11) unsigned NOT NULL DEFAULT '0',
  `delete_time` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='系统参数表';

-- ----------------------------
-- Records of y_sysconfigs
-- ----------------------------
INSERT INTO `y_sysconfigs` VALUES ('1', '1', '后台名称', 'backend_name', 'YAdmin', '网站后台名称，title和登录界面显示', '1', '1502187289', '0', null);

-- ----------------------------
-- Table structure for y_syslog_trace
-- ----------------------------
DROP TABLE IF EXISTS `y_syslog_trace`;
CREATE TABLE `y_syslog_trace` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `log_id` int(11) unsigned NOT NULL COMMENT '日志id',
  `trace` longtext COMMENT '日志trace',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=623 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='系统日志trace表';

-- ----------------------------
-- Records of y_syslog_trace
-- ----------------------------
INSERT INTO `y_syslog_trace` VALUES ('1', '1', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('2', '2', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('3', '3', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('4', '4', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('5', '5', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('6', '6', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('7', '7', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('8', '8', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1182): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1663): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/Crontab.php(39): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\Crontab->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\Crontab), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('9', '9', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1182): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1663): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/Crontab.php(39): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\Crontab->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\Crontab), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('10', '10', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1182): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1663): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/Crontab.php(39): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\Crontab->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\Crontab), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('11', '11', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1182): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1663): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/Crontab.php(39): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\Crontab->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\Crontab), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('12', '12', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('13', '13', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('14', '14', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('15', '15', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('16', '16', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('17', '17', '#0 [internal function]: app\\admin\\controller\\WeAutoreply->edit(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('18', '18', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('19', '19', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('20', '20', '#0 [internal function]: app\\admin\\controller\\WeAutoreply->edit(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('21', '21', '#0 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('22', '22', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#2 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('23', '23', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#2 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('24', '24', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#2 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('25', '25', '#0 /var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('26', '26', '#0 /var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('27', '27', '#0 /var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weautoreply.php(46): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'1\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('28', '28', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('29', '29', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/Wxresponse.php(26): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\WxResponse->index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WxResponse), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('30', '30', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Weresponse.php(26): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeResponse->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('31', '31', '#0 /var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php(155): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 155, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weresponse.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeResponse->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('32', '32', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('33', '33', '#0 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(153): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 153, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('34', '34', '#0 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(152): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 152, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('35', '35', '#0 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(152): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 152, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('36', '36', '#0 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(152): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 152, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('37', '37', '#0 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(214): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 214, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('38', '38', '#0 [internal function]: think\\db\\Query->__call(\'adminGroup\', Array)\n#1 /var/www/html/base/thinkphp/library/think/Model.php(2190): call_user_func_array(Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1900): think\\Model->__call(\'adminGroup\', Array)\n#3 /var/www/html/base/thinkphp/library/think/db/Query.php(2548): think\\Model->relationQuery(Array)\n#4 /var/www/html/base/thinkphp/library/think/db/Query.php(1485): think\\db\\Query->select()\n#5 /var/www/html/base/application/admin/controller/Weautoreply.php(38): think\\db\\Query->paginate(10, false, Array)\n#6 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('39', '39', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'avatar\')\n#1 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(222): think\\Model->offsetGet(\'avatar\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/Weautoreply.php(43): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('40', '40', '#0 /var/www/html/base/application/admin/controller/Weautoreply.php(52): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 52, Array)\n#1 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'2\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('41', '41', '#0 /var/www/html/base/runtime/temp/a076629c4ea46d52358b00f3f3002c56.php(144): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 144, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(55): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('42', '42', '#0 /var/www/html/base/runtime/temp/a076629c4ea46d52358b00f3f3002c56.php(144): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 144, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weautoreply.php(55): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeAutoreply->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('43', '43', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Weautoreply.php(55): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeAutoreply->add()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('44', '44', '#0 /var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php(155): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 155, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weresponse.php(26): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeResponse->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('45', '45', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'text\')\n#1 /var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php(223): think\\Model->offsetGet(\'text\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/Weresponse.php(43): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\WeResponse->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('46', '46', '#0 [internal function]: app\\admin\\controller\\WeResponse->add()\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('47', '47', '#0 [internal function]: app\\admin\\controller\\WeResponse->add()\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('48', '48', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(73): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('49', '49', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(73): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('50', '50', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(96): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 96, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(73): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('51', '51', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(93): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 93, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(73): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('52', '52', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('53', '53', '#0 /var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Wemenu.php(38): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeMenu->index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('54', '54', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(93): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 93, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(74): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('55', '55', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(93): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 93, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(74): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('56', '56', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(99): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 99, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(75): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('57', '57', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(105): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 105, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(76): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('58', '58', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('59', '59', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('60', '60', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('61', '61', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('62', '62', '#0 /var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php(109): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 109, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(89): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->add()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('63', '63', '#0 /var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Wemenu.php(38): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeMenu->index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('64', '64', '#0 /var/www/html/base/runtime/temp/292640349a46fb378c74d56cb29f6a87.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(121): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->edit(\'15\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('65', '65', '#0 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#1 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/application/admin/controller/Weresponse.php(119): think\\View->fetch()\n#4 [internal function]: app\\admin\\controller\\WeResponse->edit(\'15\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('66', '66', '#0 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#1 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/application/admin/controller/Weresponse.php(119): think\\View->fetch()\n#4 [internal function]: app\\admin\\controller\\WeResponse->edit(\'15\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('67', '67', '#0 /var/www/html/base/application/admin/controller/Weautoreply.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'2\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('68', '68', '#0 /var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php(106): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 106, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weautoreply.php(84): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeAutoreply->edit(\'4\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('69', '69', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'status_text\')\n#1 /var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php(228): think\\Model->offsetGet(\'status_text\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/Weautoreply.php(45): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('70', '70', '#0 /var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Wemenu.php(38): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeMenu->index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('71', '71', '#0 /var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php(144): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 144, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Wemenu.php(38): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeMenu->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('72', '72', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Wemenu.php(38): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeMenu->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('73', '73', '#0 /var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php(165): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 165, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Wemenu.php(38): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeMenu->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('74', '75', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('75', '74', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('76', '77', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('77', '76', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('78', '78', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('79', '79', '#0 [internal function]: think\\db\\Query->__call(\'colunm\', Array)\n#1 /var/www/html/base/thinkphp/library/think/Model.php(2206): call_user_func_array(Array, Array)\n#2 /var/www/html/base/application/admin/controller/Wemenu.php(32): think\\Model::__callStatic(\'colunm\', Array)\n#3 [internal function]: app\\admin\\controller\\WeMenu->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('80', '80', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('81', '81', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('82', '82', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('83', '83', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('84', '84', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('85', '85', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('86', '86', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('87', '87', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('88', '88', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('89', '89', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('90', '90', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('91', '91', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('92', '92', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('93', '93', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('94', '94', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('95', '95', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('96', '96', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('97', '97', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('98', '98', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('99', '99', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('100', '100', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('101', '101', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('102', '102', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('103', '103', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('104', '104', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('105', '105', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('106', '106', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('107', '107', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('108', '108', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('109', '109', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('110', '110', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('111', '111', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('112', '112', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('113', '113', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('114', '114', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('115', '115', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('116', '116', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('117', '117', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('118', '118', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('119', '119', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('120', '120', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('121', '121', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('122', '122', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('123', '123', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('124', '124', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('125', '125', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('126', '126', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('127', '127', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('128', '128', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('129', '129', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('130', '130', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('131', '131', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('132', '132', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('133', '133', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('134', '134', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('135', '135', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('136', '136', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('137', '137', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('138', '138', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('139', '139', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('140', '140', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('141', '141', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('142', '142', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('143', '143', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('144', '144', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('145', '145', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('146', '146', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('147', '147', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('148', '148', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('149', '149', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('150', '150', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('151', '151', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('152', '152', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('153', '153', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('154', '154', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('155', '155', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('156', '156', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('157', '157', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('158', '158', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('159', '159', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('160', '160', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('161', '161', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('162', '162', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('163', '163', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('164', '164', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('165', '165', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('166', '166', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('167', '167', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('168', '168', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('169', '169', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('170', '170', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('171', '171', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('172', '172', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('173', '173', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('174', '174', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('175', '175', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('176', '176', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('177', '177', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('178', '178', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('179', '179', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('180', '180', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('181', '181', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('182', '182', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('183', '183', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('184', '184', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('185', '185', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('186', '186', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('187', '187', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('188', '188', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('189', '189', '#0 [internal function]: app\\admin\\controller\\WeMenu->sync(NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('190', '190', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('191', '191', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('192', '192', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('193', '193', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('194', '194', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('195', '195', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('196', '196', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('197', '197', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('198', '198', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('199', '199', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('200', '200', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('201', '201', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('202', '202', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('203', '203', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('204', '204', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('205', '205', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('206', '206', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('207', '207', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('208', '208', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('209', '209', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(54): think\\Error::appError(2, \'Invalid argumen...\', \'/var/www/html/b...\', 54, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('210', '210', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('211', '211', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(62): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 62, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('212', '212', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(61): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 61, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('213', '213', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(61): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 61, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('214', '214', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(62): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 62, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('215', '215', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('216', '216', '#0 /var/www/html/base/application/admin/controller/Wemenu.php(62): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 62, Array)\n#1 [internal function]: app\\admin\\controller\\WeMenu->edit(NULL)\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('217', '217', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('218', '218', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('219', '219', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('220', '220', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('221', '221', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('222', '222', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('223', '223', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('224', '224', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('225', '225', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('226', '226', '#0 /var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/application/admin/controller/Weresponse.php(52): think\\View->fetch()\n#6 [internal function]: app\\admin\\controller\\WeResponse->select()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('227', '227', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Weresponse.php(52): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeResponse->select()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('228', '228', '#0 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include()\n#1 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Weresponse.php(52): app\\admin\\controller\\Base->fetch()\n#7 [internal function]: app\\admin\\controller\\WeResponse->select()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('229', '229', '#0 /var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php(51): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 51, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Weresponse.php(52): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\WeResponse->select()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeResponse), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('230', '230', '#0 [internal function]: think\\db\\Query->where()\n#1 /var/www/html/base/thinkphp/library/think/Model.php(2206): call_user_func_array(Array, Array)\n#2 /var/www/html/base/application/admin/controller/Wemenu.php(38): think\\Model::__callStatic(\'where\', Array)\n#3 [internal function]: app\\admin\\controller\\WeMenu->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeMenu), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('231', '231', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('232', '232', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('233', '233', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('234', '234', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('235', '235', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('236', '236', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('237', '237', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('238', '238', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('239', '239', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('240', '240', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('241', '241', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('242', '242', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('243', '243', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('244', '244', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('245', '245', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('246', '246', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('247', '247', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('248', '248', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('249', '249', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('250', '250', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('251', '251', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('252', '252', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('253', '253', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('254', '254', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('255', '255', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('256', '256', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('257', '257', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('258', '258', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('259', '259', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('260', '260', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('261', '261', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/Weautoreply.php(45): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\WeAutoreply->index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\WeAutoreply), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('262', '262', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('263', '263', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('264', '264', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('265', '265', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('266', '266', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('267', '267', '#0 [internal function]: app\\admin\\controller\\Wechat->api()\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\Wechat), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('268', '268', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('269', '269', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('270', '270', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('271', '271', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('272', '272', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('273', '273', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('274', '274', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('275', '275', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('276', '276', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('277', '277', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('278', '278', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('279', '279', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('280', '280', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('281', '281', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('282', '282', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('283', '283', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('284', '284', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('285', '285', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('286', '286', '#0 /var/www/html/base/thinkphp/library/think/db/connector/Mysql.php(65): think\\db\\Connection->query(\'SHOW COLUMNS FR...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(1921): think\\db\\connector\\Mysql->getFields(\'`y_tags`\')\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(1969): think\\db\\Query->getTableInfo(\'y_tags\', \'type\')\n#3 /var/www/html/base/thinkphp/library/think/db/Query.php(1975): think\\db\\Query->getFieldsType(\'y_tags\')\n#4 /var/www/html/base/thinkphp/library/think/db/Builder.php(270): think\\db\\Query->getFieldsBind(\'y_tags\')\n#5 /var/www/html/base/thinkphp/library/think/db/Builder.php(240): think\\db\\Builder->buildWhere(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/db/Builder.php(719): think\\db\\Builder->parseWhere(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/db/Query.php(2462): think\\db\\Builder->select(Array)\n#8 /var/www/html/base/thinkphp/library/think/db/Query.php(441): think\\db\\Query->getPdo()\n#9 /var/www/html/base/thinkphp/library/think/db/Query.php(576): think\\db\\Query->value(\'COUNT(*) AS tp_...\', 0, true)\n#10 /var/www/html/base/thinkphp/library/think/db/Query.php(551): think\\db\\Query->aggregate(\'COUNT\', \'*\', true)\n#11 /var/www/html/base/thinkphp/library/think/db/Query.php(1484): think\\db\\Query->count()\n#12 [internal function]: think\\db\\Query->paginate(10)\n#13 /var/www/html/base/thinkphp/library/think/Model.php(2206): call_user_func_array(Array, Array)\n#14 /var/www/html/base/application/admin/controller/cms/Tags.php(18): think\\Model::__callStatic(\'paginate\', Array)\n#15 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#16 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#17 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#18 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#19 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#20 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#21 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#22 {main}');
INSERT INTO `y_syslog_trace` VALUES ('287', '287', '#0 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/cms/Tags.php(20): think\\Controller->fetch()\n#7 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('288', '288', '#0 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(190): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 190, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(21): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('289', '289', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Tags.php(34): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Tags->create()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('290', '290', '#0 /var/www/html/base/runtime/temp/ff1a31ef1c153609fa06f38688d6d5d1.php(73): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 73, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(34): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->create()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('291', '291', '#0 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(212): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 212, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(23): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('292', '292', '#0 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(265): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 265, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(23): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('293', '293', '#0 [internal function]: think\\Error::appError(2, \'call_user_func_...\', \'/var/www/html/b...\', 400, Array)\n#1 /var/www/html/base/thinkphp/library/think/Paginator.php(400): call_user_func_array(Array, Array)\n#2 /var/www/html/base/application/admin/controller/cms/Tags.php(21): think\\Paginator->__call(\'getPage\', Array)\n#3 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('294', '294', '#0 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(200): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 200, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(24): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('295', '295', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1665): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/cms/Tags.php(35): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\cms\\Tags->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('296', '296', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/thinkphp/library/think/Model.php(1665): think\\Model->save(Array, Array)\n#4 /var/www/html/base/application/admin/controller/cms/Tags.php(35): think\\Model::create(Array)\n#5 [internal function]: app\\admin\\controller\\cms\\Tags->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('297', '297', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'num\')\n#1 /var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php(209): think\\Model->offsetGet(\'num\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Tags.php(25): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('298', '298', '#0 /var/www/html/base/thinkphp/library/think/db/connector/Mysql.php(65): think\\db\\Connection->query(\'SHOW COLUMNS FR...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(1921): think\\db\\connector\\Mysql->getFields(\'`y_content`\')\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(1969): think\\db\\Query->getTableInfo(\'y_content\', \'type\')\n#3 /var/www/html/base/thinkphp/library/think/db/Query.php(1975): think\\db\\Query->getFieldsType(\'y_content\')\n#4 /var/www/html/base/thinkphp/library/think/db/Builder.php(270): think\\db\\Query->getFieldsBind(\'y_content\')\n#5 /var/www/html/base/thinkphp/library/think/db/Builder.php(240): think\\db\\Builder->buildWhere(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/db/Builder.php(719): think\\db\\Builder->parseWhere(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/db/Query.php(2462): think\\db\\Builder->select(Array)\n#8 /var/www/html/base/thinkphp/library/think/db/Query.php(441): think\\db\\Query->getPdo()\n#9 /var/www/html/base/thinkphp/library/think/db/Query.php(576): think\\db\\Query->value(\'COUNT(*) AS tp_...\', 0, true)\n#10 /var/www/html/base/thinkphp/library/think/db/Query.php(551): think\\db\\Query->aggregate(\'COUNT\', \'*\', true)\n#11 [internal function]: think\\db\\Query->count()\n#12 /var/www/html/base/thinkphp/library/think/model/Relation.php(144): call_user_func_array(Array, Array)\n#13 /var/www/html/base/application/admin/controller/cms/Tags.php(22): think\\model\\Relation->__call(\'count\', Array)\n#14 [internal function]: app\\admin\\controller\\cms\\Tags->index()\n#15 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#16 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#17 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#18 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#19 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#20 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#21 {main}');
INSERT INTO `y_syslog_trace` VALUES ('299', '299', '#0 /var/www/html/base/thinkphp/library/think/Template.php(1034): think\\Template->parseTemplateFile(false)\n#1 /var/www/html/base/thinkphp/library/think/Template.php(476): think\\Template->parseTemplateName(\'form\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(492): think\\Template->think\\{closure}(\'<!---->\\r\\n{inclu...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(373): think\\Template->parseInclude(\'<!---->\\r\\n<!DOCT...\')\n#4 /var/www/html/base/thinkphp/library/think/Template.php(333): think\\Template->parse(\'<!---->\\r\\n<!DOCT...\')\n#5 /var/www/html/base/thinkphp/library/think/Template.php(182): think\\Template->compiler(\'<!---->\\r\\n<!DOCT...\', \'/var/www/html/b...\')\n#6 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#9 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#10 /var/www/html/base/application/admin/controller/cms/Tags.php(45): app\\admin\\controller\\Base->fetch()\n#11 [internal function]: app\\admin\\controller\\cms\\Tags->add()\n#12 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#13 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#14 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#15 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#16 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#17 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#18 {main}');
INSERT INTO `y_syslog_trace` VALUES ('300', '300', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Tags.php(70): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Tags->edit(\'1\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('301', '301', '#0 /var/www/html/base/application/admin/controller/cms/Tags.php(58): think\\db\\Query->__call(\'save\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Tags->edit(\'1\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('302', '302', '#0 /var/www/html/base/application/admin/controller/cms/Tags.php(58): think\\db\\Query->__call(\'save\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Tags->edit(\'1\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('303', '303', '#0 /var/www/html/base/thinkphp/library/think/db/connector/Mysql.php(65): think\\db\\Connection->query(\'SHOW COLUMNS FR...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(1921): think\\db\\connector\\Mysql->getFields(\'`y_`\')\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(1955): think\\db\\Query->getTableInfo(\'y_\', \'pk\')\n#3 /var/www/html/base/thinkphp/library/think/Validate.php(895): think\\db\\Query->getPk()\n#4 [internal function]: think\\Validate->unique(\'IT\\xE6\\x96\\xB0\\xE9\\x97\\xBB\', Array, Array, \'title\', \'\\xE5\\x90\\x8D\\xE7\\xA7\\xB0\')\n#5 /var/www/html/base/thinkphp/library/think/Validate.php(410): call_user_func_array(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Validate.php(323): think\\Validate->checkItem(\'title\', \'IT\\xE6\\x96\\xB0\\xE9\\x97\\xBB\', Array, Array, \'\\xE5\\x90\\x8D\\xE7\\xA7\\xB0\', Array)\n#7 /var/www/html/base/application/admin/controller/cms/Tags.php(58): think\\Validate->check(Array)\n#8 [internal function]: app\\admin\\controller\\cms\\Tags->edit(\'1\')\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Tags), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('304', '304', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('305', '305', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('306', '306', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('307', '307', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('308', '308', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/cms/Category.php(18): think\\Controller->fetch()\n#3 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('309', '309', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/cms/Category.php(18): think\\Controller->fetch()\n#7 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('310', '310', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/cms/Category.php(18): think\\Controller->fetch()\n#7 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('311', '311', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(190): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 190, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(19): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('312', '312', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(255): think\\db\\Connection->query(\'SELECT * FROM `...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2470): think\\db\\Query->query(\'SELECT * FROM `...\', Array, false, true)\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(491): think\\db\\Query->getPdo()\n#3 /var/www/html/base/application/admin/controller/cms/Category.php(23): think\\db\\Query->column(\'*\', \'id\')\n#4 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('313', '313', '#0 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#1 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#2 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#4 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#5 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#6 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#7 {main}');
INSERT INTO `y_syslog_trace` VALUES ('314', '314', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(73): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 73, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(81): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('315', '315', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(73): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 73, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(81): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('316', '316', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(255): think\\db\\Connection->query(\'SELECT * FROM `...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2470): think\\db\\Query->query(\'SELECT * FROM `...\', Array, false, true)\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(491): think\\db\\Query->getPdo()\n#3 /var/www/html/base/application/admin/controller/cms/Category.php(95): think\\db\\Query->column(\'*\', \'id\')\n#4 /var/www/html/base/application/admin/controller/cms/Category.php(83): app\\admin\\controller\\cms\\Category->menu(0)\n#5 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('317', '317', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(131): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 131, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(85): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('318', '318', '#0 /var/www/html/base/extend/tools/Tree.php(155): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 155, Array)\n#1 /var/www/html/base/extend/tools/Tree.php(66): tools\\Tree->get_child(0)\n#2 /var/www/html/base/application/admin/controller/cms/Category.php(74): tools\\Tree->get_tree(0, \'<tr id=\'node-$i...\')\n#3 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('319', '319', '#0 /var/www/html/base/extend/tools/Tree.php(155): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 155, Array)\n#1 /var/www/html/base/extend/tools/Tree.php(66): tools\\Tree->get_child(0)\n#2 /var/www/html/base/application/admin/controller/cms/Category.php(74): tools\\Tree->get_tree(0, \'<tr id=\'node-$i...\')\n#3 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('320', '320', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(191): think\\Error::appError(8, \'Array to string...\', \'/var/www/html/b...\', 191, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(82): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('321', '321', '#0 /var/www/html/base/application/admin/controller/cms/Category.php(99): app\\admin\\controller\\cms\\Category->menu(0)\n#1 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('322', '322', '#0 [internal function]: think\\Error::appError(2, \'call_user_func_...\', \'/var/www/html/b...\', 410, Array)\n#1 /var/www/html/base/thinkphp/library/think/Validate.php(410): call_user_func_array(Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/Validate.php(323): think\\Validate->checkItem(\'image\', \'9ccd1b87ce6bf90...\', Array, Array, \'\\xE7\\xBC\\xA9\\xE7\\x95\\xA5\\xE5\\x9B\\xBE\', Array)\n#3 /var/www/html/base/application/admin/controller/cms/Category.php(48): think\\Validate->check(Array)\n#4 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('323', '323', '#0 [internal function]: think\\Error::appError(2, \'call_user_func_...\', \'/var/www/html/b...\', 410, Array)\n#1 /var/www/html/base/thinkphp/library/think/Validate.php(410): call_user_func_array(Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/Validate.php(323): think\\Validate->checkItem(\'image\', \'9e8069eadcb35fd...\', Array, Array, \'\\xE7\\xBC\\xA9\\xE7\\x95\\xA5\\xE5\\x9B\\xBE\', Array)\n#3 /var/www/html/base/application/admin/controller/cms/Category.php(48): think\\Validate->check(Array)\n#4 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('324', '324', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('325', '325', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('326', '326', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('327', '327', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('328', '328', '#0 [internal function]: think\\Error::appError(2, \'array_merge(): ...\', \'/var/www/html/b...\', 38, Array)\n#1 /var/www/html/base/application/admin/controller/cms/Category.php(38): array_merge(Array, Object(think\\File))\n#2 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('329', '329', '#0 [internal function]: think\\Error::appError(2, \'array_merge(): ...\', \'/var/www/html/b...\', 38, Array)\n#1 /var/www/html/base/application/admin/controller/cms/Category.php(38): array_merge(Array, Object(think\\File))\n#2 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('330', '330', '#0 /var/www/html/base/thinkphp/library/think/Validate.php(316): think\\Validate->getDataValue(Object(think\\File), \'title\')\n#1 /var/www/html/base/application/admin/controller/cms/Category.php(41): think\\Validate->check(Object(think\\File))\n#2 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#3 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#6 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#7 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#8 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#9 {main}');
INSERT INTO `y_syslog_trace` VALUES ('331', '331', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Category.php(78): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Category->edit(\'4\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('332', '332', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(90): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 90, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(61): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('333', '333', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(90): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 90, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(61): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('334', '334', '#0 /var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php(90): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 90, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(61): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('335', '335', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('336', '336', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('337', '337', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('338', '338', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('339', '339', '#0 /var/www/html/base/application/admin/controller/cms/Category.php(115): think\\db\\Query->__call(\'save\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Category->del(\'8\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('340', '340', '#0 /var/www/html/base/application/admin/controller/cms/Category.php(115): think\\db\\Query->__call(\'save\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Category->del(\'8\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('341', '341', '#0 /var/www/html/base/application/admin/controller/cms/Category.php(115): think\\db\\Query->__call(\'destory\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Category->del(\'8\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('342', '342', '#0 /var/www/html/base/application/admin/controller/cms/Category.php(115): think\\db\\Query->__call(\'destory\', Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Category->del(\'4\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('343', '343', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Content.php(13): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('344', '344', '#0 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(200): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 200, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(21): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('345', '345', '#0 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(235): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 235, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(23): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('346', '346', '#0 /var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php(78): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 78, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(41): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('347', '347', '#0 /var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php(100): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 100, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(41): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('348', '348', '#0 /var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php(100): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 100, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(345): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(41): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('349', '349', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('350', '350', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('351', '351', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('352', '352', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('353', '353', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('354', '354', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#1 /var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php(214): think\\Model->offsetGet(\'tag\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#8 /var/www/html/base/application/admin/controller/cms/Content.php(32): app\\admin\\controller\\Base->fetch()\n#9 [internal function]: app\\admin\\controller\\cms\\Content->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('355', '355', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('356', '356', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Content.php(84): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Content->edit(\'1\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('357', '357', '#0 /var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php(101): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 101, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'add\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'add\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Content.php(84): app\\admin\\controller\\Base->fetch(\'add\')\n#8 [internal function]: app\\admin\\controller\\cms\\Content->edit(\'1\')\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('358', '358', '#0 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#1 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'add\', Array, Array, Array)\n#4 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'add\', Array, Array, Array)\n#5 /var/www/html/base/application/admin/controller/cms/Content.php(84): app\\admin\\controller\\Base->fetch(\'add\')\n#6 [internal function]: app\\admin\\controller\\cms\\Content->edit(\'1\')\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('359', '359', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('360', '360', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('361', '361', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/cms/controller/Index.php(17): think\\Controller->fetch()\n#3 [internal function]: app\\cms\\controller\\Index->Index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('362', '364', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('363', '363', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('364', '362', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('365', '365', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('366', '367', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('367', '366', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('368', '368', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('369', '369', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('370', '370', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('371', '371', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('372', '373', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('373', '372', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('374', '374', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('375', '375', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('376', '379', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('377', '376', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('378', '378', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('379', '377', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('380', '381', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('381', '382', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('382', '380', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('383', '383', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('384', '384', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('385', '385', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('386', '386', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('387', '387', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('388', '388', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('389', '389', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('390', '390', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('391', '393', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('392', '395', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('393', '392', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('394', '394', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('395', '391', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('396', '396', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('397', '399', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('398', '398', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('399', '400', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('400', '401', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('401', '397', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('402', '406', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('403', '403', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('404', '402', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('405', '404', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('406', '405', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('407', '407', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('408', '408', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('409', '409', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('410', '410', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('411', '411', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('412', '412', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('413', '413', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('414', '414', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('415', '415', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('416', '416', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('417', '417', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(204): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 204, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(28): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('418', '418', '#0 /var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php(205): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 205, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Category.php(28): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Category->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Category), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('419', '419', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('420', '420', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('421', '421', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('422', '422', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('423', '423', '#0 /var/www/html/base/runtime/temp/f3e0d34c5a4173429cb7ce1ff93472bf.php(63): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 63, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/cms/Banner.php(25): think\\Controller->fetch()\n#7 [internal function]: app\\admin\\controller\\cms\\Banner->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('424', '424', '#0 /var/www/html/base/runtime/temp/f3e0d34c5a4173429cb7ce1ff93472bf.php(235): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 235, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Banner.php(25): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Banner->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('425', '425', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('426', '426', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('427', '427', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('428', '428', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('429', '429', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('430', '430', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('431', '431', '#0 /var/www/html/base/runtime/temp/3e18c662a429a14c8943a3ad37811f29.php(79): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 79, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Banner.php(31): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Banner->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('432', '432', '#0 /var/www/html/base/runtime/temp/3e18c662a429a14c8943a3ad37811f29.php(143): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 143, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Banner.php(32): app\\admin\\controller\\Base->fetch()\n#8 [internal function]: app\\admin\\controller\\cms\\Banner->add()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('433', '433', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('434', '434', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('435', '435', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('436', '436', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Banner.php(51): think\\Model->save()\n#4 [internal function]: app\\admin\\controller\\cms\\Banner->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('437', '437', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Banner.php(53): think\\Model->save()\n#4 [internal function]: app\\admin\\controller\\cms\\Banner->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('438', '438', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2230): think\\Model->getAttr(\'tag_id\')\n#1 /var/www/html/base/thinkphp/library/think/model/relation/HasOne.php(55): think\\Model->__get(\'tag_id\')\n#2 /var/www/html/base/thinkphp/library/think/Model.php(646): think\\model\\relation\\HasOne->getRelation()\n#3 /var/www/html/base/thinkphp/library/think/Model.php(622): think\\Model->getRelationData(Object(think\\model\\relation\\HasOne))\n#4 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'tag\')\n#5 /var/www/html/base/runtime/temp/f3e0d34c5a4173429cb7ce1ff93472bf.php(212): think\\Model->offsetGet(\'tag\')\n#6 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#7 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#8 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#11 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#12 /var/www/html/base/application/admin/controller/cms/Banner.php(30): app\\admin\\controller\\Base->fetch()\n#13 [internal function]: app\\admin\\controller\\cms\\Banner->index()\n#14 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#15 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#16 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#17 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#18 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#19 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#20 {main}');
INSERT INTO `y_syslog_trace` VALUES ('439', '439', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Banner.php(82): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Banner->edit(\'2\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('440', '440', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Banner.php(94): think\\Model->save()\n#4 [internal function]: app\\admin\\controller\\cms\\Banner->edit(\'2\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('441', '441', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'spacer\')\n#1 /var/www/html/base/extend/fast/Tree.php(465): think\\Model->offsetGet(\'spacer\')\n#2 /var/www/html/base/application/cms/controller/Index.php(37): fast\\Tree->getTreeList(Array)\n#3 /var/www/html/base/application/cms/controller/Index.php(15): app\\cms\\controller\\Index->getMenus()\n#4 [internal function]: app\\cms\\controller\\Index->Index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('442', '442', '#0 /var/www/html/base/thinkphp/library/think/Model.php(2294): think\\Model->getAttr(\'name\')\n#1 /var/www/html/base/extend/fast/Tree.php(465): think\\Model->offsetGet(\'name\')\n#2 /var/www/html/base/application/cms/controller/Index.php(37): fast\\Tree->getTreeList(Array)\n#3 /var/www/html/base/application/cms/controller/Index.php(15): app\\cms\\controller\\Index->getMenus()\n#4 [internal function]: app\\cms\\controller\\Index->Index()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('443', '443', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('444', '444', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('445', '445', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('446', '446', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('447', '447', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('448', '448', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('449', '449', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('450', '450', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('451', '451', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('452', '452', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('453', '453', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('454', '454', '#0 /var/www/html/base/runtime/temp/5c4c8bb415d94873a95be522dd084afd.php(70): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 70, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/index\', Array, Array, Array)\n#6 /var/www/html/base/application/cms/controller/Index.php(23): think\\Controller->fetch(\'flat/index\')\n#7 [internal function]: app\\cms\\controller\\Index->Index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('455', '455', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('456', '456', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('457', '457', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('458', '458', '#0 /var/www/html/base/thinkphp/library/think/Template.php(322): think\\Template->parseTemplateFile(false)\n#1 /var/www/html/base/thinkphp/library/think/Template.php(182): think\\Template->compiler(\'<div class=\"her...\', \'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/index\', Array, Array, Array)\n#5 /var/www/html/base/application/cms/controller/Index.php(29): think\\Controller->fetch(\'flat/index\')\n#6 [internal function]: app\\cms\\controller\\Index->Index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('459', '459', '#0 /var/www/html/base/thinkphp/library/think/Template.php(322): think\\Template->parseTemplateFile(false)\n#1 /var/www/html/base/thinkphp/library/think/Template.php(182): think\\Template->compiler(\'<div class=\"her...\', \'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/index\', Array, Array, Array)\n#5 /var/www/html/base/application/cms/controller/Index.php(29): think\\Controller->fetch(\'flat/index\')\n#6 [internal function]: app\\cms\\controller\\Index->Index()\n#7 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#10 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#11 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#12 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#13 {main}');
INSERT INTO `y_syslog_trace` VALUES ('460', '460', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('461', '462', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('462', '461', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('463', '463', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('464', '464', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('465', '465', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('466', '466', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('467', '468', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('468', '467', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('469', '469', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('470', '470', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('471', '471', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('472', '472', '#0 /var/www/html/base/application/cms/controller/Index.php(78): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 78, Array)\n#1 /var/www/html/base/application/cms/controller/Index.php(70): app\\cms\\controller\\Index->setMenuUrl(Array)\n#2 /var/www/html/base/application/cms/controller/Index.php(24): app\\cms\\controller\\Index->getMenus()\n#3 [internal function]: app\\cms\\controller\\Index->Index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('473', '473', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('474', '474', '#0 /var/www/html/base/runtime/temp/14799a9590241f3829df70d525e60480.php(59): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 59, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/index\', Array, Array, Array)\n#6 /var/www/html/base/application/cms/controller/Index.php(32): think\\Controller->fetch(\'flat/index\')\n#7 [internal function]: app\\cms\\controller\\Index->Index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('475', '475', '#0 /var/www/html/base/application/cms/controller/Index.php(79): think\\Error::appError(8, \'Undefined index...\', \'/var/www/html/b...\', 79, Array)\n#1 /var/www/html/base/application/cms/controller/Index.php(71): app\\cms\\controller\\Index->setMenuUrl(Array)\n#2 /var/www/html/base/application/cms/controller/Index.php(24): app\\cms\\controller\\Index->getMenus()\n#3 [internal function]: app\\cms\\controller\\Index->Index()\n#4 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#5 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#7 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#8 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#9 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#10 {main}');
INSERT INTO `y_syslog_trace` VALUES ('476', '476', '#0 [internal function]: think\\db\\Query->__call(\'2\', Array)\n#1 /var/www/html/base/thinkphp/library/think/Model.php(2190): call_user_func_array(Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(2099): think\\Model->__call(\'2\', Array)\n#3 [internal function]: think\\db\\Query->with(Array)\n#4 /var/www/html/base/thinkphp/library/think/Model.php(2206): call_user_func_array(Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Model.php(1739): think\\Model::__callStatic(\'with\', Array)\n#6 /var/www/html/base/thinkphp/library/think/Model.php(1706): think\\Model::parseQuery(\'tag_id\', \'2\', false)\n#7 /var/www/html/base/application/cms/controller/Index.php(43): think\\Model::get(\'tag_id\', \'2\')\n#8 [internal function]: app\\cms\\controller\\Index->tag(\'2\')\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('477', '477', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('478', '478', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('479', '479', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('480', '481', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('481', '480', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('482', '482', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('483', '483', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('484', '484', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('485', '485', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('486', '487', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('487', '486', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('488', '488', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('489', '489', '#0 /var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php(49): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 49, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'webset\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/cms/Config.php(18): think\\Controller->fetch(\'webset\')\n#7 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('490', '490', '#0 /var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php(111): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 111, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'webset\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'webset\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Config.php(16): app\\admin\\controller\\Base->fetch(\'webset\')\n#8 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('491', '491', '#0 /var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php(121): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 121, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'webset\', Array, Array, Array)\n#6 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'webset\', Array, Array, Array)\n#7 /var/www/html/base/application/admin/controller/cms/Config.php(16): app\\admin\\controller\\Base->fetch(\'webset\')\n#8 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('492', '492', '#0 [internal function]: think\\Error::appShutdown()\n#1 {main}');
INSERT INTO `y_syslog_trace` VALUES ('493', '493', '#0 /var/www/html/base/thinkphp/library/think/db/connector/Mysql.php(65): think\\db\\Connection->query(\'SHOW COLUMNS FR...\', Array, false, true)\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(1921): think\\db\\connector\\Mysql->getFields(\'`y_config`\')\n#2 /var/www/html/base/thinkphp/library/think/db/Query.php(1969): think\\db\\Query->getTableInfo(\'y_config\', \'type\')\n#3 /var/www/html/base/thinkphp/library/think/db/Query.php(1975): think\\db\\Query->getFieldsType(\'y_config\')\n#4 /var/www/html/base/thinkphp/library/think/db/Builder.php(270): think\\db\\Query->getFieldsBind(\'y_config\')\n#5 /var/www/html/base/thinkphp/library/think/db/Builder.php(240): think\\db\\Builder->buildWhere(Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/db/Builder.php(719): think\\db\\Builder->parseWhere(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/db/Query.php(2511): think\\db\\Builder->select(Array)\n#8 /var/www/html/base/application/admin/controller/cms/Config.php(21): think\\db\\Query->select()\n#9 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#10 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#12 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#13 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#14 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#15 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#16 {main}');
INSERT INTO `y_syslog_trace` VALUES ('494', '494', '#0 /var/www/html/base/application/admin/controller/cms/Config.php(30): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 30, Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('495', '495', '#0 /var/www/html/base/application/admin/controller/cms/Config.php(30): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 30, Array)\n#1 [internal function]: app\\admin\\controller\\cms\\Config->index()\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Config), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('496', '496', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('497', '497', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('498', '498', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('499', '499', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('500', '500', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Content.php(59): think\\Model->save(Array)\n#4 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('501', '501', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Content.php(59): think\\Model->save(Array)\n#4 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('502', '502', '#0 /var/www/html/base/thinkphp/library/think/db/Query.php(269): think\\db\\Connection->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#1 /var/www/html/base/thinkphp/library/think/db/Query.php(2275): think\\db\\Query->execute(\'INSERT INTO `y_...\', Array, Object(think\\db\\Query))\n#2 /var/www/html/base/thinkphp/library/think/Model.php(1184): think\\db\\Query->insert(Array, false, false, NULL)\n#3 /var/www/html/base/application/admin/controller/cms/Content.php(59): think\\Model->save(Array)\n#4 [internal function]: app\\admin\\controller\\cms\\Content->add()\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Content), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('503', '503', '#0 /var/www/html/base/runtime/temp/10daecef51ba8822e78704bddf0dbfb5.php(71): think\\Error::appError(8, \'Undefined varia...\', \'/var/www/html/b...\', 71, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/tag\', Array, Array, Array)\n#6 /var/www/html/base/application/cms/controller/Index.php(53): think\\Controller->fetch(\'flat/tag\')\n#7 [internal function]: app\\cms\\controller\\Index->tag(\'7\')\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('504', '504', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('505', '505', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('506', '506', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('507', '507', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('508', '508', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('509', '509', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('510', '510', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('511', '511', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('512', '512', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('513', '513', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('514', '514', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('515', '515', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('516', '517', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('517', '516', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('518', '518', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('519', '521', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('520', '520', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('521', '519', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('522', '522', '#0 [internal function]: think\\Error::appError(8, \'A non well form...\', \'/var/www/html/b...\', 76, Array)\n#1 /var/www/html/base/runtime/temp/24531c9f2a22fb5a64e9993d46cbe2ce.php(76): date(\'Y-m-d\', \'2019-03-07 10:0...\')\n#2 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#3 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#4 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#6 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/detail\', Array, Array, Array)\n#7 /var/www/html/base/application/cms/controller/Index.php(66): think\\Controller->fetch(\'flat/detail\')\n#8 [internal function]: app\\cms\\controller\\Index->content(\'3\')\n#9 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#11 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#12 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#13 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#14 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#15 {main}');
INSERT INTO `y_syslog_trace` VALUES ('523', '523', '#0 /var/www/html/base/application/cms/controller/Index.php(81): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 81, Array)\n#1 [internal function]: app\\cms\\controller\\Index->content(\'3\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('524', '524', '#0 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#1 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#2 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#3 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/detail\', Array, Array, Array)\n#4 /var/www/html/base/application/cms/controller/Index.php(87): think\\Controller->fetch(\'flat/detail\')\n#5 [internal function]: app\\cms\\controller\\Index->content(\'3\')\n#6 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#8 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#9 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#10 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#11 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#12 {main}');
INSERT INTO `y_syslog_trace` VALUES ('525', '527', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('526', '525', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('527', '526', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('528', '528', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('529', '529', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('530', '530', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('531', '531', '#0 /var/www/html/base/application/cms/controller/Index.php(70): think\\Error::appError(8, \'Trying to get p...\', \'/var/www/html/b...\', 70, Array)\n#1 [internal function]: app\\cms\\controller\\Index->content(\'124\')\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('532', '532', '#0 /var/www/html/base/runtime/temp/bab2e74fcf75f31b49a6f27dfce25b75.php(129): think\\Error::appError(2, \'Use of undefine...\', \'/var/www/html/b...\', 129, Array)\n#1 /var/www/html/base/thinkphp/library/think/template/driver/File.php(53): include(\'/var/www/html/b...\')\n#2 /var/www/html/base/thinkphp/library/think/Template.php(188): think\\template\\driver\\File->read(\'/var/www/html/b...\', Array)\n#3 /var/www/html/base/thinkphp/library/think/view/driver/Think.php(86): think\\Template->fetch(\'/var/www/html/b...\', Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#5 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'flat/contact\', Array, Array, Array)\n#6 /var/www/html/base/application/cms/controller/Index.php(116): think\\Controller->fetch(\'flat/contact\')\n#7 [internal function]: app\\cms\\controller\\Index->contact()\n#8 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#9 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#10 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#11 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#12 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#13 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#14 {main}');
INSERT INTO `y_syslog_trace` VALUES ('533', '535', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('534', '534', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('535', '533', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('536', '538', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('537', '536', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('538', '537', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('539', '540', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('540', '539', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('541', '541', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('542', '543', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('543', '542', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('544', '544', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('545', '545', '#0 /var/www/html/base/application/cms/controller/Index.php(110): think\\Error::appError(4096, \'Object of class...\', \'/var/www/html/b...\', 110, Array)\n#1 [internal function]: app\\cms\\controller\\Index->contact()\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('546', '546', '#0 /var/www/html/base/application/cms/controller/Index.php(110): think\\Error::appError(4096, \'Object of class...\', \'/var/www/html/b...\', 110, Array)\n#1 [internal function]: app\\cms\\controller\\Index->contact()\n#2 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\cms\\controller\\Index), Array)\n#3 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#4 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#5 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#6 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#7 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#8 {main}');
INSERT INTO `y_syslog_trace` VALUES ('547', '547', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('548', '549', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('549', '548', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('550', '550', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('551', '551', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('552', '552', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('553', '553', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('554', '554', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('555', '555', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('556', '556', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('557', '557', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('558', '558', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('559', '559', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('560', '561', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('561', '560', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('562', '562', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('563', '564', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('564', '563', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('565', '565', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('566', '566', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('567', '569', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('568', '567', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('569', '568', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('570', '570', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('571', '573', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('572', '571', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('573', '572', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('574', '574', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('575', '575', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('576', '576', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('577', '578', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('578', '579', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('579', '577', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('580', '581', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('581', '580', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('582', '582', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('583', '585', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('584', '583', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('585', '584', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('586', '586', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('587', '587', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('588', '588', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('589', '589', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('590', '590', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('591', '591', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('592', '592', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('593', '593', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('594', '596', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('595', '595', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('596', '594', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('597', '597', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('598', '598', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('599', '599', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('600', '602', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('601', '600', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('602', '601', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('603', '604', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('604', '603', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('605', '605', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('606', '606', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('607', '607', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('608', '608', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('609', '609', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('610', '610', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('611', '611', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('612', '612', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('613', '613', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('614', '614', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('615', '615', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('616', '616', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('617', '617', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('618', '618', '#0 /var/www/html/base/thinkphp/library/think/View.php(163): think\\view\\driver\\Think->fetch(\'/var/www/html/b...\', Array, Array)\n#1 /var/www/html/base/thinkphp/library/think/Controller.php(120): think\\View->fetch(\'\', Array, Array, Array)\n#2 /var/www/html/base/application/admin/controller/Base.php(346): think\\Controller->fetch(\'\', Array, Array, Array)\n#3 /var/www/html/base/application/admin/controller/cms/Banner.php(134): app\\admin\\controller\\Base->fetch()\n#4 [internal function]: app\\admin\\controller\\cms\\Banner->showUrl(\'6\')\n#5 /var/www/html/base/thinkphp/library/think/App.php(343): ReflectionMethod->invokeArgs(Object(app\\admin\\controller\\cms\\Banner), Array)\n#6 /var/www/html/base/thinkphp/library/think/App.php(611): think\\App::invokeMethod(Array, Array)\n#7 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, true)\n#8 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#9 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#10 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#11 {main}');
INSERT INTO `y_syslog_trace` VALUES ('619', '619', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('620', '620', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('621', '621', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');
INSERT INTO `y_syslog_trace` VALUES ('622', '622', '#0 /var/www/html/base/thinkphp/library/think/App.php(456): think\\App::module(Array, Array, NULL)\n#1 /var/www/html/base/thinkphp/library/think/App.php(139): think\\App::exec(Array, Array)\n#2 /var/www/html/base/thinkphp/start.php(19): think\\App::run()\n#3 /var/www/html/base/public/index.php(17): require(\'/var/www/html/b...\')\n#4 {main}');

-- ----------------------------
-- Table structure for y_syslogs
-- ----------------------------
DROP TABLE IF EXISTS `y_syslogs`;
CREATE TABLE `y_syslogs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `level` int(8) unsigned NOT NULL DEFAULT '0' COMMENT '错误等级',
  `message` varchar(255) NOT NULL COMMENT '错误信息',
  `file` varchar(255) NOT NULL COMMENT '文件',
  `line` int(10) unsigned NOT NULL COMMENT '所在行数',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=623 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='系统错误日志表';

-- ----------------------------
-- Records of y_syslogs
-- ----------------------------
INSERT INTO `y_syslogs` VALUES ('1', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1547357452');
INSERT INTO `y_syslogs` VALUES ('2', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1547447215');
INSERT INTO `y_syslogs` VALUES ('3', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1548386263');
INSERT INTO `y_syslogs` VALUES ('4', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1548647533');
INSERT INTO `y_syslogs` VALUES ('5', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1548647540');
INSERT INTO `y_syslogs` VALUES ('6', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1548647540');
INSERT INTO `y_syslogs` VALUES ('7', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1548647540');
INSERT INTO `y_syslogs` VALUES ('8', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'id\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1548655001');
INSERT INTO `y_syslogs` VALUES ('9', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'id\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1548655017');
INSERT INTO `y_syslogs` VALUES ('10', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'id\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1548655039');
INSERT INTO `y_syslogs` VALUES ('11', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'id\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1548655209');
INSERT INTO `y_syslogs` VALUES ('12', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550544647');
INSERT INTO `y_syslogs` VALUES ('13', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550544656');
INSERT INTO `y_syslogs` VALUES ('14', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550544656');
INSERT INTO `y_syslogs` VALUES ('15', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550544657');
INSERT INTO `y_syslogs` VALUES ('16', '0', 'controller not exists:app\\common\\model\\WechatAutoreply', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1550547011');
INSERT INTO `y_syslogs` VALUES ('17', '0', 'Fatal error: Call to a member function get() on null', '/var/www/html/base/application/admin/controller/Weautoreply.php', '34', '1550547132');
INSERT INTO `y_syslogs` VALUES ('18', '0', 'controller not exists:app\\common\\model\\WechatAutoreply', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1550547179');
INSERT INTO `y_syslogs` VALUES ('19', '0', 'controller not exists:app\\common\\model\\WechatAutoreply', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1550547354');
INSERT INTO `y_syslogs` VALUES ('20', '0', 'Fatal error: Call to undefined function app\\admin\\controller\\__()', '/var/www/html/base/application/admin/controller/Weautoreply.php', '34', '1550547452');
INSERT INTO `y_syslogs` VALUES ('21', '0', 'Fatal error: Class \'app\\admin\\controller\\WechatResponse\' not found', '/var/www/html/base/application/admin/controller/Weautoreply.php', '43', '1550547475');
INSERT INTO `y_syslogs` VALUES ('22', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/weautoreply/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1550547504');
INSERT INTO `y_syslogs` VALUES ('23', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/weautoreply/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1550547540');
INSERT INTO `y_syslogs` VALUES ('24', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/weautoreply/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1550547548');
INSERT INTO `y_syslogs` VALUES ('25', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php', '63', '1550547630');
INSERT INTO `y_syslogs` VALUES ('26', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php', '63', '1550547999');
INSERT INTO `y_syslogs` VALUES ('27', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php', '63', '1550555994');
INSERT INTO `y_syslogs` VALUES ('28', '0', 'Class \'app\\admin\\controller\\wechat\\Base\' not found', '/var/www/html/base/application/admin/controller/Wxresponse.php', '13', '1550556263');
INSERT INTO `y_syslogs` VALUES ('29', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/wxresponse/index.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1550556489');
INSERT INTO `y_syslogs` VALUES ('30', '0', 'Fatal error: Call to undefined function build_heading()', '/var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php', '145', '1550556546');
INSERT INTO `y_syslogs` VALUES ('31', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php', '155', '1550556584');
INSERT INTO `y_syslogs` VALUES ('32', '0', 'Fatal error: Call to undefined function build_heading()', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '145', '1550557113');
INSERT INTO `y_syslogs` VALUES ('33', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '153', '1550557167');
INSERT INTO `y_syslogs` VALUES ('34', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '152', '1550557308');
INSERT INTO `y_syslogs` VALUES ('35', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '152', '1550557349');
INSERT INTO `y_syslogs` VALUES ('36', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '152', '1550557399');
INSERT INTO `y_syslogs` VALUES ('37', '0', 'Undefined variable: list', '/var/www/html/base/runtime/temp/6503312d327c4800a5de4a74dd56a81a.php', '214', '1550557557');
INSERT INTO `y_syslogs` VALUES ('38', '0', 'method not exist:think\\db\\Query->adminGroup', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1550557767');
INSERT INTO `y_syslogs` VALUES ('39', '0', 'property not exists:app\\common\\model\\WechatAutoreply->avatar', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1550557797');
INSERT INTO `y_syslogs` VALUES ('40', '0', 'Undefined variable: ids', '/var/www/html/base/application/admin/controller/Weautoreply.php', '52', '1550558300');
INSERT INTO `y_syslogs` VALUES ('41', '0', 'Undefined variable: site', '/var/www/html/base/runtime/temp/a076629c4ea46d52358b00f3f3002c56.php', '144', '1550558469');
INSERT INTO `y_syslogs` VALUES ('42', '0', 'Undefined variable: site', '/var/www/html/base/runtime/temp/a076629c4ea46d52358b00f3f3002c56.php', '144', '1550558521');
INSERT INTO `y_syslogs` VALUES ('43', '0', 'Fatal error: Call to undefined function __()', '/var/www/html/base/runtime/temp/a076629c4ea46d52358b00f3f3002c56.php', '189', '1550558862');
INSERT INTO `y_syslogs` VALUES ('44', '0', 'Undefined variable: auth', '/var/www/html/base/runtime/temp/7d4cc61b15cd4ca133e74e085b67c142.php', '155', '1550560721');
INSERT INTO `y_syslogs` VALUES ('45', '0', 'property not exists:app\\common\\model\\WechatResponse->text', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1550560948');
INSERT INTO `y_syslogs` VALUES ('46', '0', 'Fatal error: Class \'addons\\wechat\\library\\Wechat\' not found', '/var/www/html/base/application/admin/controller/Weresponse.php', '71', '1550561278');
INSERT INTO `y_syslogs` VALUES ('47', '0', 'Fatal error: Class \'addons\\wechat\\library\\Wechat\' not found', '/var/www/html/base/application/admin/controller/Weresponse.php', '71', '1550562052');
INSERT INTO `y_syslogs` VALUES ('48', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '63', '1550562093');
INSERT INTO `y_syslogs` VALUES ('49', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '63', '1550562324');
INSERT INTO `y_syslogs` VALUES ('50', '0', 'Undefined variable: showFormFooter', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '96', '1550562753');
INSERT INTO `y_syslogs` VALUES ('51', '0', 'Undefined variable: showFormFooter', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '93', '1550562821');
INSERT INTO `y_syslogs` VALUES ('52', '0', 'Class \'app\\common\\controller\\Backend\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '15', '1550564593');
INSERT INTO `y_syslogs` VALUES ('53', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '63', '1550564621');
INSERT INTO `y_syslogs` VALUES ('54', '0', 'Undefined variable: showFormFooter', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '93', '1550565528');
INSERT INTO `y_syslogs` VALUES ('55', '0', 'Undefined variable: showFormFooter', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '93', '1550565644');
INSERT INTO `y_syslogs` VALUES ('56', '0', 'Undefined variable: showFormFooterSubmitButton', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '99', '1550565680');
INSERT INTO `y_syslogs` VALUES ('57', '0', 'Undefined variable: showFormFooterResetButton', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '105', '1550565705');
INSERT INTO `y_syslogs` VALUES ('58', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550626662');
INSERT INTO `y_syslogs` VALUES ('59', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550626675');
INSERT INTO `y_syslogs` VALUES ('60', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550626675');
INSERT INTO `y_syslogs` VALUES ('61', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550626675');
INSERT INTO `y_syslogs` VALUES ('62', '0', 'Undefined variable: showFormFooterResetButton', '/var/www/html/base/runtime/temp/f11276d9e22219470792bb4643dd3aaa.php', '109', '1550632999');
INSERT INTO `y_syslogs` VALUES ('63', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '63', '1550633072');
INSERT INTO `y_syslogs` VALUES ('64', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/292640349a46fb378c74d56cb29f6a87.php', '63', '1550634932');
INSERT INTO `y_syslogs` VALUES ('65', '0', 'Parse error: syntax error, unexpected \']\', expecting \',\' or \';\'', '/var/www/html/base/runtime/temp/292640349a46fb378c74d56cb29f6a87.php', '120', '1550646418');
INSERT INTO `y_syslogs` VALUES ('66', '0', 'Parse error: syntax error, unexpected \']\', expecting \',\' or \';\'', '/var/www/html/base/runtime/temp/292640349a46fb378c74d56cb29f6a87.php', '120', '1550646453');
INSERT INTO `y_syslogs` VALUES ('67', '0', 'Undefined variable: ids', '/var/www/html/base/application/admin/controller/Weautoreply.php', '63', '1550648579');
INSERT INTO `y_syslogs` VALUES ('68', '0', 'Undefined variable: showFormFooter', '/var/www/html/base/runtime/temp/d7f2f2c624753d7e115eb768b5d93fdd.php', '106', '1550650254');
INSERT INTO `y_syslogs` VALUES ('69', '0', 'property not exists:app\\common\\model\\WechatAutoreply->status_text', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1550651077');
INSERT INTO `y_syslogs` VALUES ('70', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '63', '1550651465');
INSERT INTO `y_syslogs` VALUES ('71', '0', 'Undefined variable: site', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '144', '1550651642');
INSERT INTO `y_syslogs` VALUES ('72', '0', 'Fatal error: Call to undefined function build_heading()', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '157', '1550651913');
INSERT INTO `y_syslogs` VALUES ('73', '0', 'Undefined variable: site', '/var/www/html/base/runtime/temp/e204b2241c6499318ec5d3375576b101.php', '165', '1550651950');
INSERT INTO `y_syslogs` VALUES ('74', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550652007');
INSERT INTO `y_syslogs` VALUES ('75', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550652007');
INSERT INTO `y_syslogs` VALUES ('76', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550652057');
INSERT INTO `y_syslogs` VALUES ('77', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550652057');
INSERT INTO `y_syslogs` VALUES ('78', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550652098');
INSERT INTO `y_syslogs` VALUES ('79', '0', 'method not exist:think\\db\\Query->colunm', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1550652818');
INSERT INTO `y_syslogs` VALUES ('80', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550655287');
INSERT INTO `y_syslogs` VALUES ('81', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550712336');
INSERT INTO `y_syslogs` VALUES ('82', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550712350');
INSERT INTO `y_syslogs` VALUES ('83', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550712350');
INSERT INTO `y_syslogs` VALUES ('84', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550712350');
INSERT INTO `y_syslogs` VALUES ('85', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550715396');
INSERT INTO `y_syslogs` VALUES ('86', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550715461');
INSERT INTO `y_syslogs` VALUES ('87', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550715575');
INSERT INTO `y_syslogs` VALUES ('88', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550715684');
INSERT INTO `y_syslogs` VALUES ('89', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550716589');
INSERT INTO `y_syslogs` VALUES ('90', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550716655');
INSERT INTO `y_syslogs` VALUES ('91', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550716745');
INSERT INTO `y_syslogs` VALUES ('92', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550716746');
INSERT INTO `y_syslogs` VALUES ('93', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550717060');
INSERT INTO `y_syslogs` VALUES ('94', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550717061');
INSERT INTO `y_syslogs` VALUES ('95', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550717201');
INSERT INTO `y_syslogs` VALUES ('96', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550717202');
INSERT INTO `y_syslogs` VALUES ('97', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550718853');
INSERT INTO `y_syslogs` VALUES ('98', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550718854');
INSERT INTO `y_syslogs` VALUES ('99', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550718918');
INSERT INTO `y_syslogs` VALUES ('100', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550718919');
INSERT INTO `y_syslogs` VALUES ('101', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550718983');
INSERT INTO `y_syslogs` VALUES ('102', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550719006');
INSERT INTO `y_syslogs` VALUES ('103', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550719035');
INSERT INTO `y_syslogs` VALUES ('104', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550719499');
INSERT INTO `y_syslogs` VALUES ('105', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720402');
INSERT INTO `y_syslogs` VALUES ('106', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720445');
INSERT INTO `y_syslogs` VALUES ('107', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720736');
INSERT INTO `y_syslogs` VALUES ('108', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720846');
INSERT INTO `y_syslogs` VALUES ('109', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720847');
INSERT INTO `y_syslogs` VALUES ('110', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720903');
INSERT INTO `y_syslogs` VALUES ('111', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720903');
INSERT INTO `y_syslogs` VALUES ('112', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550720940');
INSERT INTO `y_syslogs` VALUES ('113', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721030');
INSERT INTO `y_syslogs` VALUES ('114', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721030');
INSERT INTO `y_syslogs` VALUES ('115', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721092');
INSERT INTO `y_syslogs` VALUES ('116', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721093');
INSERT INTO `y_syslogs` VALUES ('117', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721132');
INSERT INTO `y_syslogs` VALUES ('118', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721133');
INSERT INTO `y_syslogs` VALUES ('119', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721585');
INSERT INTO `y_syslogs` VALUES ('120', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550721588');
INSERT INTO `y_syslogs` VALUES ('121', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550728225');
INSERT INTO `y_syslogs` VALUES ('122', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550728290');
INSERT INTO `y_syslogs` VALUES ('123', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550728323');
INSERT INTO `y_syslogs` VALUES ('124', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550729502');
INSERT INTO `y_syslogs` VALUES ('125', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550729538');
INSERT INTO `y_syslogs` VALUES ('126', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550729544');
INSERT INTO `y_syslogs` VALUES ('127', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550729706');
INSERT INTO `y_syslogs` VALUES ('128', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550729915');
INSERT INTO `y_syslogs` VALUES ('129', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730057');
INSERT INTO `y_syslogs` VALUES ('130', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730236');
INSERT INTO `y_syslogs` VALUES ('131', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730267');
INSERT INTO `y_syslogs` VALUES ('132', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730340');
INSERT INTO `y_syslogs` VALUES ('133', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730356');
INSERT INTO `y_syslogs` VALUES ('134', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730424');
INSERT INTO `y_syslogs` VALUES ('135', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730444');
INSERT INTO `y_syslogs` VALUES ('136', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730468');
INSERT INTO `y_syslogs` VALUES ('137', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730482');
INSERT INTO `y_syslogs` VALUES ('138', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730497');
INSERT INTO `y_syslogs` VALUES ('139', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730522');
INSERT INTO `y_syslogs` VALUES ('140', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730562');
INSERT INTO `y_syslogs` VALUES ('141', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730617');
INSERT INTO `y_syslogs` VALUES ('142', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730696');
INSERT INTO `y_syslogs` VALUES ('143', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730713');
INSERT INTO `y_syslogs` VALUES ('144', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730821');
INSERT INTO `y_syslogs` VALUES ('145', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550730834');
INSERT INTO `y_syslogs` VALUES ('146', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550731266');
INSERT INTO `y_syslogs` VALUES ('147', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550731352');
INSERT INTO `y_syslogs` VALUES ('148', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '82', '1550731356');
INSERT INTO `y_syslogs` VALUES ('149', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732238');
INSERT INTO `y_syslogs` VALUES ('150', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732274');
INSERT INTO `y_syslogs` VALUES ('151', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732294');
INSERT INTO `y_syslogs` VALUES ('152', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732327');
INSERT INTO `y_syslogs` VALUES ('153', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732466');
INSERT INTO `y_syslogs` VALUES ('154', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732605');
INSERT INTO `y_syslogs` VALUES ('155', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732685');
INSERT INTO `y_syslogs` VALUES ('156', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732690');
INSERT INTO `y_syslogs` VALUES ('157', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732741');
INSERT INTO `y_syslogs` VALUES ('158', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732796');
INSERT INTO `y_syslogs` VALUES ('159', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732818');
INSERT INTO `y_syslogs` VALUES ('160', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732927');
INSERT INTO `y_syslogs` VALUES ('161', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732987');
INSERT INTO `y_syslogs` VALUES ('162', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732988');
INSERT INTO `y_syslogs` VALUES ('163', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732988');
INSERT INTO `y_syslogs` VALUES ('164', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732989');
INSERT INTO `y_syslogs` VALUES ('165', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550732989');
INSERT INTO `y_syslogs` VALUES ('166', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550733019');
INSERT INTO `y_syslogs` VALUES ('167', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550733019');
INSERT INTO `y_syslogs` VALUES ('168', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550733020');
INSERT INTO `y_syslogs` VALUES ('169', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550733020');
INSERT INTO `y_syslogs` VALUES ('170', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550733020');
INSERT INTO `y_syslogs` VALUES ('171', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '85', '1550733033');
INSERT INTO `y_syslogs` VALUES ('172', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '85', '1550733261');
INSERT INTO `y_syslogs` VALUES ('173', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '85', '1550734010');
INSERT INTO `y_syslogs` VALUES ('174', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734015');
INSERT INTO `y_syslogs` VALUES ('175', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734015');
INSERT INTO `y_syslogs` VALUES ('176', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734016');
INSERT INTO `y_syslogs` VALUES ('177', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734017');
INSERT INTO `y_syslogs` VALUES ('178', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734017');
INSERT INTO `y_syslogs` VALUES ('179', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734108');
INSERT INTO `y_syslogs` VALUES ('180', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734109');
INSERT INTO `y_syslogs` VALUES ('181', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734109');
INSERT INTO `y_syslogs` VALUES ('182', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734110');
INSERT INTO `y_syslogs` VALUES ('183', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734110');
INSERT INTO `y_syslogs` VALUES ('184', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '85', '1550734113');
INSERT INTO `y_syslogs` VALUES ('185', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734162');
INSERT INTO `y_syslogs` VALUES ('186', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734166');
INSERT INTO `y_syslogs` VALUES ('187', '0', 'Fatal error: Class \'EasyWeChat\\Foundation\\Application\' not found', '/var/www/html/base/application/admin/controller/Wemenu.php', '85', '1550734368');
INSERT INTO `y_syslogs` VALUES ('188', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734724');
INSERT INTO `y_syslogs` VALUES ('189', '0', 'Fatal error: Call to undefined function app\\admin\\controller\\__()', '/var/www/html/base/application/admin/controller/Wemenu.php', '114', '1550734727');
INSERT INTO `y_syslogs` VALUES ('190', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550734879');
INSERT INTO `y_syslogs` VALUES ('191', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735139');
INSERT INTO `y_syslogs` VALUES ('192', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735167');
INSERT INTO `y_syslogs` VALUES ('193', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735193');
INSERT INTO `y_syslogs` VALUES ('194', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735214');
INSERT INTO `y_syslogs` VALUES ('195', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735283');
INSERT INTO `y_syslogs` VALUES ('196', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735330');
INSERT INTO `y_syslogs` VALUES ('197', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735397');
INSERT INTO `y_syslogs` VALUES ('198', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735616');
INSERT INTO `y_syslogs` VALUES ('199', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735765');
INSERT INTO `y_syslogs` VALUES ('200', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735831');
INSERT INTO `y_syslogs` VALUES ('201', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735938');
INSERT INTO `y_syslogs` VALUES ('202', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550735964');
INSERT INTO `y_syslogs` VALUES ('203', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736017');
INSERT INTO `y_syslogs` VALUES ('204', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736094');
INSERT INTO `y_syslogs` VALUES ('205', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736094');
INSERT INTO `y_syslogs` VALUES ('206', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736107');
INSERT INTO `y_syslogs` VALUES ('207', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736676');
INSERT INTO `y_syslogs` VALUES ('208', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550736783');
INSERT INTO `y_syslogs` VALUES ('209', '0', 'Invalid argument supplied for foreach()', '/var/www/html/base/application/admin/controller/Wemenu.php', '54', '1550737048');
INSERT INTO `y_syslogs` VALUES ('210', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550737282');
INSERT INTO `y_syslogs` VALUES ('211', '0', 'Undefined index: type', '/var/www/html/base/application/admin/controller/Wemenu.php', '62', '1550737801');
INSERT INTO `y_syslogs` VALUES ('212', '0', 'Undefined index: type', '/var/www/html/base/application/admin/controller/Wemenu.php', '61', '1550737850');
INSERT INTO `y_syslogs` VALUES ('213', '0', 'Undefined index: type', '/var/www/html/base/application/admin/controller/Wemenu.php', '61', '1550738001');
INSERT INTO `y_syslogs` VALUES ('214', '0', 'Undefined index: type', '/var/www/html/base/application/admin/controller/Wemenu.php', '62', '1550738070');
INSERT INTO `y_syslogs` VALUES ('215', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550738567');
INSERT INTO `y_syslogs` VALUES ('216', '0', 'Undefined index: type', '/var/www/html/base/application/admin/controller/Wemenu.php', '62', '1550738576');
INSERT INTO `y_syslogs` VALUES ('217', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550739215');
INSERT INTO `y_syslogs` VALUES ('218', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550739272');
INSERT INTO `y_syslogs` VALUES ('219', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550739276');
INSERT INTO `y_syslogs` VALUES ('220', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550739291');
INSERT INTO `y_syslogs` VALUES ('221', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550739864');
INSERT INTO `y_syslogs` VALUES ('222', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550740524');
INSERT INTO `y_syslogs` VALUES ('223', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550740528');
INSERT INTO `y_syslogs` VALUES ('224', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550740691');
INSERT INTO `y_syslogs` VALUES ('225', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550740873');
INSERT INTO `y_syslogs` VALUES ('226', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php', '63', '1550740881');
INSERT INTO `y_syslogs` VALUES ('227', '0', 'Fatal error: Call to undefined function build_heading()', '/var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php', '145', '1550740941');
INSERT INTO `y_syslogs` VALUES ('228', '0', 'Fatal error: Call to undefined function build_heading()', '/var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php', '4', '1550740999');
INSERT INTO `y_syslogs` VALUES ('229', '0', 'Undefined variable: list', '/var/www/html/base/runtime/temp/2ab0c0c659ef77d110f6867f3344d01d.php', '51', '1550741781');
INSERT INTO `y_syslogs` VALUES ('230', '0', 'Type error: Too few arguments to function think\\db\\Query::where(), 0 passed and at least 1 expected', '/var/www/html/base/thinkphp/library/think/db/Query.php', '1033', '1550742509');
INSERT INTO `y_syslogs` VALUES ('231', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550742736');
INSERT INTO `y_syslogs` VALUES ('232', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550742797');
INSERT INTO `y_syslogs` VALUES ('233', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550742930');
INSERT INTO `y_syslogs` VALUES ('234', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743005');
INSERT INTO `y_syslogs` VALUES ('235', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743157');
INSERT INTO `y_syslogs` VALUES ('236', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743163');
INSERT INTO `y_syslogs` VALUES ('237', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743281');
INSERT INTO `y_syslogs` VALUES ('238', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743308');
INSERT INTO `y_syslogs` VALUES ('239', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743309');
INSERT INTO `y_syslogs` VALUES ('240', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743337');
INSERT INTO `y_syslogs` VALUES ('241', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743462');
INSERT INTO `y_syslogs` VALUES ('242', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743476');
INSERT INTO `y_syslogs` VALUES ('243', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743476');
INSERT INTO `y_syslogs` VALUES ('244', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743480');
INSERT INTO `y_syslogs` VALUES ('245', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743480');
INSERT INTO `y_syslogs` VALUES ('246', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743508');
INSERT INTO `y_syslogs` VALUES ('247', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743798');
INSERT INTO `y_syslogs` VALUES ('248', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743817');
INSERT INTO `y_syslogs` VALUES ('249', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743817');
INSERT INTO `y_syslogs` VALUES ('250', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550743839');
INSERT INTO `y_syslogs` VALUES ('251', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744137');
INSERT INTO `y_syslogs` VALUES ('252', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744299');
INSERT INTO `y_syslogs` VALUES ('253', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744319');
INSERT INTO `y_syslogs` VALUES ('254', '0', 'module not exists:assets', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744319');
INSERT INTO `y_syslogs` VALUES ('255', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744331');
INSERT INTO `y_syslogs` VALUES ('256', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550744464');
INSERT INTO `y_syslogs` VALUES ('257', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550799076');
INSERT INTO `y_syslogs` VALUES ('258', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550799093');
INSERT INTO `y_syslogs` VALUES ('259', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550799093');
INSERT INTO `y_syslogs` VALUES ('260', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550799093');
INSERT INTO `y_syslogs` VALUES ('261', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/weautoreply/index.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1550803885');
INSERT INTO `y_syslogs` VALUES ('262', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550807486');
INSERT INTO `y_syslogs` VALUES ('263', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550807580');
INSERT INTO `y_syslogs` VALUES ('264', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550814969');
INSERT INTO `y_syslogs` VALUES ('265', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550814971');
INSERT INTO `y_syslogs` VALUES ('266', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550814974');
INSERT INTO `y_syslogs` VALUES ('267', '0', 'Fatal error: Call to undefined method EasyWeChat\\OfficialAccount\\Application::push()', '/var/www/html/base/application/admin/controller/Wechat.php', '44', '1550819274');
INSERT INTO `y_syslogs` VALUES ('268', '0', 'Interface \'Psr\\SimpleCache\\CacheInterface\' not found', '/var/www/html/base/vendor/symfony/cache/Simple/AbstractCache.php', '28', '1550825229');
INSERT INTO `y_syslogs` VALUES ('269', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550825231');
INSERT INTO `y_syslogs` VALUES ('270', '0', 'Interface \'Psr\\SimpleCache\\CacheInterface\' not found', '/var/www/html/base/vendor/symfony/cache/Simple/AbstractCache.php', '28', '1550825237');
INSERT INTO `y_syslogs` VALUES ('271', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550825939');
INSERT INTO `y_syslogs` VALUES ('272', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1550826009');
INSERT INTO `y_syslogs` VALUES ('273', '0', 'Interface \'Psr\\SimpleCache\\CacheInterface\' not found', '/var/www/html/base/vendor/symfony/cache/Simple/AbstractCache.php', '28', '1550826032');
INSERT INTO `y_syslogs` VALUES ('274', '0', 'Interface \'Psr\\SimpleCache\\CacheInterface\' not found', '/var/www/html/base/vendor/symfony/cache/Simple/AbstractCache.php', '28', '1550827838');
INSERT INTO `y_syslogs` VALUES ('275', '0', 'Interface \'Psr\\SimpleCache\\CacheInterface\' not found', '/var/www/html/base/vendor/symfony/cache/Simple/AbstractCache.php', '28', '1550827915');
INSERT INTO `y_syslogs` VALUES ('276', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551058328');
INSERT INTO `y_syslogs` VALUES ('277', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551058342');
INSERT INTO `y_syslogs` VALUES ('278', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551058342');
INSERT INTO `y_syslogs` VALUES ('279', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551058343');
INSERT INTO `y_syslogs` VALUES ('280', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551423910');
INSERT INTO `y_syslogs` VALUES ('281', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551423922');
INSERT INTO `y_syslogs` VALUES ('282', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551423922');
INSERT INTO `y_syslogs` VALUES ('283', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551423923');
INSERT INTO `y_syslogs` VALUES ('284', '0', 'module not exists:static', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551423981');
INSERT INTO `y_syslogs` VALUES ('285', '0', 'Cannot declare class app\\admin\\controller\\cms\\Tags because the name is already in use', '/var/www/html/base/application/admin/controller/cms/Tags.php', '9', '1551425921');
INSERT INTO `y_syslogs` VALUES ('286', '0', 'SQLSTATE[42S02]: Base table or view not found: 1146 Table \'base.y_tags\' doesn\'t exist', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551425971');
INSERT INTO `y_syslogs` VALUES ('287', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php', '63', '1551426003');
INSERT INTO `y_syslogs` VALUES ('288', '0', 'Undefined variable: menu_list', '/var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php', '190', '1551426072');
INSERT INTO `y_syslogs` VALUES ('289', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/tags/create.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551426233');
INSERT INTO `y_syslogs` VALUES ('290', '0', 'Undefined variable: selects', '/var/www/html/base/runtime/temp/ff1a31ef1c153609fa06f38688d6d5d1.php', '73', '1551426272');
INSERT INTO `y_syslogs` VALUES ('291', '0', 'Undefined variable: lists', '/var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php', '212', '1551426818');
INSERT INTO `y_syslogs` VALUES ('292', '0', 'Undefined variable: page', '/var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php', '265', '1551426835');
INSERT INTO `y_syslogs` VALUES ('293', '0', 'call_user_func_array() expects parameter 1 to be a valid callback, class \'think\\Collection\' does not have a method \'getPage\'', '/var/www/html/base/thinkphp/library/think/Paginator.php', '400', '1551426883');
INSERT INTO `y_syslogs` VALUES ('294', '0', 'Undefined variable: lists', '/var/www/html/base/runtime/temp/6ecf24f979ccbfde4715d68c33bb1f68.php', '200', '1551427739');
INSERT INTO `y_syslogs` VALUES ('295', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'create_time\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551428957');
INSERT INTO `y_syslogs` VALUES ('296', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'create_time\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551428987');
INSERT INTO `y_syslogs` VALUES ('297', '0', 'property not exists:app\\common\\model\\cms\\Tags->num', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551429207');
INSERT INTO `y_syslogs` VALUES ('298', '0', 'SQLSTATE[42S02]: Base table or view not found: 1146 Table \'base.y_content\' doesn\'t exist', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551429336');
INSERT INTO `y_syslogs` VALUES ('299', '0', 'template not exists:', '/var/www/html/base/thinkphp/library/think/Template.php', '1074', '1551431811');
INSERT INTO `y_syslogs` VALUES ('300', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/tags/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551432385');
INSERT INTO `y_syslogs` VALUES ('301', '0', 'method not exist:think\\db\\Query->save', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551432417');
INSERT INTO `y_syslogs` VALUES ('302', '0', 'method not exist:think\\db\\Query->save', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551433373');
INSERT INTO `y_syslogs` VALUES ('303', '0', 'SQLSTATE[42S02]: Base table or view not found: 1146 Table \'base.y_\' doesn\'t exist', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551433890');
INSERT INTO `y_syslogs` VALUES ('304', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551662785');
INSERT INTO `y_syslogs` VALUES ('305', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551662813');
INSERT INTO `y_syslogs` VALUES ('306', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551662813');
INSERT INTO `y_syslogs` VALUES ('307', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551662813');
INSERT INTO `y_syslogs` VALUES ('308', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/category/index.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551664355');
INSERT INTO `y_syslogs` VALUES ('309', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '63', '1551664394');
INSERT INTO `y_syslogs` VALUES ('310', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '63', '1551664474');
INSERT INTO `y_syslogs` VALUES ('311', '0', 'Undefined variable: menu_list', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '190', '1551664504');
INSERT INTO `y_syslogs` VALUES ('312', '0', 'SQLSTATE[42S22]: Column not found: 1054 Unknown column \'sort_id\' in \'order clause\'', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551665068');
INSERT INTO `y_syslogs` VALUES ('313', '0', 'Fatal error: Access to undeclared static property: fast\\Tree::$tree', '/var/www/html/base/application/admin/controller/cms/Category.php', '25', '1551665992');
INSERT INTO `y_syslogs` VALUES ('314', '0', 'Undefined variable: selects', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '73', '1551666082');
INSERT INTO `y_syslogs` VALUES ('315', '0', 'Undefined variable: selects', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '73', '1551666603');
INSERT INTO `y_syslogs` VALUES ('316', '0', 'SQLSTATE[42S22]: Column not found: 1054 Unknown column \'sort_id\' in \'order clause\'', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551667580');
INSERT INTO `y_syslogs` VALUES ('317', '0', 'Undefined variable: logtype', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '131', '1551667600');
INSERT INTO `y_syslogs` VALUES ('318', '0', 'Undefined index: parent_id', '/var/www/html/base/extend/tools/Tree.php', '155', '1551682029');
INSERT INTO `y_syslogs` VALUES ('319', '0', 'Undefined index: parent_id', '/var/www/html/base/extend/tools/Tree.php', '155', '1551682076');
INSERT INTO `y_syslogs` VALUES ('320', '0', 'Array to string conversion', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '191', '1551682873');
INSERT INTO `y_syslogs` VALUES ('321', '0', 'Fatal error: Call to undefined method fast\\Tree::get_tree()', '/var/www/html/base/application/admin/controller/cms/Category.php', '120', '1551683172');
INSERT INTO `y_syslogs` VALUES ('322', '0', 'call_user_func_array() expects parameter 1 to be a valid callback, class \'app\\admin\\validate\\cms\\CateValid\' does not have a method \'fileSiz\'', '/var/www/html/base/thinkphp/library/think/Validate.php', '410', '1551685303');
INSERT INTO `y_syslogs` VALUES ('323', '0', 'call_user_func_array() expects parameter 1 to be a valid callback, class \'app\\admin\\validate\\cms\\CateValid\' does not have a method \'fileSiz\'', '/var/www/html/base/thinkphp/library/think/Validate.php', '410', '1551685328');
INSERT INTO `y_syslogs` VALUES ('324', '0', 'module not exists:public', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551689177');
INSERT INTO `y_syslogs` VALUES ('325', '0', 'module not exists:public', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551689177');
INSERT INTO `y_syslogs` VALUES ('326', '0', 'module not exists:upload', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551689196');
INSERT INTO `y_syslogs` VALUES ('327', '0', 'module not exists:upload', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551689196');
INSERT INTO `y_syslogs` VALUES ('328', '0', 'array_merge(): Argument #2 is not an array', '/var/www/html/base/application/admin/controller/cms/Category.php', '38', '1551690209');
INSERT INTO `y_syslogs` VALUES ('329', '0', 'array_merge(): Argument #2 is not an array', '/var/www/html/base/application/admin/controller/cms/Category.php', '38', '1551690216');
INSERT INTO `y_syslogs` VALUES ('330', '0', 'Fatal error: Cannot use object of type think\\File as array', '/var/www/html/base/thinkphp/library/think/Validate.php', '1286', '1551690512');
INSERT INTO `y_syslogs` VALUES ('331', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/category/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551691071');
INSERT INTO `y_syslogs` VALUES ('332', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '90', '1551692497');
INSERT INTO `y_syslogs` VALUES ('333', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '90', '1551693570');
INSERT INTO `y_syslogs` VALUES ('334', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/f640e4520e0e685e5747acb99247d477.php', '90', '1551693700');
INSERT INTO `y_syslogs` VALUES ('335', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551750012');
INSERT INTO `y_syslogs` VALUES ('336', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551750021');
INSERT INTO `y_syslogs` VALUES ('337', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551750022');
INSERT INTO `y_syslogs` VALUES ('338', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551750022');
INSERT INTO `y_syslogs` VALUES ('339', '0', 'method not exist:think\\db\\Query->save', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551752668');
INSERT INTO `y_syslogs` VALUES ('340', '0', 'method not exist:think\\db\\Query->save', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551752678');
INSERT INTO `y_syslogs` VALUES ('341', '0', 'method not exist:think\\db\\Query->destory', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551752767');
INSERT INTO `y_syslogs` VALUES ('342', '0', 'method not exist:think\\db\\Query->destory', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551753054');
INSERT INTO `y_syslogs` VALUES ('343', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/content/index.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551753778');
INSERT INTO `y_syslogs` VALUES ('344', '0', 'Undefined variable: lists', '/var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php', '200', '1551753994');
INSERT INTO `y_syslogs` VALUES ('345', '0', 'Undefined variable: page', '/var/www/html/base/runtime/temp/5fea05dd77aab415bdb0b4e42a980f55.php', '235', '1551754049');
INSERT INTO `y_syslogs` VALUES ('346', '0', 'Undefined variable: row', '/var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php', '78', '1551757319');
INSERT INTO `y_syslogs` VALUES ('347', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php', '100', '1551757628');
INSERT INTO `y_syslogs` VALUES ('348', '0', 'Undefined variable: row', '/var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php', '100', '1551757665');
INSERT INTO `y_syslogs` VALUES ('349', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551764971');
INSERT INTO `y_syslogs` VALUES ('350', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551764992');
INSERT INTO `y_syslogs` VALUES ('351', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551765032');
INSERT INTO `y_syslogs` VALUES ('352', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551765325');
INSERT INTO `y_syslogs` VALUES ('353', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551765485');
INSERT INTO `y_syslogs` VALUES ('354', '0', 'property not exists:app\\common\\model\\cms\\Content->tag', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551765512');
INSERT INTO `y_syslogs` VALUES ('355', '0', 'module not exists:var', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551765708');
INSERT INTO `y_syslogs` VALUES ('356', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/content/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551766080');
INSERT INTO `y_syslogs` VALUES ('357', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php', '101', '1551766106');
INSERT INTO `y_syslogs` VALUES ('358', '0', 'Parse error: syntax error, unexpected \'default\' (T_DEFAULT)', '/var/www/html/base/runtime/temp/f56c5037a4a4f1bc87fb864d25814f09.php', '89', '1551766229');
INSERT INTO `y_syslogs` VALUES ('359', '0', 'controller not exists:app\\cms\\controller\\Index', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551775556');
INSERT INTO `y_syslogs` VALUES ('360', '0', 'controller not exists:app\\cms\\controller\\Index', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551775679');
INSERT INTO `y_syslogs` VALUES ('361', '0', 'template not exists:/var/www/html/base/public/../application/cms/view/index/index.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551775698');
INSERT INTO `y_syslogs` VALUES ('362', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('363', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('364', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('365', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('366', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('367', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775735');
INSERT INTO `y_syslogs` VALUES ('368', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('369', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('370', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('371', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('372', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('373', '0', 'method not exists:app\\cms\\controller\\Index->assets()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775736');
INSERT INTO `y_syslogs` VALUES ('374', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775823');
INSERT INTO `y_syslogs` VALUES ('375', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775823');
INSERT INTO `y_syslogs` VALUES ('376', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775824');
INSERT INTO `y_syslogs` VALUES ('377', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775824');
INSERT INTO `y_syslogs` VALUES ('378', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775824');
INSERT INTO `y_syslogs` VALUES ('379', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775824');
INSERT INTO `y_syslogs` VALUES ('380', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('381', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('382', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('383', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('384', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('385', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('386', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775825');
INSERT INTO `y_syslogs` VALUES ('387', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775826');
INSERT INTO `y_syslogs` VALUES ('388', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775826');
INSERT INTO `y_syslogs` VALUES ('389', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775826');
INSERT INTO `y_syslogs` VALUES ('390', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('391', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('392', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('393', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('394', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('395', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775827');
INSERT INTO `y_syslogs` VALUES ('396', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('397', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('398', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('399', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('400', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('401', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775828');
INSERT INTO `y_syslogs` VALUES ('402', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('403', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('404', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('405', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('406', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('407', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775829');
INSERT INTO `y_syslogs` VALUES ('408', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775830');
INSERT INTO `y_syslogs` VALUES ('409', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775830');
INSERT INTO `y_syslogs` VALUES ('410', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775830');
INSERT INTO `y_syslogs` VALUES ('411', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775830');
INSERT INTO `y_syslogs` VALUES ('412', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775830');
INSERT INTO `y_syslogs` VALUES ('413', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775831');
INSERT INTO `y_syslogs` VALUES ('414', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775831');
INSERT INTO `y_syslogs` VALUES ('415', '0', 'method not exists:app\\cms\\controller\\Index->cms()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551775831');
INSERT INTO `y_syslogs` VALUES ('416', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551776289');
INSERT INTO `y_syslogs` VALUES ('417', '0', 'Trying to get property \'title\' of non-object', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '204', '1551777737');
INSERT INTO `y_syslogs` VALUES ('418', '0', 'Trying to get property \'title\' of non-object', '/var/www/html/base/runtime/temp/be2532d11ca10e38715e114dbccb3782.php', '205', '1551777832');
INSERT INTO `y_syslogs` VALUES ('419', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551778575');
INSERT INTO `y_syslogs` VALUES ('420', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551778617');
INSERT INTO `y_syslogs` VALUES ('421', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551778617');
INSERT INTO `y_syslogs` VALUES ('422', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551778617');
INSERT INTO `y_syslogs` VALUES ('423', '0', 'Undefined variable: webData', '/var/www/html/base/runtime/temp/f3e0d34c5a4173429cb7ce1ff93472bf.php', '63', '1551783227');
INSERT INTO `y_syslogs` VALUES ('424', '0', 'Undefined variable: page', '/var/www/html/base/runtime/temp/f3e0d34c5a4173429cb7ce1ff93472bf.php', '235', '1551783249');
INSERT INTO `y_syslogs` VALUES ('425', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551836095');
INSERT INTO `y_syslogs` VALUES ('426', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551836095');
INSERT INTO `y_syslogs` VALUES ('427', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551836107');
INSERT INTO `y_syslogs` VALUES ('428', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551836107');
INSERT INTO `y_syslogs` VALUES ('429', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551836107');
INSERT INTO `y_syslogs` VALUES ('430', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551836265');
INSERT INTO `y_syslogs` VALUES ('431', '0', 'Undefined variable: info', '/var/www/html/base/runtime/temp/3e18c662a429a14c8943a3ad37811f29.php', '79', '1551837955');
INSERT INTO `y_syslogs` VALUES ('432', '0', 'Undefined variable: tags', '/var/www/html/base/runtime/temp/3e18c662a429a14c8943a3ad37811f29.php', '143', '1551838040');
INSERT INTO `y_syslogs` VALUES ('433', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551838383');
INSERT INTO `y_syslogs` VALUES ('434', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551838383');
INSERT INTO `y_syslogs` VALUES ('435', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551838383');
INSERT INTO `y_syslogs` VALUES ('436', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'content_id\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551838666');
INSERT INTO `y_syslogs` VALUES ('437', '0', 'SQLSTATE[HY000]: General error: 1364 Field \'type\' doesn\'t have a default value', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551842601');
INSERT INTO `y_syslogs` VALUES ('438', '0', 'property not exists:app\\common\\model\\cms\\Banners->tag_id', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551843172');
INSERT INTO `y_syslogs` VALUES ('439', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/banner/edit.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551844448');
INSERT INTO `y_syslogs` VALUES ('440', '0', 'SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry \'2\' for key \'PRIMARY\'', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551852545');
INSERT INTO `y_syslogs` VALUES ('441', '0', 'property not exists:app\\common\\model\\cms\\Category->spacer', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551855135');
INSERT INTO `y_syslogs` VALUES ('442', '0', 'property not exists:app\\common\\model\\cms\\Category->name', '/var/www/html/base/thinkphp/library/think/Model.php', '626', '1551855184');
INSERT INTO `y_syslogs` VALUES ('443', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856574');
INSERT INTO `y_syslogs` VALUES ('444', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856574');
INSERT INTO `y_syslogs` VALUES ('445', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856574');
INSERT INTO `y_syslogs` VALUES ('446', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856620');
INSERT INTO `y_syslogs` VALUES ('447', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856620');
INSERT INTO `y_syslogs` VALUES ('448', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551856620');
INSERT INTO `y_syslogs` VALUES ('449', '0', 'method not exists:app\\cms\\controller\\Index->categroy()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551856861');
INSERT INTO `y_syslogs` VALUES ('450', '0', 'method not exists:app\\cms\\controller\\Index->categroy()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551856884');
INSERT INTO `y_syslogs` VALUES ('451', '0', 'method not exists:app\\cms\\controller\\Index->categroy()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551856958');
INSERT INTO `y_syslogs` VALUES ('452', '0', 'method not exists:app\\cms\\controller\\Index->categroy()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551857028');
INSERT INTO `y_syslogs` VALUES ('453', '0', 'method not exists:app\\cms\\controller\\Index->categroy()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551857038');
INSERT INTO `y_syslogs` VALUES ('454', '0', 'Undefined variable: banners', '/var/www/html/base/runtime/temp/5c4c8bb415d94873a95be522dd084afd.php', '70', '1551860446');
INSERT INTO `y_syslogs` VALUES ('455', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551860461');
INSERT INTO `y_syslogs` VALUES ('456', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551860461');
INSERT INTO `y_syslogs` VALUES ('457', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551860461');
INSERT INTO `y_syslogs` VALUES ('458', '0', 'template not exists:', '/var/www/html/base/thinkphp/library/think/Template.php', '1074', '1551861709');
INSERT INTO `y_syslogs` VALUES ('459', '0', 'template not exists:', '/var/www/html/base/thinkphp/library/think/Template.php', '1074', '1551861784');
INSERT INTO `y_syslogs` VALUES ('460', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('461', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('462', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('463', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('464', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('465', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('466', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861794');
INSERT INTO `y_syslogs` VALUES ('467', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861795');
INSERT INTO `y_syslogs` VALUES ('468', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861795');
INSERT INTO `y_syslogs` VALUES ('469', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861795');
INSERT INTO `y_syslogs` VALUES ('470', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861795');
INSERT INTO `y_syslogs` VALUES ('471', '0', 'controller not exists:app\\cms\\controller\\Assets', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551861795');
INSERT INTO `y_syslogs` VALUES ('472', '0', 'Undefined index: type', '/var/www/html/base/application/cms/controller/Index.php', '78', '1551862916');
INSERT INTO `y_syslogs` VALUES ('473', '0', 'method not exists:app\\cms\\controller\\Index->item()', '/var/www/html/base/thinkphp/library/think/App.php', '606', '1551863050');
INSERT INTO `y_syslogs` VALUES ('474', '0', 'Undefined index: url', '/var/www/html/base/runtime/temp/14799a9590241f3829df70d525e60480.php', '59', '1551863145');
INSERT INTO `y_syslogs` VALUES ('475', '0', 'Undefined index: id', '/var/www/html/base/application/cms/controller/Index.php', '79', '1551863238');
INSERT INTO `y_syslogs` VALUES ('476', '0', 'method not exist:think\\db\\Query->2', '/var/www/html/base/thinkphp/library/think/db/Query.php', '103', '1551864644');
INSERT INTO `y_syslogs` VALUES ('477', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864706');
INSERT INTO `y_syslogs` VALUES ('478', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864706');
INSERT INTO `y_syslogs` VALUES ('479', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864706');
INSERT INTO `y_syslogs` VALUES ('480', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864823');
INSERT INTO `y_syslogs` VALUES ('481', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864823');
INSERT INTO `y_syslogs` VALUES ('482', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864826');
INSERT INTO `y_syslogs` VALUES ('483', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864978');
INSERT INTO `y_syslogs` VALUES ('484', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864978');
INSERT INTO `y_syslogs` VALUES ('485', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551864979');
INSERT INTO `y_syslogs` VALUES ('486', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551865025');
INSERT INTO `y_syslogs` VALUES ('487', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551865025');
INSERT INTO `y_syslogs` VALUES ('488', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551865025');
INSERT INTO `y_syslogs` VALUES ('489', '0', 'Undefined variable: showFormHeader', '/var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php', '49', '1551865418');
INSERT INTO `y_syslogs` VALUES ('490', '0', 'Undefined variable: selects', '/var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php', '111', '1551865464');
INSERT INTO `y_syslogs` VALUES ('491', '0', 'Undefined variable: tags', '/var/www/html/base/runtime/temp/277a5a8d9d4c3e51c948a4024b6730a9.php', '121', '1551865530');
INSERT INTO `y_syslogs` VALUES ('492', '0', 'Cannot declare class app\\admin\\controller\\cms\\Config because the name is already in use', '/var/www/html/base/application/admin/controller/cms/Config.php', '10', '1551866186');
INSERT INTO `y_syslogs` VALUES ('493', '0', 'SQLSTATE[42S02]: Base table or view not found: 1146 Table \'base.y_config\' doesn\'t exist', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '385', '1551866318');
INSERT INTO `y_syslogs` VALUES ('494', '0', 'Trying to get property \'content\' of non-object', '/var/www/html/base/application/admin/controller/cms/Config.php', '30', '1551867439');
INSERT INTO `y_syslogs` VALUES ('495', '0', 'Trying to get property \'content\' of non-object', '/var/www/html/base/application/admin/controller/cms/Config.php', '30', '1551867440');
INSERT INTO `y_syslogs` VALUES ('496', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551922692');
INSERT INTO `y_syslogs` VALUES ('497', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551922708');
INSERT INTO `y_syslogs` VALUES ('498', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551922708');
INSERT INTO `y_syslogs` VALUES ('499', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1551922708');
INSERT INTO `y_syslogs` VALUES ('500', '0', 'SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column \'content\' at row 1', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551924873');
INSERT INTO `y_syslogs` VALUES ('501', '0', 'SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column \'content\' at row 1', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551925101');
INSERT INTO `y_syslogs` VALUES ('502', '0', 'SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column \'content\' at row 1', '/var/www/html/base/thinkphp/library/think/db/Connection.php', '453', '1551925339');
INSERT INTO `y_syslogs` VALUES ('503', '0', 'Undefined variable: data', '/var/www/html/base/runtime/temp/10daecef51ba8822e78704bddf0dbfb5.php', '71', '1551927862');
INSERT INTO `y_syslogs` VALUES ('504', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929226');
INSERT INTO `y_syslogs` VALUES ('505', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929226');
INSERT INTO `y_syslogs` VALUES ('506', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929226');
INSERT INTO `y_syslogs` VALUES ('507', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929426');
INSERT INTO `y_syslogs` VALUES ('508', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929426');
INSERT INTO `y_syslogs` VALUES ('509', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929426');
INSERT INTO `y_syslogs` VALUES ('510', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929491');
INSERT INTO `y_syslogs` VALUES ('511', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929491');
INSERT INTO `y_syslogs` VALUES ('512', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929494');
INSERT INTO `y_syslogs` VALUES ('513', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929505');
INSERT INTO `y_syslogs` VALUES ('514', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929505');
INSERT INTO `y_syslogs` VALUES ('515', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551929505');
INSERT INTO `y_syslogs` VALUES ('516', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930102');
INSERT INTO `y_syslogs` VALUES ('517', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930102');
INSERT INTO `y_syslogs` VALUES ('518', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930102');
INSERT INTO `y_syslogs` VALUES ('519', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930164');
INSERT INTO `y_syslogs` VALUES ('520', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930164');
INSERT INTO `y_syslogs` VALUES ('521', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551930164');
INSERT INTO `y_syslogs` VALUES ('522', '0', 'A non well formed numeric value encountered', '/var/www/html/base/runtime/temp/24531c9f2a22fb5a64e9993d46cbe2ce.php', '76', '1551930762');
INSERT INTO `y_syslogs` VALUES ('523', '0', 'Trying to get property \'title\' of non-object', '/var/www/html/base/application/cms/controller/Index.php', '81', '1551938450');
INSERT INTO `y_syslogs` VALUES ('524', '0', 'Parse error: syntax error, unexpected \')\'', '/var/www/html/base/runtime/temp/24531c9f2a22fb5a64e9993d46cbe2ce.php', '85', '1551938488');
INSERT INTO `y_syslogs` VALUES ('525', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939528');
INSERT INTO `y_syslogs` VALUES ('526', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939528');
INSERT INTO `y_syslogs` VALUES ('527', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939528');
INSERT INTO `y_syslogs` VALUES ('528', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939615');
INSERT INTO `y_syslogs` VALUES ('529', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939615');
INSERT INTO `y_syslogs` VALUES ('530', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551939615');
INSERT INTO `y_syslogs` VALUES ('531', '0', 'Trying to get property \'tag_id\' of non-object', '/var/www/html/base/application/cms/controller/Index.php', '70', '1551942213');
INSERT INTO `y_syslogs` VALUES ('532', '0', 'Use of undefined constant url - assumed \'url\' (this will throw an Error in a future version of PHP)', '/var/www/html/base/runtime/temp/bab2e74fcf75f31b49a6f27dfce25b75.php', '129', '1551944322');
INSERT INTO `y_syslogs` VALUES ('533', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944354');
INSERT INTO `y_syslogs` VALUES ('534', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944354');
INSERT INTO `y_syslogs` VALUES ('535', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944354');
INSERT INTO `y_syslogs` VALUES ('536', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944361');
INSERT INTO `y_syslogs` VALUES ('537', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944361');
INSERT INTO `y_syslogs` VALUES ('538', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944361');
INSERT INTO `y_syslogs` VALUES ('539', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944382');
INSERT INTO `y_syslogs` VALUES ('540', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944382');
INSERT INTO `y_syslogs` VALUES ('541', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944382');
INSERT INTO `y_syslogs` VALUES ('542', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944485');
INSERT INTO `y_syslogs` VALUES ('543', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944485');
INSERT INTO `y_syslogs` VALUES ('544', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944485');
INSERT INTO `y_syslogs` VALUES ('545', '0', 'Object of class think\\response\\Json could not be converted to string', '/var/www/html/base/application/cms/controller/Index.php', '110', '1551944536');
INSERT INTO `y_syslogs` VALUES ('546', '0', 'Object of class think\\response\\Json could not be converted to string', '/var/www/html/base/application/cms/controller/Index.php', '110', '1551944536');
INSERT INTO `y_syslogs` VALUES ('547', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944743');
INSERT INTO `y_syslogs` VALUES ('548', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944743');
INSERT INTO `y_syslogs` VALUES ('549', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944743');
INSERT INTO `y_syslogs` VALUES ('550', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944798');
INSERT INTO `y_syslogs` VALUES ('551', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944798');
INSERT INTO `y_syslogs` VALUES ('552', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551944798');
INSERT INTO `y_syslogs` VALUES ('553', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949519');
INSERT INTO `y_syslogs` VALUES ('554', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949519');
INSERT INTO `y_syslogs` VALUES ('555', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949530');
INSERT INTO `y_syslogs` VALUES ('556', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949530');
INSERT INTO `y_syslogs` VALUES ('557', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949640');
INSERT INTO `y_syslogs` VALUES ('558', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949640');
INSERT INTO `y_syslogs` VALUES ('559', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949640');
INSERT INTO `y_syslogs` VALUES ('560', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949802');
INSERT INTO `y_syslogs` VALUES ('561', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949802');
INSERT INTO `y_syslogs` VALUES ('562', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949802');
INSERT INTO `y_syslogs` VALUES ('563', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949807');
INSERT INTO `y_syslogs` VALUES ('564', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949807');
INSERT INTO `y_syslogs` VALUES ('565', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949807');
INSERT INTO `y_syslogs` VALUES ('566', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949807');
INSERT INTO `y_syslogs` VALUES ('567', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949819');
INSERT INTO `y_syslogs` VALUES ('568', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949819');
INSERT INTO `y_syslogs` VALUES ('569', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949819');
INSERT INTO `y_syslogs` VALUES ('570', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949820');
INSERT INTO `y_syslogs` VALUES ('571', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949860');
INSERT INTO `y_syslogs` VALUES ('572', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949860');
INSERT INTO `y_syslogs` VALUES ('573', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949860');
INSERT INTO `y_syslogs` VALUES ('574', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949875');
INSERT INTO `y_syslogs` VALUES ('575', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949875');
INSERT INTO `y_syslogs` VALUES ('576', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551949875');
INSERT INTO `y_syslogs` VALUES ('577', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950455');
INSERT INTO `y_syslogs` VALUES ('578', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950455');
INSERT INTO `y_syslogs` VALUES ('579', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950455');
INSERT INTO `y_syslogs` VALUES ('580', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950488');
INSERT INTO `y_syslogs` VALUES ('581', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950488');
INSERT INTO `y_syslogs` VALUES ('582', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950488');
INSERT INTO `y_syslogs` VALUES ('583', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950610');
INSERT INTO `y_syslogs` VALUES ('584', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950610');
INSERT INTO `y_syslogs` VALUES ('585', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950610');
INSERT INTO `y_syslogs` VALUES ('586', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950751');
INSERT INTO `y_syslogs` VALUES ('587', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950751');
INSERT INTO `y_syslogs` VALUES ('588', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950751');
INSERT INTO `y_syslogs` VALUES ('589', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950768');
INSERT INTO `y_syslogs` VALUES ('590', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950768');
INSERT INTO `y_syslogs` VALUES ('591', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950768');
INSERT INTO `y_syslogs` VALUES ('592', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950802');
INSERT INTO `y_syslogs` VALUES ('593', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950802');
INSERT INTO `y_syslogs` VALUES ('594', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950868');
INSERT INTO `y_syslogs` VALUES ('595', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950868');
INSERT INTO `y_syslogs` VALUES ('596', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950868');
INSERT INTO `y_syslogs` VALUES ('597', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950884');
INSERT INTO `y_syslogs` VALUES ('598', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950884');
INSERT INTO `y_syslogs` VALUES ('599', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950885');
INSERT INTO `y_syslogs` VALUES ('600', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950994');
INSERT INTO `y_syslogs` VALUES ('601', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950994');
INSERT INTO `y_syslogs` VALUES ('602', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551950994');
INSERT INTO `y_syslogs` VALUES ('603', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951007');
INSERT INTO `y_syslogs` VALUES ('604', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951007');
INSERT INTO `y_syslogs` VALUES ('605', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951008');
INSERT INTO `y_syslogs` VALUES ('606', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951035');
INSERT INTO `y_syslogs` VALUES ('607', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951035');
INSERT INTO `y_syslogs` VALUES ('608', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951036');
INSERT INTO `y_syslogs` VALUES ('609', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951066');
INSERT INTO `y_syslogs` VALUES ('610', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951066');
INSERT INTO `y_syslogs` VALUES ('611', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951066');
INSERT INTO `y_syslogs` VALUES ('612', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951071');
INSERT INTO `y_syslogs` VALUES ('613', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951071');
INSERT INTO `y_syslogs` VALUES ('614', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951071');
INSERT INTO `y_syslogs` VALUES ('615', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951085');
INSERT INTO `y_syslogs` VALUES ('616', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951085');
INSERT INTO `y_syslogs` VALUES ('617', '0', 'controller not exists:app\\cms\\controller\\Flat', '/var/www/html/base/thinkphp/library/think/App.php', '583', '1551951085');
INSERT INTO `y_syslogs` VALUES ('618', '0', 'template not exists:/var/www/html/base/public/../application/admin/view/cms/banner/show_url.html', '/var/www/html/base/thinkphp/library/think/view/driver/Think.php', '82', '1551951855');
INSERT INTO `y_syslogs` VALUES ('619', '0', 'module not exists:favicon.ico', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1552291745');
INSERT INTO `y_syslogs` VALUES ('620', '0', 'module not exists:favicon-32x32.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1552291758');
INSERT INTO `y_syslogs` VALUES ('621', '0', 'module not exists:favicon-16x16.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1552291758');
INSERT INTO `y_syslogs` VALUES ('622', '0', 'module not exists:favicon-96x96.png', '/var/www/html/base/thinkphp/library/think/App.php', '535', '1552291758');

-- ----------------------------
-- Table structure for y_user_levels
-- ----------------------------
DROP TABLE IF EXISTS `y_user_levels`;
CREATE TABLE `y_user_levels` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL COMMENT '等级名称',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) unsigned NOT NULL DEFAULT '0',
  `delete_time` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='前台用户等级表';

-- ----------------------------
-- Records of y_user_levels
-- ----------------------------
INSERT INTO `y_user_levels` VALUES ('1', '普通会员', '1533695231', '1533695231', null);
INSERT INTO `y_user_levels` VALUES ('2', '中级会员', '1533695240', '1533695240', null);
INSERT INTO `y_user_levels` VALUES ('3', '高级会员', '1533695246', '1533695246', null);

-- ----------------------------
-- Table structure for y_users
-- ----------------------------
DROP TABLE IF EXISTS `y_users`;
CREATE TABLE `y_users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `level_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '用户等级id',
  `name` varchar(50) NOT NULL COMMENT '用户账号',
  `password` char(32) NOT NULL COMMENT '密码',
  `nickname` varchar(50) NOT NULL COMMENT '昵称',
  `headimg` varchar(255) NOT NULL COMMENT '头像',
  `mobile` char(11) NOT NULL DEFAULT '' COMMENT '手机号',
  `email` varchar(255) NOT NULL COMMENT '邮箱',
  `money` decimal(11,2) unsigned NOT NULL DEFAULT '0.00' COMMENT '余额',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '状态，1启用，2禁用',
  `reg_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '注册时间',
  `last_login_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '最后登录时间',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `update_time` int(11) unsigned NOT NULL DEFAULT '0',
  `delete_time` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='前台用户表';

-- ----------------------------
-- Records of y_users
-- ----------------------------
INSERT INTO `y_users` VALUES ('1', '1', 'test001', '14e1b600b1fd579f47433b88e8d85291', 'test001', '/uploads/attachment/20180808/dd9be964dc8cec705ef2626be6a94648.png', '13000000001', '', '0.00', '1', '0', '0', '1533695403', '1533695403', null);
INSERT INTO `y_users` VALUES ('2', '2', 'test002', '14e1b600b1fd579f47433b88e8d85291', 'test002', '/uploads/attachment/20180808/7e2a8ed1e5e301608e8851e8df8d0bbe.png', '13000000002', '', '0.00', '1', '0', '0', '1533695438', '1533695438', null);
INSERT INTO `y_users` VALUES ('3', '3', 'test003', '14e1b600b1fd579f47433b88e8d85291', 'test003', '/uploads/attachment/20180808/1c6bcdb692cc11df6b393e90d30af5e2.png', '13000000003', '', '0.00', '1', '0', '0', '1533695461', '1533695461', null);

-- ----------------------------
-- Table structure for y_wechat_autoreply
-- ----------------------------
DROP TABLE IF EXISTS `y_wechat_autoreply`;
CREATE TABLE `y_wechat_autoreply` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `text` varchar(100) NOT NULL DEFAULT '' COMMENT '触发文本',
  `eventkey` varchar(50) NOT NULL DEFAULT '' COMMENT '响应事件',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '添加时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='微信自动回复表';

-- ----------------------------
-- Records of y_wechat_autoreply
-- ----------------------------
INSERT INTO `y_wechat_autoreply` VALUES ('1', '输入hello', 'hello', '58fdfaa9e1965', '123', '1493366855', '1550816881', '1');
INSERT INTO `y_wechat_autoreply` VALUES ('2', '输入你好', '你好', '58cb852984970', 'sad', '1493704976', '1550650950', '1');

-- ----------------------------
-- Table structure for y_wechat_config
-- ----------------------------
DROP TABLE IF EXISTS `y_wechat_config`;
CREATE TABLE `y_wechat_config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '配置名称',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '配置标题',
  `value` text NOT NULL COMMENT '配置值',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='微信配置表';

-- ----------------------------
-- Records of y_wechat_config
-- ----------------------------
INSERT INTO `y_wechat_config` VALUES ('1', 'menu', '微信菜单', '[{\"name\":\"缘创派\",\"sub_button\":[{\"type\":\"click\",\"name\":\"ssk\",\"key\":\"58c7d908c4570\"},{\"type\":\"click\",\"name\":\"在线演示\",\"key\":\"58cb852984970\"},{\"type\":\"location_select\",\"name\":\"文档\",\"key\":\"58fdfaa9e1965\"}]},{\"name\":\"在线客服\",\"sub_button\":[{\"type\":\"pic_sysphoto\",\"name\":\"是的\",\"key\":\"58fdfaa9e1965\"}]}]', '1497398820', '1550830243');
INSERT INTO `y_wechat_config` VALUES ('2', 'service', '客服配置', '{\"onlinetime\":\"09:00-18:00\",\"offlinemsg\":\"请在工作时间联系客服！\",\"nosessionmsg\":\"当前没有客服在线！请稍后重试！\",\"waitformsg\":\"请问有什么可以帮到您？\"}', '1497429674', '1497429674');
INSERT INTO `y_wechat_config` VALUES ('3', 'signin', '连续登录配置', '{\"s1\":\"100\",\"s2\":\"200\",\"s3\":\"300\",\"sn\":\"500\"}', '1497429711', '1497429711');

-- ----------------------------
-- Table structure for y_wechat_context
-- ----------------------------
DROP TABLE IF EXISTS `y_wechat_context`;
CREATE TABLE `y_wechat_context` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `openid` varchar(64) NOT NULL DEFAULT '',
  `type` varchar(30) NOT NULL DEFAULT '' COMMENT '类型',
  `eventkey` varchar(64) NOT NULL DEFAULT '',
  `command` varchar(64) NOT NULL DEFAULT '',
  `message` varchar(255) NOT NULL DEFAULT '' COMMENT '内容',
  `refreshtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最后刷新时间',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `openid` (`openid`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='微信上下文表';

-- ----------------------------
-- Records of y_wechat_context
-- ----------------------------

-- ----------------------------
-- Table structure for y_wechat_response
-- ----------------------------
DROP TABLE IF EXISTS `y_wechat_response`;
CREATE TABLE `y_wechat_response` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '资源名',
  `eventkey` varchar(128) NOT NULL DEFAULT '' COMMENT '事件',
  `type` enum('text','image','news','voice','video','music','link','app') NOT NULL DEFAULT 'text' COMMENT '类型',
  `content` text NOT NULL COMMENT '内容',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`),
  UNIQUE KEY `event` (`eventkey`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT='微信资源表';

-- ----------------------------
-- Records of y_wechat_response
-- ----------------------------
INSERT INTO `y_wechat_response` VALUES ('1', '签到送积分', '58adaf7876aab', 'app', '{\"app\":\"signin\",\"id\":\"\"}', '', '1487777656', '1550648059', '1');
INSERT INTO `y_wechat_response` VALUES ('2', '关于我们', '58bf944aa0777', 'app', '{\"app\":\"page\",\"id\":\"1\"}', '', '1488950346', '1550648055', '1');
INSERT INTO `y_wechat_response` VALUES ('3', '自动回复1', '58c7d908c4570', 'text', '{\"content\":\"world\"}', '', '1489492232', '1550648050', '1');
INSERT INTO `y_wechat_response` VALUES ('4', '联系客服', '58cb852984970', 'app', '{\"app\":\"service\",\"id\":\"\"}', '', '1489732905', '1550648044', '1');
INSERT INTO `y_wechat_response` VALUES ('5', '自动回复2', '58fdfaa9e1965', 'text', '{\"content\":\"\\u8fd9\\u91cc\\u662f\\u7f18\\u521b\\u6d3e\"}', '', '1493039785', '1550816834', '1');
